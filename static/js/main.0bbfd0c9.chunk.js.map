{"version":3,"sources":["components/context/Swap.tsx","components/context/Dex.tsx","components/context/Mint.tsx","components/context/TokenList.tsx","utils/tokens.ts","components/context/Token.tsx","components/TokenDialog.tsx","components/Settings.tsx","components/Swap.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SRM_MINT","PublicKey","USDC_MINT","USDT_MINT","_SwapContext","React","createContext","SwapContextProvider","props","swapClient","useState","fromMint","setFromMint","toMint","setToMint","fromAmount","_setFromAmount","toAmount","_setToAmount","slippage","setSlippage","Provider","value","setFromAmount","amount","setToAmount","swapToFromMints","oldFrom","oldFromAmount","oldToAmount","children","useSwapContext","ctx","useContext","Error","DEX_PID","_DexContext","DexContextProvider","Map","ooAccounts","setOoAccounts","marketCache","setMarketCache","provider","useEffect","OpenOrders","findForOwner","connection","wallet","publicKey","then","openOrders","a","newOoAccounts","markets","Set","forEach","oo","add","market","toString","get","push","set","size","anchor","getMultipleAccounts","map","m","marketAccounts","programAccount","account","Market","getLayout","decode","data","opts","newMarketCache","_MintContext","MintContextProvider","mintCache","setMintCache","useMint","mint","asyncMintInfo","useAsync","undefined","mintClient","Token","TOKEN_PROGRAM_ID","Account","getMintInfo","mintInfo","cache","result","_TokenListContext","TokenListContextProvider","tokenList","useTokenList","getList","filters","getOwnedAccountsFilters","_rpcRequest","toBase58","commitment","resp","error","message","pubkey","executable","owner","lamports","accountInfo","bs58","filter","every","dataSize","length","memcmp","filterBytes","bytes","slice","offset","equals","parseTokenAccountData","ACCOUNT_LAYOUT","BufferLayout","BN","offsetOf","span","_TokenContext","TokenContextProvider","ownedTokenAccounts","setOwnedTokenAccounts","getOwnedTokenAccounts","useStyles","makeStyles","theme","dialogContent","paddingTop","textField","width","border","borderRadius","marginBottom","TokenDialog","open","onClose","setMint","tokenFilter","setTokenFilter","styles","Dialog","PaperProps","style","DialogTitle","fontWeight","DialogContent","className","TextField","placeholder","onChange","e","target","InputProps","disableUnderline","padding","List","disablePadding","tokens","concat","TokenListItem","onClick","ListItem","button","TokenIcon","TokenName","tokenInfo","t","address","marginLeft","Typography","symbol","color","fontSize","name","tab","table","settingsButton","SettingsButton","showSettingsDialog","setShowSettingsDialog","variant","popupState","IconButton","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","marginTop","type","parseFloat","display","justifyContent","flexDirection","endAdornment","InputAdornment","position","Button","background","SettingsDialog","maxWidth","OpenOrdersAccounts","useOpenOrders","TableContainer","component","Paper","elevation","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","Array","from","entries","oos","OpenOrdersRow","ooAccount","setOoAccount","marketClient","asyncMarket","load","useMarket","base","baseMintAddress","quote","quoteMintAddress","baseTicker","quoteTicker","marketName","closeDisabled","baseTokenTotal","toNumber","quoteTokenTotal","closeOpenOrders","scope","toDisplay","sub","baseTokenFree","quoteTokenFree","Select","MenuItem","disabled","decimals","toFixed","card","cardContent","marginRight","swapButton","swapToFromButton","auxilliaryLabel","Swap","SwapClient","SwapCard","Card","SwapHeader","SwapFromForm","SwapToFromButton","SwapToForm","AuxilliaryLabel","SwapButton","margin","toPrice","fromTokenInfo","toTokenInfo","Info","SwapTokenForm","setAmount","showTokenDialog","setShowTokenDialog","tokenAccount","tokenAccounts","sort","b","useOwnedTokenAccount","mintAccount","height","TokenButton","ExpandMore","logoURI","alt","src","sendSwapTransaction","console","log","App","params","setParams","isConnected","setIsConnected","preflightCommitment","network","Wallet","Connection","TokenListProvider","resolve","connect","on","left","right","top","bottom","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bbfd0c9.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { MintInfo } from \"@solana/spl-token\";\n\nconst SRM_MINT = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\nexport const USDC_MINT = new PublicKey(\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n);\nexport const USDT_MINT = new PublicKey(\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"\n);\n\nconst _SwapContext = React.createContext<null | SwapContext>(null);\n\nexport function SwapContextProvider(props: any) {\n  const swapClient = props.swapClient;\n  const [fromMint, setFromMint] = useState(SRM_MINT);\n  const [toMint, setToMint] = useState(USDC_MINT);\n  const [fromAmount, _setFromAmount] = useState(0);\n  const [toAmount, _setToAmount] = useState(0);\n  // Percent units.\n  const [slippage, setSlippage] = useState(0.5);\n\n  const swapToFromMints = () => {\n    const oldFrom = fromMint;\n    const oldFromAmount = fromAmount;\n    const oldTo = toMint;\n    const oldToAmount = toAmount;\n    setFromMint(oldTo);\n    setToMint(oldFrom);\n    _setFromAmount(oldToAmount);\n    _setToAmount(oldFromAmount);\n  };\n\n  const setFromAmount = (amount: number) => {\n    _setFromAmount(amount);\n  };\n\n  const setToAmount = (amount: number) => {\n    _setToAmount(amount);\n  };\n\n  return (\n    <_SwapContext.Provider\n      value={{\n        swapClient,\n        fromMint,\n        setFromMint,\n        toMint,\n        setToMint,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        swapToFromMints,\n        slippage,\n        setSlippage,\n      }}\n    >\n      {props.children}\n    </_SwapContext.Provider>\n  );\n}\n\nexport function useSwapContext(): SwapContext {\n  const ctx = useContext(_SwapContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport type SwapContext = {\n  swapClient: SwapClient;\n  fromMint: PublicKey;\n  setFromMint: (m: PublicKey) => void;\n  toMint: PublicKey;\n  setToMint: (m: PublicKey) => void;\n  fromAmount: number;\n  setFromAmount: (a: number) => void;\n  toAmount: number;\n  setToAmount: (a: number) => void;\n  swapToFromMints: () => void;\n  fromMintAccount?: MintInfo;\n  toMintAccount?: MintInfo;\n  slippage: number;\n  setSlippage: (n: number) => void;\n};\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { Market, OpenOrders } from \"@project-serum/serum\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst DEX_PID = new PublicKey(\"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\");\n\nconst _DexContext = React.createContext<DexContext | null>(null);\ntype DexContext = {\n  // Maps market address to open orders accounts.\n  openOrders: Map<string, Array<OpenOrders>>;\n  marketCache: Map<string, Market>;\n  setMarketCache: (c: Map<string, Market>) => void;\n  provider: Provider;\n};\n\nexport function DexContextProvider(props: any) {\n  const [ooAccounts, setOoAccounts] = useState<Map<string, Array<OpenOrders>>>(\n    new Map()\n  );\n  const [marketCache, setMarketCache] = useState<Map<string, Market>>(\n    new Map()\n  );\n  const provider = props.provider;\n\n  // Two operations:\n  // 1. Fetch all open orders accounts for the connected wallet.\n  // 2. Batch fetch all market accounts.\n  useEffect(() => {\n    OpenOrders.findForOwner(\n      provider.connection,\n      provider.wallet.publicKey,\n      DEX_PID\n    ).then(async (openOrders) => {\n      const newOoAccounts = new Map();\n      let markets = new Set<string>();\n      openOrders.forEach((oo) => {\n        markets.add(oo.market.toString());\n        if (newOoAccounts.get(oo.market.toString())) {\n          newOoAccounts.get(oo.market.toString()).push(oo);\n        } else {\n          newOoAccounts.set(oo.market.toString(), [oo]);\n        }\n      });\n      if (markets.size > 100) {\n        // Punt request chunking until there's user demand.\n        throw new Error(\n          \"Too many markets. Please file an issue to update this\"\n        );\n      }\n      const marketAccounts = (\n        await anchor.utils.getMultipleAccounts(\n          provider.connection,\n          // @ts-ignore\n          [...markets].map((m) => new PublicKey(m))\n        )\n      ).map((programAccount) => {\n        return {\n          publicKey: programAccount?.publicKey,\n          account: new Market(\n            Market.getLayout(DEX_PID).decode(programAccount?.account.data),\n            -1, // Not used so don't bother fetching.\n            -1, // Not used so don't bother fetching.\n            provider.opts,\n            DEX_PID\n          ),\n        };\n      });\n      setMarketCache((marketCache) => {\n        const newMarketCache = new Map(marketCache);\n        marketAccounts.forEach((m) => {\n          newMarketCache.set(m.publicKey!.toString(), m.account);\n        });\n        return newMarketCache;\n      });\n      setOoAccounts(newOoAccounts);\n    });\n  }, [provider.connection, provider.wallet.publicKey, provider.opts]);\n  return (\n    <_DexContext.Provider\n      value={{\n        openOrders: ooAccounts,\n        marketCache,\n        setMarketCache,\n        provider,\n      }}\n    >\n      {props.children}\n    </_DexContext.Provider>\n  );\n}\n\nexport function useOpenOrders(): Map<string, Array<OpenOrders>> {\n  const ctx = useContext(_DexContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx.openOrders;\n}\n\nexport function useMarket(market: PublicKey): Market | undefined {\n  const ctx = useContext(_DexContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n\n  const asyncMarket = useAsync(async () => {\n    if (ctx.marketCache.get(market.toString())) {\n      return ctx.marketCache.get(market.toString());\n    }\n    const marketClient = await Market.load(\n      ctx.provider.connection,\n      market,\n      undefined,\n      DEX_PID\n    );\n\n    let cache = new Map(ctx.marketCache);\n    cache.set(market.toString(), marketClient);\n    ctx.setMarketCache(cache);\n\n    return marketClient;\n  }, [ctx.provider.connection, market]);\n\n  if (asyncMarket.result) {\n    return asyncMarket.result;\n  }\n\n  return undefined;\n}\n","import React, { useContext, useState } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { PublicKey, Account } from \"@solana/web3.js\";\nimport { MintInfo, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nconst _MintContext = React.createContext<null | MintContext>(null);\ntype MintContext = {\n  mintCache: Map<string, MintInfo>;\n  setMintCache: (m: Map<string, MintInfo>) => void;\n  provider: Provider;\n};\n\nexport function MintContextProvider(props: any) {\n  const provider = props.provider;\n  const [mintCache, setMintCache] = useState(new Map<string, MintInfo>());\n\n  return (\n    <_MintContext.Provider\n      value={{\n        mintCache,\n        setMintCache,\n        provider,\n      }}\n    >\n      {props.children}\n    </_MintContext.Provider>\n  );\n}\n\nexport function useMint(mint?: PublicKey): MintInfo | undefined | null {\n  const ctx = useContext(_MintContext);\n  if (ctx === null) {\n    throw new Error(\"Mint context not found\");\n  }\n\n  // Lazy load the mint account if needeed.\n  const asyncMintInfo = useAsync(async () => {\n    if (!mint) {\n      return undefined;\n    }\n    if (ctx.mintCache.get(mint.toString())) {\n      return ctx.mintCache.get(mint.toString());\n    }\n    const mintClient = new Token(\n      ctx.provider.connection,\n      mint,\n      TOKEN_PROGRAM_ID,\n      new Account()\n    );\n    const mintInfo = await mintClient.getMintInfo();\n\n    let cache = new Map(ctx.mintCache);\n    cache.set(mint.toString(), mintInfo);\n    ctx.setMintCache(cache);\n\n    return mintInfo;\n  }, [ctx.provider.connection, mint]);\n\n  if (asyncMintInfo.result) {\n    return asyncMintInfo.result;\n  }\n  return undefined;\n}\n","import React, { useContext } from \"react\";\nimport { TokenListContainer, TokenInfo } from \"@solana/spl-token-registry\";\n\nconst _TokenListContext = React.createContext<null | TokenListContext>(null);\n\nexport function TokenListContextProvider(props: any) {\n  return (\n    <_TokenListContext.Provider value={{ tokenList: props.tokenList }}>\n      {props.children}\n    </_TokenListContext.Provider>\n  );\n}\n\ntype TokenListContext = {\n  tokenList: TokenListContainer;\n};\n\nexport function useTokenList(): TokenInfo[] {\n  const ctx = useContext(_TokenListContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx.tokenList.getList();\n}\n","// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet..\n\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as bs58 from \"bs58\";\n\nexport async function getOwnedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey\n) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection._rpcRequest(\"getProgramAccounts\", [\n    TOKEN_PROGRAM_ID.toBase58(),\n    {\n      commitment: connection.commitment,\n      filters,\n    },\n  ]);\n  if (resp.error) {\n    throw new Error(\n      \"failed to get token accounts owned by \" +\n        publicKey.toBase58() +\n        \": \" +\n        resp.error.message\n    );\n  }\n  return resp.result\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data: bs58.decode(data),\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .filter(({ accountInfo }: any) => {\n      // TODO: remove this check once mainnet is updated\n      return filters.every((filter) => {\n        if (filter.dataSize) {\n          return accountInfo.data.length === filter.dataSize;\n        } else if (filter.memcmp) {\n          let filterBytes = bs58.decode(filter.memcmp.bytes);\n          return accountInfo.data\n            .slice(\n              filter.memcmp.offset,\n              filter.memcmp.offset + filterBytes.length\n            )\n            .equals(filterBytes);\n        }\n        return false;\n      });\n    })\n    .map(({ publicKey, accountInfo }: any) => {\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\n    });\n}\n\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, \"mint\"),\n  BufferLayout.blob(32, \"owner\"),\n  BufferLayout.nu64(\"amount\"),\n  BufferLayout.blob(93),\n]);\n\nexport const MINT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(44),\n  BufferLayout.u8(\"decimals\"),\n  BufferLayout.blob(37),\n]);\n\nexport function parseTokenAccountData(data: Buffer) {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount),\n  };\n}\n\nexport function parseMintData(data: Buffer) {\n  // @ts-ignore\n  let { decimals } = MINT_LAYOUT.decode(data);\n  return { decimals };\n}\n\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { AccountInfo as TokenAccount } from \"@solana/spl-token\";\nimport { getOwnedTokenAccounts } from \"../../utils/tokens\";\n\nconst _TokenContext = React.createContext<TokenContext | null>(null);\n\nexport function TokenContextProvider(props: any) {\n  const provider = props.provider;\n  const [ownedTokenAccounts, setOwnedTokenAccounts] = useState(undefined);\n\n  // Fetch all the owned token accounts for the wallet.\n  useEffect(() => {\n    getOwnedTokenAccounts(provider.connection, provider.wallet.publicKey).then(\n      setOwnedTokenAccounts\n    );\n  }, [provider.wallet.publicKey, provider.connection]);\n\n  return (\n    <_TokenContext.Provider\n      value={{\n        ownedTokenAccounts,\n      }}\n    >\n      {props.children}\n    </_TokenContext.Provider>\n  );\n}\n\nexport type TokenContext = {\n  ownedTokenAccounts:\n    | { publicKey: PublicKey; account: TokenAccount }[]\n    | undefined;\n};\n\n// Null => none exists.\n// Undefined => loading.\nexport function useOwnedTokenAccount(\n  mint: PublicKey\n): { publicKey: PublicKey; account: TokenAccount } | null | undefined {\n  const ctx = useContext(_TokenContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  if (ctx.ownedTokenAccounts === undefined) {\n    return undefined;\n  }\n  const tokenAccounts = ctx.ownedTokenAccounts.filter((account) =>\n    account.account.mint.equals(mint)\n  );\n\n  if (tokenAccounts.length === 0) {\n    return null;\n  }\n\n  // Take the account with the most tokens in it.\n  tokenAccounts.sort((a, b) =>\n    a.account.amount < b.account.amount\n      ? -1\n      : a.account.amount > b.account.amount\n      ? 1\n      : 0\n  );\n  return tokenAccounts[0];\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  List,\n  ListItem,\n  Typography,\n} from \"@material-ui/core\";\nimport { TokenIcon } from \"./Swap\";\nimport { useSwapContext, USDC_MINT, USDT_MINT } from \"./context/Swap\";\nimport { useTokenList } from \"./context/TokenList\";\n\nconst useStyles = makeStyles((theme) => ({\n  dialogContent: {\n    paddingTop: 0,\n  },\n  textField: {\n    width: \"100%\",\n    border: \"solid 1pt #ccc\",\n    borderRadius: \"10px\",\n    marginBottom: \"8px\",\n  },\n}));\n\nexport default function TokenDialog({\n  open,\n  onClose,\n  setMint,\n}: {\n  open: boolean;\n  onClose: () => void;\n  setMint: (mint: PublicKey) => void;\n}) {\n  const [tokenFilter, setTokenFilter] = useState(\"\");\n  const styles = useStyles();\n  const { swapClient } = useSwapContext();\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n        },\n      }}\n    >\n      <div style={{ width: \"420px\" }}>\n        <DialogTitle style={{ fontWeight: \"bold\" }}>Select a token</DialogTitle>\n        <DialogContent className={styles.dialogContent}>\n          <TextField\n            className={styles.textField}\n            placeholder={\"Search name\"}\n            value={tokenFilter}\n            onChange={(e) => setTokenFilter(e.target.value)}\n            InputProps={{\n              disableUnderline: true,\n              style: { padding: \"10px\" },\n            }}\n          />\n          <div>\n            <List disablePadding>\n              {swapClient\n                .tokens()\n                .concat([USDC_MINT, USDT_MINT])\n                .map((mint) => (\n                  <TokenListItem\n                    key={mint.toString()}\n                    mint={mint}\n                    onClick={(mint) => {\n                      setMint(mint);\n                      onClose();\n                    }}\n                  />\n                ))}\n            </List>\n          </div>\n        </DialogContent>\n      </div>\n    </Dialog>\n  );\n}\n\nfunction TokenListItem({\n  mint,\n  onClick,\n}: {\n  mint: PublicKey;\n  onClick: (mint: PublicKey) => void;\n}) {\n  return (\n    <ListItem button onClick={() => onClick(mint)}>\n      <TokenIcon mint={mint} style={{ width: \"30px\", borderRadius: \"15px\" }} />\n      <TokenName mint={mint} />\n    </ListItem>\n  );\n}\n\nfunction TokenName({ mint }: { mint: PublicKey }) {\n  const tokenList = useTokenList();\n  let tokenInfo = tokenList.filter((t) => t.address === mint.toString())[0];\n  return (\n    <div style={{ marginLeft: \"16px\" }}>\n      <Typography style={{ fontWeight: \"bold\" }}>{tokenInfo.symbol}</Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n        {tokenInfo.name}\n      </Typography>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { MintInfo } from \"@solana/spl-token\";\nimport { BN } from \"@project-serum/anchor\";\nimport { OpenOrders } from \"@project-serum/serum\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogContent,\n  Paper,\n  Table,\n  TableRow,\n  TableHead,\n  TableCell,\n  TableBody,\n  TableContainer,\n  Popover,\n  IconButton,\n  Typography,\n  Button,\n  Select,\n  MenuItem,\n  TextField,\n  InputAdornment,\n} from \"@material-ui/core\";\nimport { SettingsOutlined as Settings } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { useSwapContext } from \"./context/Swap\";\nimport { useMarket, useOpenOrders } from \"./context/Dex\";\nimport { useTokenList } from \"./context/TokenList\";\nimport { useMint } from \"./context/Mint\";\n\nconst useStyles = makeStyles(() => ({\n  tab: {\n    width: \"50%\",\n  },\n  table: {},\n  settingsButton: {\n    padding: 0,\n  },\n}));\n\nexport function SettingsButton() {\n  const styles = useStyles();\n  const { slippage, setSlippage } = useSwapContext();\n  const [showSettingsDialog, setShowSettingsDialog] = useState(false);\n\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.settingsButton}\n            >\n              <Settings />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{ style: { borderRadius: \"10px\" } }}\n            >\n              <div style={{ padding: \"15px\", width: \"305px\" }}>\n                <Typography\n                  color=\"textSecondary\"\n                  style={{ fontWeight: \"bold\" }}\n                >\n                  Settings\n                </Typography>\n                <div style={{ marginTop: \"10px\" }}>\n                  <Typography>Slippage tolerance</Typography>\n                  <TextField\n                    type=\"number\"\n                    placeholder=\"Error tolerance percentage\"\n                    value={slippage}\n                    onChange={(e) => setSlippage(parseFloat(e.target.value))}\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                      flexDirection: \"column\",\n                    }}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">%</InputAdornment>\n                      ),\n                    }}\n                  />\n                  <Button\n                    style={{\n                      width: \"100%\",\n                      marginTop: \"10px\",\n                      background: \"#e0e0e0\",\n                    }}\n                    onClick={() => setShowSettingsDialog(true)}\n                  >\n                    Manage Dex Accounts\n                  </Button>\n                </div>\n                <SettingsDialog\n                  open={showSettingsDialog}\n                  onClose={() => setShowSettingsDialog(false)}\n                />\n              </div>\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nexport function SettingsDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog\n      maxWidth=\"lg\"\n      open={open}\n      onClose={onClose}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n        },\n      }}\n    >\n      <div>\n        <DialogContent style={{ paddingTop: 0 }}>\n          <OpenOrdersAccounts />\n        </DialogContent>\n      </div>\n    </Dialog>\n  );\n}\n\nfunction OpenOrdersAccounts() {\n  const styles = useStyles();\n  const openOrders = useOpenOrders();\n  return (\n    <TableContainer component={Paper} elevation={0}>\n      <Table className={styles.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Market</TableCell>\n            <TableCell align=\"right\">Base Used</TableCell>\n            <TableCell align=\"right\">Base Free</TableCell>\n            <TableCell align=\"right\">Quote Used</TableCell>\n            <TableCell align=\"right\">Quote Free</TableCell>\n            <TableCell align=\"right\">Open Orders Account</TableCell>\n            <TableCell align=\"right\">Action</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {Array.from(openOrders.entries()).map(([market, oos]) => {\n            return (\n              <OpenOrdersRow\n                key={market}\n                market={new PublicKey(market)}\n                openOrders={oos}\n              />\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction OpenOrdersRow({\n  market,\n  openOrders,\n}: {\n  market: PublicKey;\n  openOrders: Array<OpenOrders>;\n}) {\n  const [ooAccount, setOoAccount] = useState(openOrders[0]);\n  const marketClient = useMarket(market);\n  const tokenList = useTokenList();\n  const base = useMint(marketClient?.baseMintAddress);\n  const quote = useMint(marketClient?.quoteMintAddress);\n  const baseTicker = tokenList\n    .filter((t) => t.address === marketClient?.baseMintAddress.toString())\n    .map((t) => t.symbol)[0];\n  const quoteTicker = tokenList\n    .filter((t) => t.address === marketClient?.quoteMintAddress.toString())\n    .map((t) => t.symbol)[0];\n  const marketName =\n    baseTicker && quoteTicker\n      ? `${baseTicker} / ${quoteTicker}`\n      : market.toString();\n  const closeDisabled =\n    ooAccount.baseTokenTotal.toNumber() +\n      ooAccount.quoteTokenTotal.toNumber() !==\n    0;\n\n  const closeOpenOrders = async () => {\n    // todo\n  };\n\n  return (\n    <TableRow key={market.toString()}>\n      <TableCell component=\"th\" scope=\"row\">\n        {marketName}\n      </TableCell>\n      <TableCell align=\"right\">\n        {toDisplay(base, ooAccount.baseTokenTotal.sub(ooAccount.baseTokenFree))}\n      </TableCell>\n      <TableCell align=\"right\">\n        {toDisplay(base, ooAccount.baseTokenFree)}\n      </TableCell>\n      <TableCell align=\"right\">\n        {toDisplay(\n          quote,\n          ooAccount.quoteTokenTotal.sub(ooAccount.quoteTokenFree)\n        )}\n      </TableCell>\n      <TableCell align=\"right\">\n        {toDisplay(quote, ooAccount.quoteTokenFree)}\n      </TableCell>\n      <TableCell align=\"right\">\n        <Select\n          value={ooAccount.address.toString()}\n          onChange={(e) =>\n            setOoAccount(\n              openOrders.filter(\n                (oo) => oo.address.toString() === e.target.value\n              )[0]\n            )\n          }\n        >\n          {openOrders.map((oo) => {\n            return (\n              <MenuItem value={oo.address.toString()}>\n                {oo.address.toString()}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </TableCell>\n      <TableCell align=\"right\">\n        <Button\n          color=\"secondary\"\n          disabled={closeDisabled}\n          onClick={closeOpenOrders}\n        >\n          Close\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n}\n\nfunction toDisplay(mintInfo: MintInfo | undefined | null, value: BN): string {\n  if (!mintInfo) {\n    return value.toNumber().toString();\n  }\n  return (value.toNumber() / 10 ** mintInfo.decimals).toFixed(\n    mintInfo.decimals\n  );\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenListContainer } from \"@solana/spl-token-registry\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  makeStyles,\n  Card,\n  Button,\n  Paper,\n  Typography,\n  TextField,\n} from \"@material-ui/core\";\nimport { Info, ExpandMore } from \"@material-ui/icons\";\nimport { SwapContextProvider, useSwapContext } from \"./context/Swap\";\nimport { DexContextProvider } from \"./context/Dex\";\nimport { MintContextProvider, useMint } from \"./context/Mint\";\nimport { TokenListContextProvider, useTokenList } from \"./context/TokenList\";\nimport { TokenContextProvider, useOwnedTokenAccount } from \"./context/Token\";\nimport TokenDialog from \"./TokenDialog\";\nimport { SettingsButton } from \"./Settings\";\n\nconst useStyles = makeStyles(() => ({\n  card: {\n    width: \"450px\",\n    borderRadius: \"10px\",\n    border: \"solid 1pt #e0e0e0\",\n  },\n  cardContent: {\n    marginLeft: \"6px\",\n    marginRight: \"6px\",\n    marginBottom: \"6px\",\n  },\n  tab: {\n    width: \"50%\",\n  },\n  settingsButton: {\n    padding: 0,\n  },\n  swapButton: {\n    width: \"100%\",\n    borderRadius: \"15px\",\n  },\n  swapToFromButton: {\n    display: \"block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n  auxilliaryLabel: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n  },\n}));\n\nexport default function Swap({\n  style,\n  provider,\n  tokenList,\n}: {\n  style?: any;\n  provider: Provider;\n  tokenList: TokenListContainer;\n}) {\n  const swapClient = new SwapClient(provider, tokenList);\n  return (\n    <TokenListContextProvider tokenList={tokenList}>\n      <MintContextProvider provider={provider}>\n        <TokenContextProvider provider={provider}>\n          <DexContextProvider provider={provider}>\n            <SwapContextProvider swapClient={swapClient}>\n              <SwapCard style={style} />\n            </SwapContextProvider>\n          </DexContextProvider>\n        </TokenContextProvider>\n      </MintContextProvider>\n    </TokenListContextProvider>\n  );\n}\n\nfunction SwapCard({ style }: { style?: any }) {\n  const styles = useStyles();\n  return (\n    <div style={style}>\n      <Card className={styles.card}>\n        <SwapHeader />\n        <div className={styles.cardContent}>\n          <SwapFromForm />\n          <SwapToFromButton />\n          <SwapToForm />\n          <AuxilliaryLabel />\n          <SwapButton />\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nfunction SwapHeader() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        margin: \"8px\",\n      }}\n    >\n      <Typography\n        style={{\n          fontWeight: \"bold\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        Swap\n      </Typography>\n      <SettingsButton />\n    </div>\n  );\n}\n\nfunction AuxilliaryLabel() {\n  const styles = useStyles();\n\n  const { fromMint, toMint, fromAmount, toAmount } = useSwapContext();\n  const toPrice = (fromAmount / toAmount).toFixed(6); // TODO: decimals per mint type.\n\n  const tokenList = useTokenList();\n  let fromTokenInfo = tokenList.filter(\n    (t) => t.address === fromMint.toString()\n  )[0];\n  let toTokenInfo = tokenList.filter((t) => t.address === toMint.toString())[0];\n\n  return (\n    <div className={styles.auxilliaryLabel}>\n      <Typography color=\"textSecondary\"></Typography>\n      <div style={{ display: \"flex\" }}>\n        <div\n          style={{\n            marginRight: \"10px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          {fromAmount !== 0 && toAmount !== 0\n            ? `1 ${toTokenInfo.symbol} = ${toPrice} ${fromTokenInfo.symbol}`\n            : `-`}\n        </div>\n        <Info />\n      </div>\n    </div>\n  );\n}\n\nexport function SwapToFromButton() {\n  const styles = useStyles();\n  const { swapToFromMints } = useSwapContext();\n  return (\n    <Button className={styles.swapToFromButton} onClick={swapToFromMints}>\n      ⇅\n    </Button>\n  );\n}\n\nfunction SwapFromForm() {\n  const { fromMint, setFromMint, fromAmount, setFromAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      mint={fromMint}\n      setMint={setFromMint}\n      amount={fromAmount}\n      setAmount={setFromAmount}\n    />\n  );\n}\n\nfunction SwapToForm() {\n  const { toMint, setToMint, toAmount, setToAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      mint={toMint}\n      setMint={setToMint}\n      amount={toAmount}\n      setAmount={setToAmount}\n    />\n  );\n}\n\nfunction SwapTokenForm({\n  mint,\n  setMint,\n  amount,\n  setAmount,\n}: {\n  mint: PublicKey;\n  setMint: (m: PublicKey) => void;\n  amount: number;\n  setAmount: (a: number) => void;\n}) {\n  const [showTokenDialog, setShowTokenDialog] = useState(false);\n  const tokenAccount = useOwnedTokenAccount(mint);\n  const mintAccount = useMint(mint);\n\n  return (\n    <Paper elevation={0} variant=\"outlined\" style={{ borderRadius: \"10px\" }}>\n      <div\n        style={{\n          height: \"50px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <TokenButton mint={mint} onClick={() => setShowTokenDialog(true)} />\n        <TextField\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(parseFloat(e.target.value))}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        />\n      </div>\n      <div style={{ marginLeft: \"10px\", height: \"30px\" }}>\n        <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n          {tokenAccount && mintAccount\n            ? `Balance: ${(\n                tokenAccount.account.amount.toNumber() /\n                10 ** mintAccount.decimals\n              ).toFixed(mintAccount.decimals)}`\n            : `-`}\n        </Typography>\n      </div>\n      <TokenDialog\n        setMint={setMint}\n        open={showTokenDialog}\n        onClose={() => setShowTokenDialog(false)}\n      />\n    </Paper>\n  );\n}\n\nfunction TokenButton({\n  mint,\n  onClick,\n}: {\n  mint: PublicKey;\n  onClick: () => void;\n}) {\n  return (\n    <Button onClick={onClick} style={{ width: \"116px\" }}>\n      <TokenIcon mint={mint} style={{ width: \"25px\", borderRadius: \"13px\" }} />\n      <TokenName mint={mint} />\n      <ExpandMore />\n    </Button>\n  );\n}\n\nexport function TokenIcon({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenList = useTokenList();\n  let tokenInfo = tokenList.filter((t) => t.address === mint.toString())[0];\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {tokenInfo.logoURI ? (\n        <img alt=\"token logo\" style={style} src={tokenInfo.logoURI} />\n      ) : (\n        <div style={style}></div>\n      )}\n    </div>\n  );\n}\n\nfunction TokenName({ mint }: { mint: PublicKey }) {\n  const tokenList = useTokenList();\n  let tokenInfo = tokenList.filter((t) => t.address === mint.toString())[0];\n  return (\n    <Typography style={{ marginLeft: \"5px\" }}>{tokenInfo.symbol}</Typography>\n  );\n}\n\nfunction SwapButton() {\n  const styles = useStyles();\n  const { fromMint, toMint, fromAmount, slippage } = useSwapContext();\n\n  const sendSwapTransaction = async () => {\n    console.log(\"sending swap\");\n  };\n  return (\n    <Button\n      variant=\"contained\"\n      className={styles.swapButton}\n      onClick={sendSwapTransaction}\n    >\n      Swap\n    </Button>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { Provider } from \"@project-serum/anchor\";\n// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { ConfirmOptions, Connection } from \"@solana/web3.js\";\nimport { TokenListProvider } from \"@solana/spl-token-registry\";\nimport Swap from \"./components/Swap\";\nimport \"./App.css\";\n\nfunction App() {\n  const [params, setParams] = useState<any>(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Create the provider and token list.\n  useEffect(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    const network = \"https://solana-api.projectserum.com\";\n    const wallet = new Wallet(\"https://www.sollet.io\", network);\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, wallet, opts);\n    new TokenListProvider().resolve().then((tokenList) => {\n      setParams({\n        provider,\n        tokenList,\n      });\n      wallet.connect();\n    });\n  }, [setParams]);\n\n  // Connect to the wallet.\n  useEffect(() => {\n    if (params !== null) {\n      params.provider.wallet.on(\"connect\", () => {\n        setIsConnected(true);\n      });\n      params.provider.wallet.connect();\n    }\n  }, [params]);\n\n  return (\n    <div\n      style={{\n        width: \"450px\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        position: \"absolute\",\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {isConnected ? (\n        <Swap provider={params.provider} tokenList={params.tokenList} />\n      ) : (\n        <Typography style={{ textAlign: \"center\" }}>Disconnected</Typography>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}