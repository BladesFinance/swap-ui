{"version":3,"sources":["swap/utils/pubkeys.ts","swap/components/context/TokenList.tsx","swap/components/context/Sollet.tsx","swap/components/context/Dex.tsx","swap/components/context/Swap.tsx","swap/components/context/Mint.tsx","swap/utils/tokens.ts","swap/components/context/Token.tsx","swap/components/TokenDialog.tsx","swap/components/Settings.tsx","swap/components/Info.tsx","swap/components/Swap.tsx","swap/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEX_PID","PublicKey","SRM_MINT","USDC_MINT","USDT_MINT","WORM_MARKET_BASE","WORM_USDC_MINT","WORM_USDC_MARKET","WORM_USDT_MINT","WORM_USDT_MARKET","_TokenListContext","React","createContext","SPL_REGISTRY_SOLLET_TAG","SPL_REGISTRY_WORM_TAG","TokenListContextProvider","props","tokenList","useMemo","filterByClusterSlug","getList","tokenMap","Map","forEach","t","set","address","swappableTokens","tokens","filter","isUsdxQuoted","extensions","serumV3Usdt","serumV3Usdc","isSol","concat","get","toString","sort","a","b","symbol","tags","includes","map","swappableTokensSollet","solletMap","swappableTokensWormhole","wormholeMap","Provider","value","children","useTokenListContext","ctx","useContext","Error","useTokenMap","fetchSolletInfo","mint","undefined","info","_SOLLET_INFO_CACHE","swapApiRequest","infoRaw","splMint","requestWormholeSwapMarketIfNeeded","connection","solletMint","wormholeMint","swapMarket","solletInfo","cached","_SWAP_MARKET_EXISTS_CACHE","getAccountInfo","ticker","catch","console","error","method","path","body","params","headers","cache","JSON","stringify","fetch","resp","handleSwapApiResponse","json","success","SwapApiError","status","result","msg","name","_DexContext","DexContextProvider","useState","ooAccounts","setOoAccounts","marketCache","setMarketCache","orderbookCache","setOrderbookCache","swapClient","useEffect","program","provider","wallet","publicKey","OpenOrders","findForOwner","then","openOrders","newOoAccounts","markets","Set","oo","add","market","push","size","anchor","getMultipleAccounts","m","marketAccounts","programAccount","account","Market","getLayout","decode","data","opts","newMarketCache","useDexContext","useOpenOrders","useMarket","asyncMarket","useAsync","load","marketClient","useFair","orderbook","asyncOrderbook","Promise","all","loadBids","loadAsks","bids","asks","useOrderbook","bestBid","items","next","bestOffer","price","useRoute","fromMint","toMint","route","useRouteVerbose","asyncRoute","wormholeSwapMarket","wormholeMarket","kind","WORMHOLE_NATIVE_MAP","wormKey","first","second","conn","wormholeNativeMarket","wormholeSolletMarket","fromWormhole","isFromWormhole","toWormhole","isToWormhole","fromSollet","isFromSollet","toSollet","isToSollet","base","quote","wormholeInfo","erc20Contract","deriveWormholeMarket","baseMint","quoteMint","version","log","padToTwo","n","slice","seed","createWithSeed","_SwapContext","SwapContextProvider","setFromMint","setToMint","fromAmount","_setFromAmount","toAmount","_setToAmount","isClosingNewAccounts","setIsClosingNewAccounts","slippage","setSlippage","fairOverride","setFairOverride","fair","_useSwapFair","assert","setFromAmount","amount","setToAmount","swapToFromMints","oldFrom","oldFromAmount","oldToAmount","useSwapContext","useSwapFair","fairRoute","fromFair","fromMarket","toFair","length","baseMintAddress","equals","useFairRoute","_MintContext","MintContextProvider","mintCache","setMintCache","useMint","asyncMintInfo","mintClient","Token","TOKEN_PROGRAM_ID","Account","getMintInfo","mintInfo","filters","getOwnedAccountsFilters","_rpcRequest","toBase58","commitment","message","pubkey","executable","owner","lamports","accountInfo","bs58","every","dataSize","memcmp","filterBytes","bytes","offset","parseTokenAccountData","ACCOUNT_LAYOUT","BufferLayout","BN","offsetOf","span","_TokenContext","TokenContextProvider","ownedTokenAccounts","setOwnedTokenAccounts","getOwnedTokenAccounts","useOwnedTokenAccount","tokenAccounts","useStyles","makeStyles","dialogContent","paddingTop","paddingBottom","textField","width","border","borderRadius","marginBottom","tab","minWidth","TokenDialog","open","onClose","setMint","tabSelection","setTabSelection","tokenFilter","setTokenFilter","toLowerCase","styles","useSwappableTokens","selectedTokens","startsWith","Dialog","scroll","PaperProps","style","DialogTitle","fontWeight","Typography","variant","TextField","className","placeholder","onChange","e","target","InputProps","disableUnderline","padding","DialogContent","dividers","List","disablePadding","tokenInfo","TokenListItem","onClick","DialogActions","Tabs","v","Tab","label","ListItem","button","TokenIcon","TokenName","marginLeft","color","fontSize","theme","table","settingsButton","closeAccountSwitchLabel","palette","text","secondary","SettingsButton","popupState","IconButton","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","SettingsDetails","showSettingsDialog","setShowSettingsDialog","marginTop","type","parseFloat","display","justifyContent","flexDirection","endAdornment","InputAdornment","position","marginRight","flex","disabled","ToggleButton","selected","paddingLeft","paddingRight","CloseNewAccountsSwitch","Button","background","SettingsDialog","FormGroup","row","FormControlLabel","classes","labelPlacement","control","Switch","checked","maxWidth","height","right","top","Close","OpenOrdersAccounts","TableContainer","component","Paper","elevation","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","Array","from","entries","oos","OpenOrdersRow","ooAccount","setOoAccount","quoteMintAddress","baseWallet","quoteWallet","baseTicker","quoteTicker","marketName","settleDisabled","baseTokenFree","toNumber","quoteTokenFree","closeDisabled","baseTokenTotal","quoteTokenTotal","settleFunds","makeSettleFundsTransaction","transaction","signers","send","closeOpenOrders","scope","Link","href","rel","Select","MenuItem","toDisplay","sub","decimals","toFixed","infoLabel","fairPriceLabel","infoButton","InfoLabel","fromMintInfo","fromTokenInfo","toTokenInfo","InfoButton","Info","disableRestoreFocus","InfoDetails","addresses","MarketRoute","overflow","useMarketName","card","cardContent","swapButton","swapToFromButton","SwapCard","Card","SwapHeader","SwapFromForm","ArrowButton","SwapToForm","SwapButton","margin","SwapTokenForm","setAmount","showTokenDialog","setShowTokenDialog","tokenAccount","mintAccount","TokenButton","ExpandMore","logoURI","alt","src","toMintInfo","toMarket","enabled","sendSwapTransaction","mul","pow","minExpectedSwapAmount","muln","divn","fromOpenOrders","toOpenOrders","swap","close","Swap","SwapClient","AppInner","enqueueSnackbar","useSnackbar","isConnected","setIsConnected","setTokenList","preflightCommitment","network","Wallet","Connection","NotifyingProvider","tx","err","action","TokenListProvider","resolve","on","left","bottom","disconnect","connect","onTransaction","txSig","this","App","maxSnack","autoHideDuration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e3d2ba3.chunk.js","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\n\nexport const DEX_PID = new PublicKey(\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\"\n);\n\nexport const SRM_MINT = new PublicKey(\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"\n);\n\nexport const USDC_MINT = new PublicKey(\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n);\n\nexport const USDT_MINT = new PublicKey(\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"\n);\n\nexport const WORM_MARKET_BASE = new PublicKey(\n  \"6a9wpsZpZGxGhFVSQBpcTNjNjytdbSA1iUw1A5KNDxPw\"\n);\n\nexport const WORM_USDC_MINT = new PublicKey(\n  \"FVsXUnbhifqJ4LiXQEbpUtXVdB8T5ADLKqSs5t1oc54F\"\n);\n\nexport const WORM_USDC_MARKET = new PublicKey(\n  \"6nGMps9VfDjkKEwYjdSNqN1ToXkLae4VsN49fzBiDFBd\"\n);\n\nexport const WORM_USDT_MINT = new PublicKey(\n  \"9w97GdWUYYaamGwdKMKZgGzPduZJkiFizq4rz5CPXRv2\"\n);\n\nexport const WORM_USDT_MARKET = new PublicKey(\n  \"4v6e6vNXAaEunrvbqkYnKwbaWfck8a2KVR4uRAVXxVwC\"\n);\n","import React, { useContext, useMemo } from \"react\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { USDC_MINT, USDT_MINT } from \"../../utils/pubkeys\";\n\ntype TokenListContext = {\n  tokenMap: Map<string, TokenInfo>;\n  wormholeMap: Map<string, TokenInfo>;\n  solletMap: Map<string, TokenInfo>;\n  swappableTokens: TokenInfo[];\n  swappableTokensSollet: TokenInfo[];\n  swappableTokensWormhole: TokenInfo[];\n};\nconst _TokenListContext = React.createContext<null | TokenListContext>(null);\n\n// Tag in the spl-token-registry for sollet wrapped tokens.\nexport const SPL_REGISTRY_SOLLET_TAG = \"wrapped-sollet\";\n\n// Tag in the spl-token-registry for wormhole wrapped tokens.\nexport const SPL_REGISTRY_WORM_TAG = \"wormhole\";\n\nexport function TokenListContextProvider(props: any) {\n  const tokenList = useMemo(\n    () => props.tokenList.filterByClusterSlug(\"mainnet-beta\").getList(),\n    [props.tokenList]\n  );\n\n  // Token map for quick lookup.\n  const tokenMap = useMemo(() => {\n    const tokenMap = new Map();\n    tokenList.forEach((t: TokenInfo) => {\n      tokenMap.set(t.address, t);\n    });\n    return tokenMap;\n  }, [tokenList]);\n\n  // Tokens with USD(x) quoted markets.\n  const swappableTokens = useMemo(() => {\n    const tokens = tokenList\n      .filter((t: TokenInfo) => {\n        const isUsdxQuoted =\n          t.extensions?.serumV3Usdt || t.extensions?.serumV3Usdc;\n        const isSol =\n          t.address === \"So11111111111111111111111111111111111111112\";\n        return isUsdxQuoted && !isSol;\n      })\n      .concat([\n        tokenMap.get(USDC_MINT.toString()),\n        tokenMap.get(USDT_MINT.toString()),\n      ]);\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return tokens;\n  }, [tokenList, tokenMap]);\n\n  // Sollet wrapped tokens.\n  const [swappableTokensSollet, solletMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_SOLLET_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  // Wormhole wrapped tokens.\n  const [swappableTokensWormhole, wormholeMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_WORM_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  return (\n    <_TokenListContext.Provider\n      value={{\n        tokenMap,\n        wormholeMap,\n        solletMap,\n        swappableTokens,\n        swappableTokensWormhole,\n        swappableTokensSollet,\n      }}\n    >\n      {props.children}\n    </_TokenListContext.Provider>\n  );\n}\n\nexport function useTokenListContext(): TokenListContext {\n  const ctx = useContext(_TokenListContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useTokenMap(): Map<string, TokenInfo> {\n  const { tokenMap } = useTokenListContext();\n  return tokenMap;\n}\n\nexport function useSwappableTokens() {\n  const { swappableTokens, swappableTokensWormhole, swappableTokensSollet } =\n    useTokenListContext();\n  return { swappableTokens, swappableTokensWormhole, swappableTokensSollet };\n}\n","import { useAsync, UseAsyncReturn } from \"react-async-hook\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\n// Token info tracked by the sollet bridge.\ntype SolletInfo = {\n  blockchain: string;\n  erc20Contract: string;\n  name: string;\n  splMint: PublicKey;\n  ticker: string;\n};\n\nexport function useSolletInfo(mint: PublicKey): UseAsyncReturn<SolletInfo> {\n  return useAsync(async () => {\n    return fetchSolletInfo(mint);\n  }, [mint]);\n}\n\n// Fetches the token info from the sollet bridge.\nexport async function fetchSolletInfo(mint: PublicKey): Promise<SolletInfo> {\n  let info = _SOLLET_INFO_CACHE.get(mint.toString());\n  if (info !== undefined) {\n    return info;\n  }\n\n  const infoRaw = await swapApiRequest(\"GET\", `coins/sol/${mint.toString()}`);\n  info = { ...infoRaw, splMint: new PublicKey(infoRaw.splMint) };\n  _SOLLET_INFO_CACHE.set(mint.toString(), info!);\n\n  return info!;\n}\n\n// Requests the creation of a sollet wormhole swap market, if it doesn't\n// already exist. Note: this triggers a creation notification. Creation\n// doesn't happen immediately, but at some unspecified point in the future\n// since market makers need to setup on the swap market and provide liquidity.\n//\n// Returns true if the market exists already. False otherwise.\nexport async function requestWormholeSwapMarketIfNeeded(\n  connection: Connection,\n  solletMint: PublicKey,\n  wormholeMint: PublicKey,\n  swapMarket: PublicKey,\n  solletInfo: SolletInfo\n): Promise<boolean> {\n  const cached = _SWAP_MARKET_EXISTS_CACHE.get(swapMarket.toString());\n  if (cached !== undefined) {\n    return cached;\n  }\n  const acc = await connection.getAccountInfo(swapMarket);\n  if (acc === null) {\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), false);\n    const resource = `wormhole/pool/${\n      solletInfo.ticker\n    }/${swapMarket.toString()}/${solletMint.toString()}/${wormholeMint.toString()}`;\n    swapApiRequest(\"POST\", resource).catch(console.error);\n    return false;\n  } else {\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), true);\n    return true;\n  }\n}\n\nexport async function swapApiRequest(\n  method: string,\n  path: string,\n  body?: Object\n) {\n  let headers: any = {};\n  let params: any = { headers, method };\n  if (method === \"GET\") {\n    params.cache = \"no-cache\";\n  } else if (body) {\n    headers[\"Content-Type\"] = \"application/json\";\n    params.body = JSON.stringify(body);\n  }\n  let resp = await fetch(`https://swap.sollet.io/api/${path}`, params);\n  return await handleSwapApiResponse(resp);\n}\n\nasync function handleSwapApiResponse(resp: Response) {\n  let json = await resp.json();\n  if (!json.success) {\n    throw new SwapApiError(json.error, resp.status);\n  }\n  return json.result;\n}\n\nexport class SwapApiError extends Error {\n  readonly name: string;\n  readonly status: number;\n  constructor(msg: string, status: number) {\n    super(msg);\n    this.name = \"SwapApiError\";\n    this.status = status;\n  }\n}\n\nconst _SOLLET_INFO_CACHE = new Map<string, SolletInfo>();\nconst _SWAP_MARKET_EXISTS_CACHE = new Map<string, boolean>();\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  Market,\n  OpenOrders,\n  Orderbook as OrderbookSide,\n} from \"@project-serum/serum\";\nimport {\n  DEX_PID,\n  USDC_MINT,\n  USDT_MINT,\n  WORM_USDC_MINT,\n  WORM_USDT_MINT,\n  WORM_USDC_MARKET,\n  WORM_USDT_MARKET,\n  WORM_MARKET_BASE,\n} from \"../../utils/pubkeys\";\nimport { useTokenMap, useTokenListContext } from \"./TokenList\";\nimport { fetchSolletInfo, requestWormholeSwapMarketIfNeeded } from \"./Sollet\";\n\ntype DexContext = {\n  // Maps market address to open orders accounts.\n  openOrders: Map<string, Array<OpenOrders>>;\n  marketCache: Map<string, Market>;\n  setMarketCache: (c: Map<string, Market>) => void;\n  orderbookCache: Map<string, Orderbook>;\n  setOrderbookCache: (c: Map<string, Orderbook>) => void;\n  swapClient: SwapClient;\n};\nconst _DexContext = React.createContext<DexContext | null>(null);\n\nexport function DexContextProvider(props: any) {\n  const [ooAccounts, setOoAccounts] = useState<Map<string, Array<OpenOrders>>>(\n    new Map()\n  );\n  const [marketCache, setMarketCache] = useState<Map<string, Market>>(\n    new Map()\n  );\n  const [orderbookCache, setOrderbookCache] = useState<Map<string, Orderbook>>(\n    new Map()\n  );\n  const swapClient = props.swapClient;\n\n  // Two operations:\n  //\n  // 1. Fetch all open orders accounts for the connected wallet.\n  // 2. Batch fetch all market accounts for those open orders.\n  //\n  useEffect(() => {\n    if (!swapClient.program.provider.wallet.publicKey) {\n      setOoAccounts(new Map());\n      return;\n    }\n    OpenOrders.findForOwner(\n      swapClient.program.provider.connection,\n      swapClient.program.provider.wallet.publicKey,\n      DEX_PID\n    ).then(async (openOrders) => {\n      const newOoAccounts = new Map();\n      let markets = new Set<string>();\n      openOrders.forEach((oo) => {\n        markets.add(oo.market.toString());\n        if (newOoAccounts.get(oo.market.toString())) {\n          newOoAccounts.get(oo.market.toString()).push(oo);\n        } else {\n          newOoAccounts.set(oo.market.toString(), [oo]);\n        }\n      });\n      if (markets.size > 100) {\n        // Punt request chunking until there's user demand.\n        throw new Error(\n          \"Too many markets. Please file an issue to update this\"\n        );\n      }\n      const marketAccounts = (\n        await anchor.utils.getMultipleAccounts(\n          swapClient.program.provider.connection,\n          // @ts-ignore\n          [...markets].map((m) => new PublicKey(m))\n        )\n      ).map((programAccount) => {\n        return {\n          publicKey: programAccount?.publicKey,\n          account: new Market(\n            Market.getLayout(DEX_PID).decode(programAccount?.account.data),\n            -1, // Not used so don't bother fetching.\n            -1, // Not used so don't bother fetching.\n            swapClient.program.provider.opts,\n            DEX_PID\n          ),\n        };\n      });\n      setMarketCache((marketCache) => {\n        const newMarketCache = new Map(marketCache);\n        marketAccounts.forEach((m) => {\n          newMarketCache.set(m.publicKey!.toString(), m.account);\n        });\n        return newMarketCache;\n      });\n      setOoAccounts(newOoAccounts);\n    });\n  }, [\n    swapClient.program.provider.connection,\n    swapClient.program.provider.wallet.publicKey,\n    swapClient.program.provider.opts,\n  ]);\n  return (\n    <_DexContext.Provider\n      value={{\n        openOrders: ooAccounts,\n        marketCache,\n        setMarketCache,\n        orderbookCache,\n        setOrderbookCache,\n        swapClient,\n      }}\n    >\n      {props.children}\n    </_DexContext.Provider>\n  );\n}\n\nexport function useDexContext(): DexContext {\n  const ctx = useContext(_DexContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useOpenOrders(): Map<string, Array<OpenOrders>> {\n  const ctx = useDexContext();\n  return ctx.openOrders;\n}\n\n// Lazy load a given market.\nexport function useMarket(market?: PublicKey): Market | undefined {\n  const ctx = useDexContext();\n\n  const asyncMarket = useAsync(async () => {\n    if (!market) {\n      return undefined;\n    }\n    if (ctx.marketCache.get(market.toString())) {\n      return ctx.marketCache.get(market.toString());\n    }\n    const marketClient = await Market.load(\n      ctx.swapClient.program.provider.connection,\n      market,\n      undefined,\n      DEX_PID\n    );\n\n    let cache = new Map(ctx.marketCache);\n    cache.set(market.toString(), marketClient);\n    ctx.setMarketCache(cache);\n\n    return marketClient;\n  }, [ctx.swapClient.program.provider.connection, market]);\n\n  if (asyncMarket.result) {\n    return asyncMarket.result;\n  }\n\n  return undefined;\n}\n\n// Lazy load the orderbook for a given market.\nexport function useOrderbook(market?: PublicKey): Orderbook | undefined {\n  const { swapClient, orderbookCache, setOrderbookCache } = useDexContext();\n  const marketClient = useMarket(market);\n\n  const asyncOrderbook = useAsync(async () => {\n    if (!market || !marketClient) {\n      return undefined;\n    }\n    if (orderbookCache.get(market.toString())) {\n      return orderbookCache.get(market.toString());\n    }\n\n    const [bids, asks] = await Promise.all([\n      marketClient.loadBids(swapClient.program.provider.connection),\n      marketClient.loadAsks(swapClient.program.provider.connection),\n    ]);\n\n    const orderbook = {\n      bids,\n      asks,\n    };\n\n    const cache = new Map(orderbookCache);\n    cache.set(market.toString(), orderbook);\n    setOrderbookCache(cache);\n\n    return orderbook;\n  }, [swapClient.program.provider.connection, market, marketClient]);\n\n  if (asyncOrderbook.result) {\n    return asyncOrderbook.result;\n  }\n\n  return undefined;\n}\n\nexport function useMarketName(market: PublicKey): string | null {\n  const tokenMap = useTokenMap();\n  const marketClient = useMarket(market);\n  if (!marketClient) {\n    return null;\n  }\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const name = `${baseTicker} / ${quoteTicker}`;\n  return name;\n}\n\n// Fair price for a given market, as defined by the mid.\nexport function useFair(market?: PublicKey): number | undefined {\n  const orderbook = useOrderbook(market);\n  if (orderbook === undefined) {\n    return undefined;\n  }\n  const bestBid = orderbook.bids.items(true).next().value;\n  const bestOffer = orderbook.asks.items(false).next().value;\n  if (!bestBid) {\n    return bestOffer.price;\n  }\n  if (!bestOffer) {\n    return bestBid.price;\n  }\n  const mid = (bestBid.price + bestOffer.price) / 2.0;\n  return mid;\n}\n\n// Fair price for a theoretical toMint/fromMint market. I.e., the number\n// of `fromMint` tokens to purchase a single `toMint` token. Aggregates\n// across a trade route, if needed.\nexport function useFairRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): number | undefined {\n  const route = useRoute(fromMint, toMint);\n  const fromFair = useFair(route ? route[0] : undefined);\n  const fromMarket = useMarket(route ? route[0] : undefined);\n  const toFair = useFair(route ? route[1] : undefined);\n\n  if (route === null) {\n    return undefined;\n  }\n\n  if (route.length === 1 && fromFair !== undefined) {\n    if (fromMarket === undefined) {\n      return undefined;\n    }\n    if (fromMarket?.baseMintAddress.equals(fromMint)) {\n      return 1.0 / fromFair;\n    } else {\n      return fromFair;\n    }\n  }\n  if (fromFair === undefined || toFair === undefined) {\n    return undefined;\n  }\n  return toFair / fromFair;\n}\n\nexport function useRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): Array<PublicKey> | null {\n  const route = useRouteVerbose(fromMint, toMint);\n  if (route === null) {\n    return null;\n  }\n  return route.markets;\n}\n\n// Types of routes.\n//\n// 1. Direct trades on USDC quoted markets.\n// 2. Transitive trades across two USDC qutoed markets.\n// 3. Wormhole <-> Sollet one-to-one swap markets.\n// 4. Wormhole <-> Native one-to-one swap markets.\n//\nexport function useRouteVerbose(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): { markets: Array<PublicKey>; kind: RouteKind } | null {\n  const { swapClient } = useDexContext();\n  const { wormholeMap, solletMap } = useTokenListContext();\n  const asyncRoute = useAsync(async () => {\n    const swapMarket = await wormholeSwapMarket(\n      swapClient.program.provider.connection,\n      fromMint,\n      toMint,\n      wormholeMap,\n      solletMap\n    );\n    if (swapMarket !== null) {\n      const [wormholeMarket, kind] = swapMarket;\n      return { markets: [wormholeMarket], kind };\n    }\n    const markets = swapClient.route(fromMint, toMint);\n    if (markets === null) {\n      return null;\n    }\n    const kind: RouteKind = \"usdx\";\n    return { markets, kind };\n  }, [fromMint, toMint, swapClient]);\n\n  if (asyncRoute.result) {\n    return asyncRoute.result;\n  }\n  return null;\n}\n\ntype Orderbook = {\n  bids: OrderbookSide;\n  asks: OrderbookSide;\n};\n\n// Wormhole utils.\n\ntype RouteKind = \"wormhole-native\" | \"wormhole-sollet\" | \"usdx\";\n\n// Maps fromMint || toMint (in sort order) to swap market public key.\n// All markets for wormhole<->native tokens should be here, e.g.\n// USDC <-> wUSDC.\nconst WORMHOLE_NATIVE_MAP = new Map<string, PublicKey>([\n  [wormKey(WORM_USDC_MINT, USDC_MINT), WORM_USDC_MARKET],\n  [wormKey(WORM_USDT_MINT, USDT_MINT), WORM_USDT_MARKET],\n]);\n\nfunction wormKey(fromMint: PublicKey, toMint: PublicKey): string {\n  const [first, second] =\n    fromMint < toMint ? [fromMint, toMint] : [toMint, fromMint];\n  return first.toString() + second.toString();\n}\n\nasync function wormholeSwapMarket(\n  conn: Connection,\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  wormholeMap: Map<string, TokenInfo>,\n  solletMap: Map<string, TokenInfo>\n): Promise<[PublicKey, RouteKind] | null> {\n  let market = wormholeNativeMarket(fromMint, toMint);\n  if (market !== null) {\n    return [market, \"wormhole-native\"];\n  }\n  market = await wormholeSolletMarket(\n    conn,\n    fromMint,\n    toMint,\n    wormholeMap,\n    solletMap\n  );\n  if (market === null) {\n    return null;\n  }\n  return [market, \"wormhole-sollet\"];\n}\n\nfunction wormholeNativeMarket(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): PublicKey | null {\n  return WORMHOLE_NATIVE_MAP.get(wormKey(fromMint, toMint)) ?? null;\n}\n\n// Returns the market address of the 1-1 sollet<->wormhole swap market if it\n// exists. Otherwise, returns null.\n//\n// TODO: swap transactions dont work for wormhole yet, since the client\n//       doesnt do  any wormhole checks.\nasync function wormholeSolletMarket(\n  conn: Connection,\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  wormholeMap: Map<string, TokenInfo>,\n  solletMap: Map<string, TokenInfo>\n): Promise<PublicKey | null> {\n  const fromWormhole = wormholeMap.get(fromMint.toString());\n  const isFromWormhole = fromWormhole !== undefined;\n\n  const toWormhole = wormholeMap.get(toMint.toString());\n  const isToWormhole = toWormhole !== undefined;\n\n  const fromSollet = solletMap.get(fromMint.toString());\n  const isFromSollet = fromSollet !== undefined;\n\n  const toSollet = solletMap.get(toMint.toString());\n  const isToSollet = toSollet !== undefined;\n\n  if ((isFromWormhole || isToWormhole) && isFromWormhole !== isToWormhole) {\n    if ((isFromSollet || isToSollet) && isFromSollet !== isToSollet) {\n      const base = isFromSollet ? fromMint : toMint;\n      const [quote, wormholeInfo] = isFromWormhole\n        ? [fromMint, fromWormhole]\n        : [toMint, toWormhole];\n\n      const solletInfo = await fetchSolletInfo(base);\n\n      if (solletInfo.erc20Contract !== wormholeInfo!.extensions?.address) {\n        return null;\n      }\n\n      const market = await deriveWormholeMarket(base, quote);\n      if (market === null) {\n        return null;\n      }\n\n      const marketExists = await requestWormholeSwapMarketIfNeeded(\n        conn,\n        base,\n        quote,\n        market,\n        solletInfo\n      );\n      if (!marketExists) {\n        return null;\n      }\n\n      return market;\n    }\n  }\n  return null;\n}\n\n// Calculates the deterministic address for the sollet<->wormhole 1-1 swap\n// market.\nasync function deriveWormholeMarket(\n  baseMint: PublicKey,\n  quoteMint: PublicKey,\n  version = 0\n): Promise<PublicKey | null> {\n  if (version > 99) {\n    console.log(\"Swap market version cannot be greater than 99\");\n    return null;\n  }\n  if (version < 0) {\n    console.log(\"Version cannot be less than zero\");\n    return null;\n  }\n\n  const padToTwo = (n: number) => (n <= 99 ? `0${n}`.slice(-2) : n);\n  const seed =\n    baseMint.toString().slice(0, 15) +\n    quoteMint.toString().slice(0, 15) +\n    padToTwo(version);\n  return await PublicKey.createWithSeed(WORM_MARKET_BASE, seed, DEX_PID);\n}\n","import React, { useContext, useState } from \"react\";\nimport * as assert from \"assert\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { SRM_MINT, USDC_MINT } from \"../../utils/pubkeys\";\nimport { useFairRoute } from \"./Dex\";\n\nconst DEFAULT_SLIPPAGE_PERCENT = 0.5;\n\nexport type SwapContext = {\n  // Mint being traded from. The user must own these tokens.\n  fromMint: PublicKey;\n  setFromMint: (m: PublicKey) => void;\n\n  // Mint being traded to. The user will receive these tokens after the swap.\n  toMint: PublicKey;\n  setToMint: (m: PublicKey) => void;\n\n  // Amount used for the swap.\n  fromAmount: number;\n  setFromAmount: (a: number) => void;\n\n  // *Expected* amount received from the swap.\n  toAmount: number;\n  setToAmount: (a: number) => void;\n\n  // Function to flip what we consider to be the \"to\" and \"from\" mints.\n  swapToFromMints: () => void;\n\n  // The amount (in units of percent) a swap can be off from the estimate\n  // shown to the user.\n  slippage: number;\n  setSlippage: (n: number) => void;\n\n  // Null if the user is using fairs directly from DEX prices.\n  // Otherwise, a user specified override for the price to use when calculating\n  // swap amounts.\n  fairOverride: number | null;\n  setFairOverride: (n: number | null) => void;\n\n  // True if all newly created market accounts should be closed in the\n  // same user flow (ideally in the same transaction).\n  isClosingNewAccounts: boolean;\n  setIsClosingNewAccounts: (b: boolean) => void;\n};\nconst _SwapContext = React.createContext<null | SwapContext>(null);\n\nexport function SwapContextProvider(props: any) {\n  const [fromMint, setFromMint] = useState(props.fromMint ?? SRM_MINT);\n  const [toMint, setToMint] = useState(props.toMint ?? USDC_MINT);\n  const [fromAmount, _setFromAmount] = useState(props.fromAmount ?? 0);\n  const [toAmount, _setToAmount] = useState(props.toAmount ?? 0);\n  const [isClosingNewAccounts, setIsClosingNewAccounts] = useState(false);\n  // Percent units.\n  const [slippage, setSlippage] = useState(DEFAULT_SLIPPAGE_PERCENT);\n  const [fairOverride, setFairOverride] = useState<number | null>(null);\n  const fair = _useSwapFair(fromMint, toMint, fairOverride);\n\n  assert.ok(slippage >= 0);\n\n  const swapToFromMints = () => {\n    const oldFrom = fromMint;\n    const oldFromAmount = fromAmount;\n    const oldTo = toMint;\n    const oldToAmount = toAmount;\n    setFromMint(oldTo);\n    setToMint(oldFrom);\n    _setFromAmount(oldToAmount);\n    _setToAmount(oldFromAmount);\n  };\n\n  const setFromAmount = (amount: number) => {\n    if (fair === undefined) {\n      throw new Error(\"Fair price not found\");\n    }\n    _setFromAmount(amount);\n    _setToAmount(amount / fair);\n  };\n\n  const setToAmount = (amount: number) => {\n    if (fair === undefined) {\n      throw new Error(\"Fair price not found\");\n    }\n    _setToAmount(amount);\n    _setFromAmount(amount * fair);\n  };\n\n  return (\n    <_SwapContext.Provider\n      value={{\n        fromMint,\n        setFromMint,\n        toMint,\n        setToMint,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        swapToFromMints,\n        slippage,\n        setSlippage,\n        fairOverride,\n        setFairOverride,\n        isClosingNewAccounts,\n        setIsClosingNewAccounts,\n      }}\n    >\n      {props.children}\n    </_SwapContext.Provider>\n  );\n}\n\nexport function useSwapContext(): SwapContext {\n  const ctx = useContext(_SwapContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useSwapFair(): number | undefined {\n  const { fairOverride, fromMint, toMint } = useSwapContext();\n  return _useSwapFair(fromMint, toMint, fairOverride);\n}\n\nfunction _useSwapFair(\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  fairOverride: number | null\n): number | undefined {\n  const fairRoute = useFairRoute(fromMint, toMint);\n  const fair = fairOverride === null ? fairRoute : fairOverride;\n  return fair;\n}\n","import React, { useContext, useState } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { PublicKey, Account } from \"@solana/web3.js\";\nimport { MintInfo, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nconst _MintContext = React.createContext<null | MintContext>(null);\ntype MintContext = {\n  mintCache: Map<string, MintInfo>;\n  setMintCache: (m: Map<string, MintInfo>) => void;\n  provider: Provider;\n};\n\nexport function MintContextProvider(props: any) {\n  const provider = props.provider;\n  const [mintCache, setMintCache] = useState(new Map<string, MintInfo>());\n\n  return (\n    <_MintContext.Provider\n      value={{\n        mintCache,\n        setMintCache,\n        provider,\n      }}\n    >\n      {props.children}\n    </_MintContext.Provider>\n  );\n}\n\nexport function useMint(mint?: PublicKey): MintInfo | undefined | null {\n  const ctx = useContext(_MintContext);\n  if (ctx === null) {\n    throw new Error(\"Mint context not found\");\n  }\n\n  // Lazy load the mint account if needeed.\n  const asyncMintInfo = useAsync(async () => {\n    if (!mint) {\n      return undefined;\n    }\n    if (ctx.mintCache.get(mint.toString())) {\n      return ctx.mintCache.get(mint.toString());\n    }\n    const mintClient = new Token(\n      ctx.provider.connection,\n      mint,\n      TOKEN_PROGRAM_ID,\n      new Account()\n    );\n    const mintInfo = await mintClient.getMintInfo();\n\n    let cache = new Map(ctx.mintCache);\n    cache.set(mint.toString(), mintInfo);\n    ctx.setMintCache(cache);\n\n    return mintInfo;\n  }, [ctx.provider.connection, mint]);\n\n  if (asyncMintInfo.result) {\n    return asyncMintInfo.result;\n  }\n  return undefined;\n}\n","// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet.\n\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as bs58 from \"bs58\";\n\nexport async function getOwnedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey\n) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection._rpcRequest(\"getProgramAccounts\", [\n    TOKEN_PROGRAM_ID.toBase58(),\n    {\n      commitment: connection.commitment,\n      filters,\n    },\n  ]);\n  if (resp.error) {\n    throw new Error(\n      \"failed to get token accounts owned by \" +\n        publicKey.toBase58() +\n        \": \" +\n        resp.error.message\n    );\n  }\n  return resp.result\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data: bs58.decode(data),\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .filter(({ accountInfo }: any) => {\n      // TODO: remove this check once mainnet is updated\n      return filters.every((filter) => {\n        if (filter.dataSize) {\n          return accountInfo.data.length === filter.dataSize;\n        } else if (filter.memcmp) {\n          let filterBytes = bs58.decode(filter.memcmp.bytes);\n          return accountInfo.data\n            .slice(\n              filter.memcmp.offset,\n              filter.memcmp.offset + filterBytes.length\n            )\n            .equals(filterBytes);\n        }\n        return false;\n      });\n    })\n    .map(({ publicKey, accountInfo }: any) => {\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\n    });\n}\n\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, \"mint\"),\n  BufferLayout.blob(32, \"owner\"),\n  BufferLayout.nu64(\"amount\"),\n  BufferLayout.blob(93),\n]);\n\nexport const MINT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(44),\n  BufferLayout.u8(\"decimals\"),\n  BufferLayout.blob(37),\n]);\n\nexport function parseTokenAccountData(data: Buffer) {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount),\n  };\n}\n\nexport function parseMintData(data: Buffer) {\n  // @ts-ignore\n  let { decimals } = MINT_LAYOUT.decode(data);\n  return { decimals };\n}\n\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { AccountInfo as TokenAccount } from \"@solana/spl-token\";\nimport { getOwnedTokenAccounts } from \"../../utils/tokens\";\n\nconst _TokenContext = React.createContext<TokenContext | null>(null);\n\nexport function TokenContextProvider(props: any) {\n  const provider = props.provider;\n  const [ownedTokenAccounts, setOwnedTokenAccounts] = useState(undefined);\n\n  // Fetch all the owned token accounts for the wallet.\n  useEffect(() => {\n    if (!provider.wallet.publicKey) {\n      setOwnedTokenAccounts(undefined);\n      return;\n    }\n    getOwnedTokenAccounts(provider.connection, provider.wallet.publicKey).then(\n      setOwnedTokenAccounts\n    );\n  }, [provider.wallet.publicKey, provider.connection]);\n\n  return (\n    <_TokenContext.Provider\n      value={{\n        ownedTokenAccounts,\n      }}\n    >\n      {props.children}\n    </_TokenContext.Provider>\n  );\n}\n\nexport type TokenContext = {\n  ownedTokenAccounts:\n    | { publicKey: PublicKey; account: TokenAccount }[]\n    | undefined;\n};\n\n// Null => none exists.\n// Undefined => loading.\nexport function useOwnedTokenAccount(\n  mint?: PublicKey\n): { publicKey: PublicKey; account: TokenAccount } | null | undefined {\n  const ctx = useContext(_TokenContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  if (mint === undefined) {\n    return mint;\n  }\n  if (ctx.ownedTokenAccounts === undefined) {\n    return undefined;\n  }\n  const tokenAccounts = ctx.ownedTokenAccounts.filter((account) =>\n    account.account.mint.equals(mint)\n  );\n\n  if (tokenAccounts.length === 0) {\n    return null;\n  }\n\n  // Take the account with the most tokens in it.\n  tokenAccounts.sort((a, b) =>\n    a.account.amount < b.account.amount\n      ? -1\n      : a.account.amount > b.account.amount\n      ? 1\n      : 0\n  );\n  return tokenAccounts[0];\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  List,\n  ListItem,\n  Typography,\n  Tabs,\n  Tab,\n} from \"@material-ui/core\";\nimport { TokenIcon } from \"./Swap\";\nimport { useSwappableTokens } from \"./context/TokenList\";\n\nconst useStyles = makeStyles(() => ({\n  dialogContent: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  textField: {\n    width: \"100%\",\n    border: \"solid 1pt #ccc\",\n    borderRadius: \"10px\",\n    marginBottom: \"8px\",\n  },\n  tab: {\n    minWidth: \"134px\",\n  },\n}));\n\nexport default function TokenDialog({\n  open,\n  onClose,\n  setMint,\n}: {\n  open: boolean;\n  onClose: () => void;\n  setMint: (mint: PublicKey) => void;\n}) {\n  const [tabSelection, setTabSelection] = useState(0);\n  const [tokenFilter, setTokenFilter] = useState(\"\");\n  const filter = tokenFilter.toLowerCase();\n  const styles = useStyles();\n  const { swappableTokens, swappableTokensSollet, swappableTokensWormhole } =\n    useSwappableTokens();\n  const selectedTokens =\n    tabSelection === 0\n      ? swappableTokens\n      : tabSelection === 1\n      ? swappableTokensWormhole\n      : swappableTokensSollet;\n  let tokens =\n    tokenFilter === \"\"\n      ? selectedTokens\n      : selectedTokens.filter(\n          (t) =>\n            t.symbol.toLowerCase().startsWith(filter) ||\n            t.name.toLowerCase().startsWith(filter) ||\n            t.address.toLowerCase().startsWith(filter)\n        );\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      scroll={\"paper\"}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n          width: \"420px\",\n        },\n      }}\n    >\n      <DialogTitle style={{ fontWeight: \"bold\" }}>\n        <Typography variant=\"h6\" style={{ paddingBottom: \"16px\" }}>\n          Select a token\n        </Typography>\n        <TextField\n          className={styles.textField}\n          placeholder={\"Search name\"}\n          value={tokenFilter}\n          onChange={(e) => setTokenFilter(e.target.value)}\n          InputProps={{\n            disableUnderline: true,\n            style: { padding: \"10px\" },\n          }}\n        />\n      </DialogTitle>\n      <DialogContent className={styles.dialogContent} dividers={true}>\n        <List disablePadding>\n          {tokens.map((tokenInfo: TokenInfo) => (\n            <TokenListItem\n              key={tokenInfo.address}\n              tokenInfo={tokenInfo}\n              onClick={(mint) => {\n                setMint(mint);\n                onClose();\n              }}\n            />\n          ))}\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Tabs value={tabSelection} onChange={(e, v) => setTabSelection(v)}>\n          <Tab value={0} className={styles.tab} label=\"Main\" />\n          <Tab value={1} className={styles.tab} label=\"Wormhole\" />\n          <Tab value={2} className={styles.tab} label=\"Sollet\" />\n        </Tabs>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction TokenListItem({\n  tokenInfo,\n  onClick,\n}: {\n  tokenInfo: TokenInfo;\n  onClick: (mint: PublicKey) => void;\n}) {\n  const mint = new PublicKey(tokenInfo.address);\n  return (\n    <ListItem button onClick={() => onClick(mint)}>\n      <TokenIcon mint={mint} style={{ width: \"30px\", borderRadius: \"15px\" }} />\n      <TokenName tokenInfo={tokenInfo} />\n    </ListItem>\n  );\n}\n\nfunction TokenName({ tokenInfo }: { tokenInfo: TokenInfo }) {\n  return (\n    <div style={{ marginLeft: \"16px\" }}>\n      <Typography style={{ fontWeight: \"bold\" }}>\n        {tokenInfo?.symbol}\n      </Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n        {tokenInfo?.name}\n      </Typography>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { MintInfo } from \"@solana/spl-token\";\nimport { BN } from \"@project-serum/anchor\";\nimport { OpenOrders } from \"@project-serum/serum\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogContent,\n  Paper,\n  Table,\n  TableRow,\n  TableHead,\n  TableCell,\n  TableBody,\n  TableContainer,\n  Popover,\n  IconButton,\n  Typography,\n  Button,\n  Select,\n  MenuItem,\n  TextField,\n  InputAdornment,\n  Link,\n  Switch,\n  FormControlLabel,\n  FormGroup,\n} from \"@material-ui/core\";\nimport { ToggleButton } from \"@material-ui/lab\";\nimport { SettingsOutlined as Settings, Close } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { useSwapContext, useSwapFair } from \"./context/Swap\";\nimport { useMarket, useOpenOrders, useDexContext } from \"./context/Dex\";\nimport { useTokenMap } from \"./context/TokenList\";\nimport { useMint } from \"./context/Mint\";\nimport { useOwnedTokenAccount } from \"./context/Token\";\n\nconst useStyles = makeStyles((theme) => ({\n  tab: {\n    width: \"50%\",\n  },\n  table: {},\n  settingsButton: {\n    padding: 0,\n  },\n  closeAccountSwitchLabel: {\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport function SettingsButton() {\n  const styles = useStyles();\n\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.settingsButton}\n            >\n              <Settings />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{ style: { borderRadius: \"10px\" } }}\n            >\n              <SettingsDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction SettingsDetails() {\n  const { slippage, setSlippage, fairOverride, setFairOverride } =\n    useSwapContext();\n  const [showSettingsDialog, setShowSettingsDialog] = useState(false);\n  const fair = useSwapFair();\n  const { swapClient } = useDexContext();\n  return (\n    <div style={{ padding: \"15px\", width: \"305px\" }}>\n      <Typography color=\"textSecondary\" style={{ fontWeight: \"bold\" }}>\n        Settings\n      </Typography>\n      <div style={{ marginTop: \"10px\" }}>\n        <div>\n          <Typography color=\"textSecondary\">Slippage tolerance</Typography>\n          <TextField\n            type=\"number\"\n            placeholder=\"Error tolerance percentage\"\n            value={slippage}\n            onChange={(e) => setSlippage(parseFloat(e.target.value))}\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n          />\n        </div>\n        <div style={{ marginTop: \"5px\" }}>\n          <Typography color=\"textSecondary\">Fair price</Typography>\n          <div style={{ display: \"flex\" }}>\n            <TextField\n              type=\"number\"\n              placeholder=\"Fair price override\"\n              value={fair}\n              onChange={(e) => setFairOverride(parseFloat(e.target.value))}\n              style={{\n                marginRight: \"10px\",\n                flex: 1,\n                display: \"flex\",\n                justifyContent: \"center\",\n                flexDirection: \"column\",\n              }}\n              disabled={fairOverride === null}\n            />\n            <ToggleButton\n              value=\"bold\"\n              selected={fairOverride === null}\n              onClick={() => {\n                if (fair === undefined) {\n                  console.error(\"Fair is undefined\");\n                  return;\n                }\n                if (fairOverride === null) {\n                  setFairOverride(fair);\n                } else {\n                  setFairOverride(null);\n                }\n              }}\n              style={{\n                paddingTop: \"3px\",\n                paddingBottom: \"3px\",\n                paddingLeft: \"5px\",\n                paddingRight: \"5px\",\n                borderRadius: \"20px\",\n              }}\n            >\n              Auto\n            </ToggleButton>\n          </div>\n        </div>\n        <div style={{ marginTop: \"5px\" }}>\n          <CloseNewAccountsSwitch />\n        </div>\n        <Button\n          style={{\n            width: \"100%\",\n            marginTop: \"10px\",\n            background: \"#e0e0e0\",\n          }}\n          disabled={swapClient.program.provider.wallet.publicKey === null}\n          onClick={() => setShowSettingsDialog(true)}\n        >\n          Manage Dex Accounts\n        </Button>\n      </div>\n      <SettingsDialog\n        open={showSettingsDialog}\n        onClose={() => setShowSettingsDialog(false)}\n      />\n    </div>\n  );\n}\n\nfunction CloseNewAccountsSwitch() {\n  const styles = useStyles();\n  const { isClosingNewAccounts, setIsClosingNewAccounts } = useSwapContext();\n\n  return (\n    <FormGroup row>\n      <FormControlLabel\n        classes={{ label: styles.closeAccountSwitchLabel }}\n        labelPlacement=\"start\"\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          marginLeft: 0,\n          width: \"100%\",\n        }}\n        control={\n          <Switch\n            checked={isClosingNewAccounts}\n            onChange={() => setIsClosingNewAccounts(!isClosingNewAccounts)}\n            color=\"primary\"\n          />\n        }\n        label=\"Close new accounts\"\n      />\n    </FormGroup>\n  );\n}\n\nexport function SettingsDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog\n      maxWidth=\"lg\"\n      open={open}\n      onClose={onClose}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n        },\n      }}\n    >\n      <div>\n        <div\n          style={{\n            height: \"24px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <IconButton\n            onClick={onClose}\n            style={{\n              padding: 0,\n              position: \"absolute\",\n              right: \"8px\",\n              top: \"8px\",\n            }}\n          >\n            <Close />\n          </IconButton>\n        </div>\n        <DialogContent style={{ paddingTop: 0 }}>\n          <OpenOrdersAccounts />\n        </DialogContent>\n      </div>\n    </Dialog>\n  );\n}\n\nfunction OpenOrdersAccounts() {\n  const styles = useStyles();\n  const openOrders = useOpenOrders();\n  return (\n    <TableContainer component={Paper} elevation={0}>\n      <Table className={styles.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Market</TableCell>\n            <TableCell align=\"center\">Open Orders Account</TableCell>\n            <TableCell align=\"center\">Base Used</TableCell>\n            <TableCell align=\"center\">Base Free</TableCell>\n            <TableCell align=\"center\">Quote Used</TableCell>\n            <TableCell align=\"center\">Quote Free</TableCell>\n            <TableCell align=\"center\">Settle</TableCell>\n            <TableCell align=\"center\">Close</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {Array.from(openOrders.entries()).map(([market, oos]) => {\n            return (\n              <OpenOrdersRow\n                key={market}\n                market={new PublicKey(market)}\n                openOrders={oos}\n              />\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction OpenOrdersRow({\n  market,\n  openOrders,\n}: {\n  market: PublicKey;\n  openOrders: Array<OpenOrders>;\n}) {\n  const [ooAccount, setOoAccount] = useState(openOrders[0]);\n  const { swapClient } = useDexContext();\n  const marketClient = useMarket(market);\n  const tokenMap = useTokenMap();\n  const base = useMint(marketClient?.baseMintAddress);\n  const quote = useMint(marketClient?.quoteMintAddress);\n  const baseWallet = useOwnedTokenAccount(marketClient?.baseMintAddress);\n  const quoteWallet = useOwnedTokenAccount(marketClient?.quoteMintAddress);\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const marketName =\n    baseTicker && quoteTicker\n      ? `${baseTicker} / ${quoteTicker}`\n      : market.toString();\n  const settleDisabled =\n    ooAccount.baseTokenFree.toNumber() + ooAccount.quoteTokenFree.toNumber() ===\n    0;\n  const closeDisabled =\n    ooAccount.baseTokenTotal.toNumber() +\n      ooAccount.quoteTokenTotal.toNumber() !==\n    0;\n\n  const settleFunds = async () => {\n    if (!marketClient) {\n      throw new Error(\"Market client not found\");\n    }\n    if (!baseWallet || !quoteWallet) {\n      throw new Error(\"Base or quote wallet not found\");\n    }\n    const referrerWallet = undefined;\n    const { transaction, signers } =\n      await marketClient.makeSettleFundsTransaction(\n        swapClient.program.provider.connection,\n        ooAccount,\n        baseWallet.publicKey,\n        quoteWallet.publicKey,\n        referrerWallet\n      );\n    await swapClient.program.provider.send(transaction, signers);\n  };\n\n  const closeOpenOrders = async () => {\n    // TODO.\n    //\n    // Blocked by https://github.com/project-serum/serum-dex/pull/112.\n  };\n\n  return (\n    <TableRow key={market.toString()}>\n      <TableCell component=\"th\" scope=\"row\">\n        <Typography>\n          <Link\n            href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            {marketName}\n          </Link>\n        </Typography>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Select\n          value={ooAccount.address.toString()}\n          onChange={(e) =>\n            setOoAccount(\n              openOrders.filter(\n                (oo) => oo.address.toString() === e.target.value\n              )[0]\n            )\n          }\n        >\n          {openOrders.map((oo) => {\n            return (\n              <MenuItem\n                key={oo.address.toString()}\n                value={oo.address.toString()}\n              >\n                {oo.address.toString()}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenTotal.sub(ooAccount.baseTokenFree))}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(\n          quote,\n          ooAccount.quoteTokenTotal.sub(ooAccount.quoteTokenFree)\n        )}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(quote, ooAccount.quoteTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button color=\"primary\" disabled={settleDisabled} onClick={settleFunds}>\n          Settle\n        </Button>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button\n          color=\"secondary\"\n          disabled={closeDisabled}\n          onClick={closeOpenOrders}\n        >\n          Close\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n}\n\nfunction toDisplay(mintInfo: MintInfo | undefined | null, value: BN): string {\n  if (!mintInfo) {\n    return value.toNumber().toString();\n  }\n  return (value.toNumber() / 10 ** mintInfo.decimals).toFixed(\n    mintInfo.decimals\n  );\n}\n","import {\n  makeStyles,\n  Typography,\n  Link,\n  Popover,\n  IconButton,\n} from \"@material-ui/core\";\nimport { Info } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useTokenMap } from \"./context/TokenList\";\nimport { useSwapContext, useSwapFair } from \"./context/Swap\";\nimport { useMint } from \"./context/Mint\";\nimport { useRoute, useMarketName, useFair } from \"./context/Dex\";\n\nconst useStyles = makeStyles((theme) => ({\n  infoLabel: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n  },\n  fairPriceLabel: {\n    marginRight: \"10px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    color: theme.palette.text.secondary,\n  },\n  infoButton: {\n    padding: 0,\n  },\n}));\n\nexport function InfoLabel() {\n  const styles = useStyles();\n\n  const { fromMint, toMint } = useSwapContext();\n  const fromMintInfo = useMint(fromMint);\n  const fair = useSwapFair();\n\n  const tokenMap = useTokenMap();\n  let fromTokenInfo = tokenMap.get(fromMint.toString());\n  let toTokenInfo = tokenMap.get(toMint.toString());\n\n  return (\n    <div className={styles.infoLabel}>\n      <Typography color=\"textSecondary\"></Typography>\n      <div style={{ display: \"flex\" }}>\n        <div className={styles.fairPriceLabel}>\n          {fair !== undefined && toTokenInfo && fromTokenInfo\n            ? `1 ${toTokenInfo.symbol} = ${fair.toFixed(\n                fromMintInfo?.decimals\n              )} ${fromTokenInfo.symbol}`\n            : `-`}\n        </div>\n        <InfoButton />\n      </div>\n    </div>\n  );\n}\n\nfunction InfoButton() {\n  const styles = useStyles();\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div style={{ display: \"flex\" }}>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.infoButton}\n            >\n              <Info />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{ style: { borderRadius: \"10px\" } }}\n              disableRestoreFocus\n            >\n              <InfoDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction InfoDetails() {\n  const { fromMint, toMint } = useSwapContext();\n  const route = useRoute(fromMint, toMint);\n  const tokenMap = useTokenMap();\n  const fromMintTicker = tokenMap.get(fromMint.toString())?.symbol;\n  const toMintTicker = tokenMap.get(toMint.toString())?.symbol;\n  const addresses = [\n    { ticker: fromMintTicker, mint: fromMint },\n    { ticker: toMintTicker, mint: toMint },\n  ];\n\n  return (\n    <div style={{ padding: \"15px\", width: \"250px\" }}>\n      <div>\n        <Typography\n          color=\"textSecondary\"\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\n        >\n          Trade Route\n        </Typography>\n        {route ? (\n          route.map((market: PublicKey) => {\n            return <MarketRoute key={market.toString()} market={market} />;\n          })\n        ) : (\n          <Typography color=\"textSecondary\">Route not found</Typography>\n        )}\n      </div>\n      <div style={{ marginTop: \"15px\" }}>\n        <Typography\n          color=\"textSecondary\"\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\n        >\n          Tokens\n        </Typography>\n        {addresses.map((address) => {\n          return (\n            <div\n              key={address.mint.toString()}\n              style={{\n                marginTop: \"5px\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Link\n                href={`https://explorer.solana.com/address/${address.mint.toString()}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                {address.ticker}\n              </Link>\n              <code style={{ width: \"128px\", overflow: \"hidden\" }}>\n                {address.mint.toString()}\n              </code>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction MarketRoute({ market }: { market: PublicKey }) {\n  const marketName = useMarketName(market);\n  const fair = useFair(market);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginTop: \"5px\",\n      }}\n    >\n      <Link\n        href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        {marketName}\n      </Link>\n      <code style={{ marginLeft: \"10px\" }}>{fair ? fair.toFixed(6) : \"-\"}</code>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenListContainer } from \"@solana/spl-token-registry\";\nimport { BN, Provider } from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  makeStyles,\n  Card,\n  Button,\n  Paper,\n  Typography,\n  TextField,\n} from \"@material-ui/core\";\nimport { ExpandMore } from \"@material-ui/icons\";\nimport { SwapContextProvider, useSwapContext } from \"./context/Swap\";\nimport {\n  DexContextProvider,\n  useDexContext,\n  useOpenOrders,\n  useRouteVerbose,\n  useMarket,\n} from \"./context/Dex\";\nimport { MintContextProvider, useMint } from \"./context/Mint\";\nimport {\n  TokenListContextProvider,\n  useTokenMap,\n  useTokenListContext,\n  SPL_REGISTRY_SOLLET_TAG,\n  SPL_REGISTRY_WORM_TAG,\n} from \"./context/TokenList\";\nimport { TokenContextProvider, useOwnedTokenAccount } from \"./context/Token\";\nimport TokenDialog from \"./TokenDialog\";\nimport { SettingsButton } from \"./Settings\";\nimport { InfoLabel } from \"./Info\";\n\nconst useStyles = makeStyles(() => ({\n  card: {\n    width: \"450px\",\n    borderRadius: \"10px\",\n    border: \"solid 1pt #e0e0e0\",\n  },\n  cardContent: {\n    marginLeft: \"6px\",\n    marginRight: \"6px\",\n    marginBottom: \"6px\",\n  },\n  tab: {\n    width: \"50%\",\n  },\n  settingsButton: {\n    padding: 0,\n  },\n  swapButton: {\n    width: \"100%\",\n    borderRadius: \"15px\",\n  },\n  swapToFromButton: {\n    display: \"block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n}));\n\nexport default function Swap({\n  style,\n  provider,\n  tokenList,\n  fromMint,\n  toMint,\n  fromAmount,\n  toAmount,\n}: {\n  provider: Provider;\n  tokenList: TokenListContainer;\n  fromMint?: PublicKey;\n  toMint?: PublicKey;\n  fromAmount?: number;\n  toAmount?: number;\n  style?: any;\n}) {\n  const swapClient = new SwapClient(provider, tokenList);\n  return (\n    <TokenListContextProvider tokenList={tokenList}>\n      <MintContextProvider provider={provider}>\n        <TokenContextProvider provider={provider}>\n          <DexContextProvider swapClient={swapClient}>\n            <SwapContextProvider\n              fromMint={fromMint}\n              toMint={toMint}\n              fromAmount={fromAmount}\n              toAmount={toAmount}\n            >\n              <SwapCard style={style} />\n            </SwapContextProvider>\n          </DexContextProvider>\n        </TokenContextProvider>\n      </MintContextProvider>\n    </TokenListContextProvider>\n  );\n}\n\nfunction SwapCard({ style }: { style?: any }) {\n  const styles = useStyles();\n  return (\n    <div style={style}>\n      <Card className={styles.card}>\n        <SwapHeader />\n        <div className={styles.cardContent}>\n          <SwapFromForm />\n          <ArrowButton />\n          <SwapToForm />\n          <InfoLabel />\n          <SwapButton />\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nfunction SwapHeader() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        margin: \"8px\",\n      }}\n    >\n      <Typography\n        style={{\n          fontWeight: \"bold\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        Swap\n      </Typography>\n      <SettingsButton />\n    </div>\n  );\n}\n\nexport function ArrowButton() {\n  const styles = useStyles();\n  const { swapToFromMints } = useSwapContext();\n  return (\n    <Button className={styles.swapToFromButton} onClick={swapToFromMints}>\n      ⇅\n    </Button>\n  );\n}\n\nfunction SwapFromForm() {\n  const { fromMint, setFromMint, fromAmount, setFromAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      mint={fromMint}\n      setMint={setFromMint}\n      amount={fromAmount}\n      setAmount={setFromAmount}\n    />\n  );\n}\n\nfunction SwapToForm() {\n  const { toMint, setToMint, toAmount, setToAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      mint={toMint}\n      setMint={setToMint}\n      amount={toAmount}\n      setAmount={setToAmount}\n    />\n  );\n}\n\nfunction SwapTokenForm({\n  mint,\n  setMint,\n  amount,\n  setAmount,\n}: {\n  mint: PublicKey;\n  setMint: (m: PublicKey) => void;\n  amount: number;\n  setAmount: (a: number) => void;\n}) {\n  const [showTokenDialog, setShowTokenDialog] = useState(false);\n  const tokenAccount = useOwnedTokenAccount(mint);\n  const mintAccount = useMint(mint);\n\n  return (\n    <Paper elevation={0} variant=\"outlined\" style={{ borderRadius: \"10px\" }}>\n      <div\n        style={{\n          height: \"50px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <TokenButton mint={mint} onClick={() => setShowTokenDialog(true)} />\n        <TextField\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(parseFloat(e.target.value))}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        />\n      </div>\n      <div style={{ marginLeft: \"10px\", height: \"30px\" }}>\n        <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n          {tokenAccount && mintAccount\n            ? `Balance: ${(\n                tokenAccount.account.amount.toNumber() /\n                10 ** mintAccount.decimals\n              ).toFixed(mintAccount.decimals)}`\n            : `-`}\n        </Typography>\n      </div>\n      <TokenDialog\n        setMint={setMint}\n        open={showTokenDialog}\n        onClose={() => setShowTokenDialog(false)}\n      />\n    </Paper>\n  );\n}\n\nfunction TokenButton({\n  mint,\n  onClick,\n}: {\n  mint: PublicKey;\n  onClick: () => void;\n}) {\n  return (\n    <Button onClick={onClick} style={{ minWidth: \"116px\" }}>\n      <TokenIcon mint={mint} style={{ width: \"25px\", borderRadius: \"13px\" }} />\n      <TokenName mint={mint} />\n      <ExpandMore />\n    </Button>\n  );\n}\n\nexport function TokenIcon({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenMap = useTokenMap();\n  let tokenInfo = tokenMap.get(mint.toString());\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {tokenInfo?.logoURI ? (\n        <img alt=\"Logo\" style={style} src={tokenInfo?.logoURI} />\n      ) : (\n        <div style={style}></div>\n      )}\n    </div>\n  );\n}\n\nfunction TokenName({ mint }: { mint: PublicKey }) {\n  const tokenMap = useTokenMap();\n  let tokenInfo = tokenMap.get(mint.toString());\n  return (\n    <Typography style={{ marginLeft: \"5px\" }}>{tokenInfo?.symbol}</Typography>\n  );\n}\n\nfunction SwapButton() {\n  const styles = useStyles();\n  const {\n    fromMint,\n    toMint,\n    fromAmount,\n    toAmount,\n    slippage,\n    isClosingNewAccounts,\n  } = useSwapContext();\n  const { swapClient } = useDexContext();\n  const fromMintInfo = useMint(fromMint);\n  const toMintInfo = useMint(toMint);\n  const openOrders = useOpenOrders();\n  const route = useRouteVerbose(fromMint, toMint);\n  const fromMarket = useMarket(\n    route && route.markets ? route.markets[0] : undefined\n  );\n  const toMarket = useMarket(\n    route && route.markets ? route.markets[1] : undefined\n  );\n  const { wormholeMap, solletMap } = useTokenListContext();\n\n  // True iff the button should be activated.\n  const enabled =\n    // Mints are distinct.\n    fromMint.equals(toMint) === false &&\n    // Wallet is connected.\n    swapClient.program.provider.wallet.publicKey !== null &&\n    // Trade amounts greater than zero.\n    fromAmount > 0 &&\n    toAmount > 0 &&\n    // Trade route exists.\n    route !== null &&\n    // Wormhole <-> native markets must have the wormhole token as the\n    // *from* address since they're one-sided markets.\n    (route.kind !== \"wormhole-native\" ||\n      wormholeMap\n        .get(fromMint.toString())\n        ?.tags?.includes(SPL_REGISTRY_WORM_TAG) !== undefined) &&\n    // Wormhole <-> sollet markets must have the sollet token as the\n    // *from* address since they're one sided markets.\n    (route.kind !== \"wormhole-sollet\" ||\n      solletMap\n        .get(fromMint.toString())\n        ?.tags?.includes(SPL_REGISTRY_SOLLET_TAG) !== undefined);\n\n  const sendSwapTransaction = async () => {\n    if (!fromMintInfo || !toMintInfo) {\n      throw new Error(\"Unable to calculate mint decimals\");\n    }\n    const amount = new BN(fromAmount).mul(\n      new BN(10).pow(new BN(fromMintInfo.decimals))\n    );\n    const minExpectedSwapAmount = new BN(toAmount)\n      .mul(new BN(10).pow(new BN(toMintInfo.decimals)))\n      .muln(100 - slippage)\n      .divn(100);\n    const fromOpenOrders = fromMarket\n      ? openOrders.get(fromMarket?.address.toString())\n      : undefined;\n    const toOpenOrders = toMarket\n      ? openOrders.get(toMarket?.address.toString())\n      : undefined;\n    await swapClient.swap({\n      fromMint,\n      toMint,\n      amount,\n      minExpectedSwapAmount,\n      // Pass in the below parameters so that the client doesn't perform\n      // wasteful network requests when we already have the data.\n      fromMarket,\n      toMarket,\n      fromOpenOrders: fromOpenOrders ? fromOpenOrders[0].address : undefined,\n      toOpenOrders: toOpenOrders ? toOpenOrders[0].address : undefined,\n      // Auto close newly created open orders accounts.\n      close: isClosingNewAccounts,\n    });\n  };\n  return (\n    <Button\n      variant=\"contained\"\n      className={styles.swapButton}\n      onClick={sendSwapTransaction}\n      disabled={!enabled}\n    >\n      Swap\n    </Button>\n  );\n}\n","// The swap module exports a single `Swap` component that can be embedded into\n// applications.\n\nimport Swap from \"./components/Swap\";\nexport default Swap;\n","import { useState, useEffect, useMemo } from \"react\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport { Button } from \"@material-ui/core\";\nimport { Provider } from \"@project-serum/anchor\";\n// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {\n  Account,\n  ConfirmOptions,\n  Connection,\n  Transaction,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport {\n  TokenListContainer,\n  TokenListProvider,\n} from \"@solana/spl-token-registry\";\nimport Swap from \"./swap\";\nimport \"./App.css\";\n\n// App illustrating the use of the Swap component.\n//\n// One needs to just provide an Anchor `Provider` and a `TokenListContainer`\n// to the `Swap` component, and then everything else is taken care of.\nfunction App() {\n  return (\n    <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n      <AppInner />\n    </SnackbarProvider>\n  );\n}\n\nfunction AppInner() {\n  const { enqueueSnackbar } = useSnackbar();\n  const [isConnected, setIsConnected] = useState(false);\n  const [tokenList, setTokenList] = useState<TokenListContainer | null>(null);\n\n  const [provider, wallet] = useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    const network = \"https://solana-api.projectserum.com\";\n    const wallet = new Wallet(\"https://www.sollet.io\", network);\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new NotifyingProvider(\n      connection,\n      wallet,\n      opts,\n      (tx, err) => {\n        if (err) {\n          enqueueSnackbar(`Error: ${err.toString()}`, {\n            variant: \"error\",\n          });\n        } else {\n          enqueueSnackbar(\"Transaction sent\", {\n            variant: \"success\",\n            action: (\n              <Button\n                color=\"inherit\"\n                component=\"a\"\n                target=\"_blank\"\n                rel=\"noopener\"\n                href={`https://explorer.solana.com/tx/${tx}`}\n              >\n                View on Solana Explorer\n              </Button>\n            ),\n          });\n        }\n      }\n    );\n    return [provider, wallet];\n  }, [enqueueSnackbar]);\n\n  useEffect(() => {\n    new TokenListProvider().resolve().then(setTokenList);\n  }, [setTokenList]);\n\n  // Connect to the wallet.\n  useEffect(() => {\n    wallet.on(\"connect\", () => {\n      enqueueSnackbar(\"Wallet connected\", { variant: \"success\" });\n      setIsConnected(true);\n    });\n    wallet.on(\"disconnect\", () => {\n      enqueueSnackbar(\"Wallet disconnected\", { variant: \"info\" });\n      setIsConnected(false);\n    });\n  }, [wallet, enqueueSnackbar]);\n\n  return (\n    <div\n      style={{\n        width: \"450px\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        position: \"absolute\",\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Button\n        variant=\"outlined\"\n        onClick={() => (!isConnected ? wallet.connect() : wallet.disconnect())}\n        style={{ position: \"fixed\", right: 24, top: 24 }}\n      >\n        {!isConnected ? \"Connect\" : \"Disconnect\"}\n      </Button>\n      {tokenList && <Swap provider={provider} tokenList={tokenList} />}\n    </div>\n  );\n}\n\n// Custom provider to display notifications whenever a transaction is sent.\n//\n// Note that this is an Anchor wallet/network provider--not a React provider,\n// so all transactions will be flowing through here, which allows us to\n// hook in to display all transactions sent from the `Swap` component\n// as notifications in the parent app.\nclass NotifyingProvider extends Provider {\n  // Function to call whenever the provider sends a transaction;\n  private onTransaction: (\n    tx: TransactionSignature | undefined,\n    err?: Error\n  ) => void;\n\n  constructor(\n    connection: Connection,\n    wallet: Wallet,\n    opts: ConfirmOptions,\n    onTransaction: (tx: TransactionSignature | undefined, err?: Error) => void\n  ) {\n    super(connection, wallet, opts);\n    this.onTransaction = onTransaction;\n  }\n\n  async send(\n    tx: Transaction,\n    signers?: Array<Account | undefined>,\n    opts?: ConfirmOptions\n  ): Promise<TransactionSignature> {\n    try {\n      // A production implementation should handle error notifications as well.\n      const txSig = await super.send(tx, signers, opts);\n      this.onTransaction(txSig);\n      return txSig;\n    } catch (err) {\n      this.onTransaction(undefined, err);\n      return \"\";\n    }\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}