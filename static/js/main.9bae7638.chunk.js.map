{"version":3,"sources":["swap/utils/pubkeys.ts","swap/context/TokenList.tsx","swap/context/Sollet.tsx","swap/context/Dex.tsx","swap/context/Swap.tsx","swap/utils/tokens.ts","swap/context/Token.tsx","swap/components/TokenDialog.tsx","swap/components/OpenOrdersDialog.tsx","swap/components/Settings.tsx","swap/components/Info.tsx","swap/components/Swap.tsx","swap/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEX_PID","PublicKey","SRM_MINT","USDC_MINT","USDT_MINT","WORM_MARKET_BASE","WORM_USDC_MINT","WORM_USDC_MARKET","WORM_USDT_MINT","WORM_USDT_MARKET","_TokenListContext","React","createContext","SPL_REGISTRY_SOLLET_TAG","SPL_REGISTRY_WORM_TAG","TokenListContextProvider","props","tokenList","useMemo","filterByClusterSlug","getList","tokenMap","Map","forEach","t","set","address","swappableTokens","tokens","filter","isUsdxQuoted","extensions","serumV3Usdt","serumV3Usdc","isSol","concat","get","toString","sort","a","b","symbol","tags","includes","map","swappableTokensSollet","solletMap","swappableTokensWormhole","wormholeMap","Provider","value","children","useTokenListContext","ctx","useContext","Error","useTokenMap","fetchSolletInfo","mint","undefined","info","_SOLLET_INFO_CACHE","swapApiRequest","infoRaw","splMint","requestWormholeSwapMarketIfNeeded","connection","solletMint","wormholeMint","swapMarket","solletInfo","cached","_SWAP_MARKET_EXISTS_CACHE","getAccountInfo","ticker","catch","console","error","method","path","body","params","headers","cache","JSON","stringify","fetch","resp","handleSwapApiResponse","json","success","SwapApiError","status","result","msg","name","_DexContext","DexContextProvider","useState","ooAccounts","setOoAccounts","marketCache","setMarketCache","swapClient","useEffect","program","provider","wallet","publicKey","OpenOrders","findForOwner","then","openOrders","newOoAccounts","markets","Set","oo","add","market","push","size","anchor","getMultipleAccounts","m","marketAccounts","programAccount","account","Market","getLayout","decode","data","opts","newMarketCache","useDexContext","useOpenOrders","useMarket","asyncMarket","useAsync","load","marketClient","_ORDERBOOK_CACHE","useBbo","orderbook","refresh","setRefresh","asyncOrderbook","Promise","all","loadBids","loadAsks","bids","asks","listener","bidsAddress","onAccountChange","OrderbookSide","oldBestBid","items","next","newBestBid","price","r","removeAccountChangeListener","asksAddress","oldBestOffer","newBestOffer","useOrderbook","bestBid","bestOffer","mid","useRoute","fromMint","toMint","route","useRouteVerbose","asyncRoute","wormholeSwapMarket","wormholeMarket","kind","WORMHOLE_NATIVE_MAP","wormKey","first","second","conn","wormholeNativeMarket","wormholeSolletMarket","fromWormhole","isFromWormhole","toWormhole","isToWormhole","fromSollet","isFromSollet","toSollet","isToSollet","base","quote","wormholeInfo","erc20Contract","deriveWormholeMarket","baseMint","quoteMint","version","log","padToTwo","n","slice","seed","createWithSeed","_SwapContext","SwapContextProvider","setFromMint","setToMint","fromAmount","_setFromAmount","toAmount","_setToAmount","isClosingNewAccounts","setIsClosingNewAccounts","slippage","setSlippage","fairOverride","setFairOverride","fair","_useSwapFair","referral","assert","setFromAmount","amount","setToAmount","swapToFromMints","oldFrom","oldFromAmount","oldToAmount","useSwapContext","useSwapFair","fairRoute","fromBbo","fromMarket","toBbo","length","baseMintAddress","equals","useFairRoute","filters","getOwnedAccountsFilters","_rpcRequest","TOKEN_PROGRAM_ID","toBase58","commitment","message","pubkey","executable","owner","lamports","accountInfo","bs58","every","dataSize","memcmp","filterBytes","bytes","offset","parseTokenAccountData","ACCOUNT_LAYOUT","BufferLayout","BN","offsetOf","span","_TokenContext","TokenContextProvider","_OWNED_TOKEN_ACCOUNTS_CACHE","getOwnedTokenAccounts","accs","useTokenContext","useOwnedTokenAccount","tokenAccounts","tokenAccount","token","index","indexOf","useMint","asyncMintInfo","_MINT_CACHE","mintClient","Token","Account","getMintInfo","mintInfo","useStyles","makeStyles","dialogContent","paddingTop","paddingBottom","textField","width","border","borderRadius","marginBottom","tab","minWidth","TokenDialog","open","onClose","setMint","tabSelection","setTabSelection","tokenFilter","setTokenFilter","toLowerCase","styles","useSwappableTokens","selectedTokens","startsWith","Dialog","scroll","PaperProps","style","DialogTitle","fontWeight","Typography","variant","TextField","className","placeholder","onChange","e","target","InputProps","disableUnderline","padding","DialogContent","dividers","List","disablePadding","tokenInfo","TokenListItem","onClick","DialogActions","Tabs","v","Tab","label","ListItem","button","TokenIcon","TokenName","marginLeft","color","fontSize","theme","table","closeAccountSwitchLabel","palette","text","secondary","OpenOrdersDialog","maxWidth","height","display","justifyContent","IconButton","position","right","top","Close","OpenOrdersAccounts","openOrdersEntries","Array","from","entries","TableContainer","component","Paper","elevation","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","oos","OpenOrdersRow","ooAccount","setOoAccount","quoteMintAddress","baseWallet","quoteWallet","baseTicker","quoteTicker","marketName","settleDisabled","baseTokenFree","toNumber","quoteTokenFree","closeDisabled","baseTokenTotal","quoteTokenTotal","settleFunds","makeSettleFundsTransaction","transaction","signers","send","closeOpenOrders","scope","Link","href","rel","Select","MenuItem","toDisplay","sub","Button","disabled","decimals","toFixed","settingsButton","SettingsButton","popupState","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","SettingsDetails","showSettingsDialog","setShowSettingsDialog","marginTop","type","parseFloat","flexDirection","endAdornment","InputAdornment","marginRight","flex","ToggleButton","selected","paddingLeft","paddingRight","CloseNewAccountsSwitch","background","FormGroup","row","FormControlLabel","classes","labelPlacement","control","Switch","checked","infoLabel","fairPriceLabel","infoButton","InfoLabel","fromMintInfo","fromTokenInfo","toTokenInfo","InfoButton","Info","disableRestoreFocus","InfoDetails","addresses","MarketRoute","overflow","useMarketName","bbo","card","cardContent","swapButton","swapToFromButton","SwapCard","Card","SwapHeader","SwapFromForm","ArrowButton","SwapToForm","SwapButton","margin","SwapTokenForm","setAmount","showTokenDialog","setShowTokenDialog","mintAccount","TokenButton","ExpandMore","logoURI","alt","src","toMintInfo","toMarket","canSwap","useCanSwap","asyncReferral","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","useReferral","sendSwapTransaction","mul","pow","minExchangeRate","rate","divn","muln","fromOpenOrders","toOpenOrders","swap","close","Swap","SwapClient","AppInner","enqueueSnackbar","useSnackbar","isConnected","setIsConnected","setTokenList","preflightCommitment","network","Wallet","Connection","NotifyingProvider","tx","err","action","TokenListProvider","resolve","on","left","bottom","disconnect","connect","onTransaction","txSig","this","App","maxSnack","autoHideDuration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bae7638.chunk.js","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\n\nexport const DEX_PID = new PublicKey(\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\"\n);\n\nexport const SRM_MINT = new PublicKey(\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"\n);\n\nexport const USDC_MINT = new PublicKey(\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n);\n\nexport const USDT_MINT = new PublicKey(\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"\n);\n\nexport const WORM_MARKET_BASE = new PublicKey(\n  \"6a9wpsZpZGxGhFVSQBpcTNjNjytdbSA1iUw1A5KNDxPw\"\n);\n\nexport const WORM_USDC_MINT = new PublicKey(\n  \"FVsXUnbhifqJ4LiXQEbpUtXVdB8T5ADLKqSs5t1oc54F\"\n);\n\nexport const WORM_USDC_MARKET = new PublicKey(\n  \"6nGMps9VfDjkKEwYjdSNqN1ToXkLae4VsN49fzBiDFBd\"\n);\n\nexport const WORM_USDT_MINT = new PublicKey(\n  \"9w97GdWUYYaamGwdKMKZgGzPduZJkiFizq4rz5CPXRv2\"\n);\n\nexport const WORM_USDT_MARKET = new PublicKey(\n  \"4v6e6vNXAaEunrvbqkYnKwbaWfck8a2KVR4uRAVXxVwC\"\n);\n","import React, { useContext, useMemo } from \"react\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { USDC_MINT, USDT_MINT } from \"../utils/pubkeys\";\n\ntype TokenListContext = {\n  tokenMap: Map<string, TokenInfo>;\n  wormholeMap: Map<string, TokenInfo>;\n  solletMap: Map<string, TokenInfo>;\n  swappableTokens: TokenInfo[];\n  swappableTokensSollet: TokenInfo[];\n  swappableTokensWormhole: TokenInfo[];\n};\nconst _TokenListContext = React.createContext<null | TokenListContext>(null);\n\n// Tag in the spl-token-registry for sollet wrapped tokens.\nexport const SPL_REGISTRY_SOLLET_TAG = \"wrapped-sollet\";\n\n// Tag in the spl-token-registry for wormhole wrapped tokens.\nexport const SPL_REGISTRY_WORM_TAG = \"wormhole\";\n\nexport function TokenListContextProvider(props: any) {\n  const tokenList = useMemo(\n    () => props.tokenList.filterByClusterSlug(\"mainnet-beta\").getList(),\n    [props.tokenList]\n  );\n\n  // Token map for quick lookup.\n  const tokenMap = useMemo(() => {\n    const tokenMap = new Map();\n    tokenList.forEach((t: TokenInfo) => {\n      tokenMap.set(t.address, t);\n    });\n    return tokenMap;\n  }, [tokenList]);\n\n  // Tokens with USD(x) quoted markets.\n  const swappableTokens = useMemo(() => {\n    const tokens = tokenList\n      .filter((t: TokenInfo) => {\n        const isUsdxQuoted =\n          t.extensions?.serumV3Usdt || t.extensions?.serumV3Usdc;\n        const isSol =\n          t.address === \"So11111111111111111111111111111111111111112\";\n        return isUsdxQuoted && !isSol;\n      })\n      .concat([\n        tokenMap.get(USDC_MINT.toString()),\n        tokenMap.get(USDT_MINT.toString()),\n      ]);\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return tokens;\n  }, [tokenList, tokenMap]);\n\n  // Sollet wrapped tokens.\n  const [swappableTokensSollet, solletMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_SOLLET_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  // Wormhole wrapped tokens.\n  const [swappableTokensWormhole, wormholeMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_WORM_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  return (\n    <_TokenListContext.Provider\n      value={{\n        tokenMap,\n        wormholeMap,\n        solletMap,\n        swappableTokens,\n        swappableTokensWormhole,\n        swappableTokensSollet,\n      }}\n    >\n      {props.children}\n    </_TokenListContext.Provider>\n  );\n}\n\nexport function useTokenListContext(): TokenListContext {\n  const ctx = useContext(_TokenListContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useTokenMap(): Map<string, TokenInfo> {\n  const { tokenMap } = useTokenListContext();\n  return tokenMap;\n}\n\nexport function useSwappableTokens() {\n  const { swappableTokens, swappableTokensWormhole, swappableTokensSollet } =\n    useTokenListContext();\n  return { swappableTokens, swappableTokensWormhole, swappableTokensSollet };\n}\n","import { useAsync, UseAsyncReturn } from \"react-async-hook\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\n// Token info tracked by the sollet bridge.\ntype SolletInfo = {\n  blockchain: string;\n  erc20Contract: string;\n  name: string;\n  splMint: PublicKey;\n  ticker: string;\n};\n\nexport function useSolletInfo(mint: PublicKey): UseAsyncReturn<SolletInfo> {\n  return useAsync(async () => {\n    return fetchSolletInfo(mint);\n  }, [mint]);\n}\n\n// Fetches the token info from the sollet bridge.\nexport async function fetchSolletInfo(mint: PublicKey): Promise<SolletInfo> {\n  let info = _SOLLET_INFO_CACHE.get(mint.toString());\n  if (info !== undefined) {\n    return info;\n  }\n\n  const infoRaw = await swapApiRequest(\"GET\", `coins/sol/${mint.toString()}`);\n  info = { ...infoRaw, splMint: new PublicKey(infoRaw.splMint) };\n  _SOLLET_INFO_CACHE.set(mint.toString(), info!);\n\n  return info!;\n}\n\n// Requests the creation of a sollet wormhole swap market, if it doesn't\n// already exist. Note: this triggers a creation notification. Creation\n// doesn't happen immediately, but at some unspecified point in the future\n// since market makers need to setup on the swap market and provide liquidity.\n//\n// Returns true if the market exists already. False otherwise.\nexport async function requestWormholeSwapMarketIfNeeded(\n  connection: Connection,\n  solletMint: PublicKey,\n  wormholeMint: PublicKey,\n  swapMarket: PublicKey,\n  solletInfo: SolletInfo\n): Promise<boolean> {\n  const cached = _SWAP_MARKET_EXISTS_CACHE.get(swapMarket.toString());\n  if (cached !== undefined) {\n    return cached;\n  }\n  const acc = await connection.getAccountInfo(swapMarket);\n  if (acc === null) {\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), false);\n    const resource = `wormhole/pool/${\n      solletInfo.ticker\n    }/${swapMarket.toString()}/${solletMint.toString()}/${wormholeMint.toString()}`;\n    swapApiRequest(\"POST\", resource).catch(console.error);\n    return false;\n  } else {\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), true);\n    return true;\n  }\n}\n\nexport async function swapApiRequest(\n  method: string,\n  path: string,\n  body?: Object\n) {\n  let headers: any = {};\n  let params: any = { headers, method };\n  if (method === \"GET\") {\n    params.cache = \"no-cache\";\n  } else if (body) {\n    headers[\"Content-Type\"] = \"application/json\";\n    params.body = JSON.stringify(body);\n  }\n  let resp = await fetch(`https://swap.sollet.io/api/${path}`, params);\n  return await handleSwapApiResponse(resp);\n}\n\nasync function handleSwapApiResponse(resp: Response) {\n  let json = await resp.json();\n  if (!json.success) {\n    throw new SwapApiError(json.error, resp.status);\n  }\n  return json.result;\n}\n\nexport class SwapApiError extends Error {\n  readonly name: string;\n  readonly status: number;\n  constructor(msg: string, status: number) {\n    super(msg);\n    this.name = \"SwapApiError\";\n    this.status = status;\n  }\n}\n\nconst _SOLLET_INFO_CACHE = new Map<string, SolletInfo>();\nconst _SWAP_MARKET_EXISTS_CACHE = new Map<string, boolean>();\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  Market,\n  OpenOrders,\n  Orderbook as OrderbookSide,\n} from \"@project-serum/serum\";\nimport {\n  DEX_PID,\n  USDC_MINT,\n  USDT_MINT,\n  WORM_USDC_MINT,\n  WORM_USDT_MINT,\n  WORM_USDC_MARKET,\n  WORM_USDT_MARKET,\n  WORM_MARKET_BASE,\n} from \"../utils/pubkeys\";\nimport { useTokenMap, useTokenListContext } from \"./TokenList\";\nimport { fetchSolletInfo, requestWormholeSwapMarketIfNeeded } from \"./Sollet\";\n\nexport const BASE_TAKER_FEE_BPS = 0.0022;\n\ntype DexContext = {\n  // Maps market address to open orders accounts.\n  openOrders: Map<string, Array<OpenOrders>>;\n  marketCache: Map<string, Market>;\n  setMarketCache: (c: Map<string, Market>) => void;\n  swapClient: SwapClient;\n};\nconst _DexContext = React.createContext<DexContext | null>(null);\n\nexport function DexContextProvider(props: any) {\n  const [ooAccounts, setOoAccounts] = useState<Map<string, Array<OpenOrders>>>(\n    new Map()\n  );\n  const [marketCache, setMarketCache] = useState<Map<string, Market>>(\n    new Map()\n  );\n  const swapClient = props.swapClient;\n\n  // Two operations:\n  //\n  // 1. Fetch all open orders accounts for the connected wallet.\n  // 2. Batch fetch all market accounts for those open orders.\n  //\n  useEffect(() => {\n    if (!swapClient.program.provider.wallet.publicKey) {\n      setOoAccounts(new Map());\n      return;\n    }\n    OpenOrders.findForOwner(\n      swapClient.program.provider.connection,\n      swapClient.program.provider.wallet.publicKey,\n      DEX_PID\n    ).then(async (openOrders) => {\n      const newOoAccounts = new Map();\n      let markets = new Set<string>();\n      openOrders.forEach((oo) => {\n        markets.add(oo.market.toString());\n        if (newOoAccounts.get(oo.market.toString())) {\n          newOoAccounts.get(oo.market.toString()).push(oo);\n        } else {\n          newOoAccounts.set(oo.market.toString(), [oo]);\n        }\n      });\n      if (markets.size > 100) {\n        // Punt request chunking until there's user demand.\n        throw new Error(\n          \"Too many markets. Please file an issue to update this\"\n        );\n      }\n      const marketAccounts = (\n        await anchor.utils.getMultipleAccounts(\n          swapClient.program.provider.connection,\n          // @ts-ignore\n          [...markets].map((m) => new PublicKey(m))\n        )\n      ).map((programAccount) => {\n        return {\n          publicKey: programAccount?.publicKey,\n          account: new Market(\n            Market.getLayout(DEX_PID).decode(programAccount?.account.data),\n            -1, // Not used so don't bother fetching.\n            -1, // Not used so don't bother fetching.\n            swapClient.program.provider.opts,\n            DEX_PID\n          ),\n        };\n      });\n      setMarketCache((marketCache) => {\n        const newMarketCache = new Map(marketCache);\n        marketAccounts.forEach((m) => {\n          newMarketCache.set(m.publicKey!.toString(), m.account);\n        });\n        return newMarketCache;\n      });\n      setOoAccounts(newOoAccounts);\n    });\n  }, [\n    swapClient.program.provider.connection,\n    swapClient.program.provider.wallet.publicKey,\n    swapClient.program.provider.opts,\n  ]);\n  return (\n    <_DexContext.Provider\n      value={{\n        openOrders: ooAccounts,\n        marketCache,\n        setMarketCache,\n        swapClient,\n      }}\n    >\n      {props.children}\n    </_DexContext.Provider>\n  );\n}\n\nexport function useDexContext(): DexContext {\n  const ctx = useContext(_DexContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useOpenOrders(): Map<string, Array<OpenOrders>> {\n  const ctx = useDexContext();\n  return ctx.openOrders;\n}\n\n// Lazy load a given market.\nexport function useMarket(market?: PublicKey): Market | undefined {\n  const ctx = useDexContext();\n\n  const asyncMarket = useAsync(async () => {\n    if (!market) {\n      return undefined;\n    }\n    if (ctx.marketCache.get(market.toString())) {\n      return ctx.marketCache.get(market.toString());\n    }\n    const marketClient = await Market.load(\n      ctx.swapClient.program.provider.connection,\n      market,\n      undefined,\n      DEX_PID\n    );\n\n    let cache = new Map(ctx.marketCache);\n    cache.set(market.toString(), marketClient);\n    ctx.setMarketCache(cache);\n\n    return marketClient;\n  }, [ctx.swapClient.program.provider.connection, market]);\n\n  if (asyncMarket.result) {\n    return asyncMarket.result;\n  }\n\n  return undefined;\n}\n\n// Lazy load the orderbook for a given market.\nexport function useOrderbook(market?: PublicKey): Orderbook | undefined {\n  const { swapClient } = useDexContext();\n  const marketClient = useMarket(market);\n  const [refresh, setRefresh] = useState(0);\n\n  const asyncOrderbook = useAsync(async () => {\n    if (!market || !marketClient) {\n      return undefined;\n    }\n    if (_ORDERBOOK_CACHE.get(market.toString())) {\n      return _ORDERBOOK_CACHE.get(market.toString());\n    }\n\n    const [bids, asks] = await Promise.all([\n      marketClient.loadBids(swapClient.program.provider.connection),\n      marketClient.loadAsks(swapClient.program.provider.connection),\n    ]);\n\n    const orderbook = {\n      bids,\n      asks,\n    };\n\n    _ORDERBOOK_CACHE.set(market.toString(), orderbook);\n\n    return orderbook;\n  }, [refresh, swapClient.program.provider.connection, market, marketClient]);\n\n  // Stream in bids updates.\n  useEffect(() => {\n    let listener: number | undefined;\n    if (marketClient?.bidsAddress) {\n      listener = swapClient.program.provider.connection.onAccountChange(\n        marketClient?.bidsAddress,\n        (info) => {\n          const bids = OrderbookSide.decode(marketClient, info.data);\n          const orderbook = _ORDERBOOK_CACHE.get(\n            marketClient.address.toString()\n          );\n          const oldBestBid = orderbook?.bids.items(true).next().value;\n          const newBestBid = bids.items(true).next().value;\n          if (\n            orderbook &&\n            oldBestBid &&\n            newBestBid &&\n            oldBestBid.price !== newBestBid.price\n          ) {\n            orderbook.bids = bids;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        swapClient.program.provider.connection.removeAccountChangeListener(\n          listener\n        );\n      }\n    };\n  }, [\n    marketClient,\n    marketClient?.bidsAddress,\n    swapClient.program.provider.connection,\n  ]);\n\n  // Stream in asks updates.\n  useEffect(() => {\n    let listener: number | undefined;\n    if (marketClient?.asksAddress) {\n      listener = swapClient.program.provider.connection.onAccountChange(\n        marketClient?.asksAddress,\n        (info) => {\n          const asks = OrderbookSide.decode(marketClient, info.data);\n          const orderbook = _ORDERBOOK_CACHE.get(\n            marketClient.address.toString()\n          );\n          const oldBestOffer = orderbook?.asks.items(false).next().value;\n          const newBestOffer = asks.items(false).next().value;\n          if (\n            orderbook &&\n            oldBestOffer &&\n            newBestOffer &&\n            oldBestOffer.price !== newBestOffer.price\n          ) {\n            orderbook.asks = asks;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        swapClient.program.provider.connection.removeAccountChangeListener(\n          listener\n        );\n      }\n    };\n  }, [\n    marketClient,\n    marketClient?.bidsAddress,\n    swapClient.program.provider.connection,\n  ]);\n\n  if (asyncOrderbook.result) {\n    return asyncOrderbook.result;\n  }\n\n  return undefined;\n}\n\nconst _ORDERBOOK_CACHE = new Map<string, Orderbook>();\n\nexport function useMarketName(market: PublicKey): string | null {\n  const tokenMap = useTokenMap();\n  const marketClient = useMarket(market);\n  if (!marketClient) {\n    return null;\n  }\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const name = `${baseTicker} / ${quoteTicker}`;\n  return name;\n}\n\n// Fair price for a given market, as defined by the mid.\nexport function useBbo(market?: PublicKey): Bbo | undefined {\n  const orderbook = useOrderbook(market);\n  if (orderbook === undefined) {\n    return undefined;\n  }\n  const bestBid = orderbook.bids.items(true).next().value;\n  const bestOffer = orderbook.asks.items(false).next().value;\n  if (!bestBid) {\n    return { bestOffer: bestOffer.price };\n  }\n  if (!bestOffer) {\n    return { bestBid: bestBid.price };\n  }\n  const mid = (bestBid.price + bestOffer.price) / 2.0;\n  return { bestBid: bestBid.price, bestOffer: bestOffer.price, mid };\n}\n\n// Fair price for a theoretical toMint/fromMint market. I.e., the number\n// of `fromMint` tokens to purchase a single `toMint` token. Aggregates\n// across a trade route, if needed.\nexport function useFairRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): number | undefined {\n  const route = useRoute(fromMint, toMint);\n  const fromBbo = useBbo(route ? route[0] : undefined);\n  const fromMarket = useMarket(route ? route[0] : undefined);\n  const toBbo = useBbo(route ? route[1] : undefined);\n\n  if (route === null) {\n    return undefined;\n  }\n\n  if (route.length === 1 && fromBbo !== undefined) {\n    if (fromMarket === undefined) {\n      return undefined;\n    }\n    if (fromMarket?.baseMintAddress.equals(fromMint)) {\n      return fromBbo.bestBid && 1.0 / fromBbo.bestBid;\n    } else {\n      return fromBbo.bestOffer && fromBbo.bestOffer;\n    }\n  }\n  if (\n    fromBbo === undefined ||\n    fromBbo.bestBid === undefined ||\n    toBbo === undefined ||\n    toBbo.bestOffer === undefined\n  ) {\n    return undefined;\n  }\n  return toBbo.bestOffer / fromBbo.bestBid;\n}\n\nexport function useRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): Array<PublicKey> | null {\n  const route = useRouteVerbose(fromMint, toMint);\n  if (route === null) {\n    return null;\n  }\n  return route.markets;\n}\n\n// Types of routes.\n//\n// 1. Direct trades on USDC quoted markets.\n// 2. Transitive trades across two USDC qutoed markets.\n// 3. Wormhole <-> Sollet one-to-one swap markets.\n// 4. Wormhole <-> Native one-to-one swap markets.\n//\nexport function useRouteVerbose(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): { markets: Array<PublicKey>; kind: RouteKind } | null {\n  const { swapClient } = useDexContext();\n  const { wormholeMap, solletMap } = useTokenListContext();\n  const asyncRoute = useAsync(async () => {\n    const swapMarket = await wormholeSwapMarket(\n      swapClient.program.provider.connection,\n      fromMint,\n      toMint,\n      wormholeMap,\n      solletMap\n    );\n    if (swapMarket !== null) {\n      const [wormholeMarket, kind] = swapMarket;\n      return { markets: [wormholeMarket], kind };\n    }\n    const markets = swapClient.route(fromMint, toMint);\n    if (markets === null) {\n      return null;\n    }\n    const kind: RouteKind = \"usdx\";\n    return { markets, kind };\n  }, [fromMint, toMint, swapClient]);\n\n  if (asyncRoute.result) {\n    return asyncRoute.result;\n  }\n  return null;\n}\n\ntype Orderbook = {\n  bids: OrderbookSide;\n  asks: OrderbookSide;\n};\n\n// Wormhole utils.\n\ntype RouteKind = \"wormhole-native\" | \"wormhole-sollet\" | \"usdx\";\n\n// Maps fromMint || toMint (in sort order) to swap market public key.\n// All markets for wormhole<->native tokens should be here, e.g.\n// USDC <-> wUSDC.\nconst WORMHOLE_NATIVE_MAP = new Map<string, PublicKey>([\n  [wormKey(WORM_USDC_MINT, USDC_MINT), WORM_USDC_MARKET],\n  [wormKey(WORM_USDT_MINT, USDT_MINT), WORM_USDT_MARKET],\n]);\n\nfunction wormKey(fromMint: PublicKey, toMint: PublicKey): string {\n  const [first, second] =\n    fromMint < toMint ? [fromMint, toMint] : [toMint, fromMint];\n  return first.toString() + second.toString();\n}\n\nasync function wormholeSwapMarket(\n  conn: Connection,\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  wormholeMap: Map<string, TokenInfo>,\n  solletMap: Map<string, TokenInfo>\n): Promise<[PublicKey, RouteKind] | null> {\n  let market = wormholeNativeMarket(fromMint, toMint);\n  if (market !== null) {\n    return [market, \"wormhole-native\"];\n  }\n  market = await wormholeSolletMarket(\n    conn,\n    fromMint,\n    toMint,\n    wormholeMap,\n    solletMap\n  );\n  if (market === null) {\n    return null;\n  }\n  return [market, \"wormhole-sollet\"];\n}\n\nfunction wormholeNativeMarket(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): PublicKey | null {\n  return WORMHOLE_NATIVE_MAP.get(wormKey(fromMint, toMint)) ?? null;\n}\n\n// Returns the market address of the 1-1 sollet<->wormhole swap market if it\n// exists. Otherwise, returns null.\nasync function wormholeSolletMarket(\n  conn: Connection,\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  wormholeMap: Map<string, TokenInfo>,\n  solletMap: Map<string, TokenInfo>\n): Promise<PublicKey | null> {\n  const fromWormhole = wormholeMap.get(fromMint.toString());\n  const isFromWormhole = fromWormhole !== undefined;\n\n  const toWormhole = wormholeMap.get(toMint.toString());\n  const isToWormhole = toWormhole !== undefined;\n\n  const fromSollet = solletMap.get(fromMint.toString());\n  const isFromSollet = fromSollet !== undefined;\n\n  const toSollet = solletMap.get(toMint.toString());\n  const isToSollet = toSollet !== undefined;\n\n  if ((isFromWormhole || isToWormhole) && isFromWormhole !== isToWormhole) {\n    if ((isFromSollet || isToSollet) && isFromSollet !== isToSollet) {\n      const base = isFromSollet ? fromMint : toMint;\n      const [quote, wormholeInfo] = isFromWormhole\n        ? [fromMint, fromWormhole]\n        : [toMint, toWormhole];\n\n      const solletInfo = await fetchSolletInfo(base);\n\n      if (solletInfo.erc20Contract !== wormholeInfo!.extensions?.address) {\n        return null;\n      }\n\n      const market = await deriveWormholeMarket(base, quote);\n      if (market === null) {\n        return null;\n      }\n\n      const marketExists = await requestWormholeSwapMarketIfNeeded(\n        conn,\n        base,\n        quote,\n        market,\n        solletInfo\n      );\n      if (!marketExists) {\n        return null;\n      }\n\n      return market;\n    }\n  }\n  return null;\n}\n\n// Calculates the deterministic address for the sollet<->wormhole 1-1 swap\n// market.\nasync function deriveWormholeMarket(\n  baseMint: PublicKey,\n  quoteMint: PublicKey,\n  version = 0\n): Promise<PublicKey | null> {\n  if (version > 99) {\n    console.log(\"Swap market version cannot be greater than 99\");\n    return null;\n  }\n  if (version < 0) {\n    console.log(\"Version cannot be less than zero\");\n    return null;\n  }\n\n  const padToTwo = (n: number) => (n <= 99 ? `0${n}`.slice(-2) : n);\n  const seed =\n    baseMint.toString().slice(0, 15) +\n    quoteMint.toString().slice(0, 15) +\n    padToTwo(version);\n  return await PublicKey.createWithSeed(WORM_MARKET_BASE, seed, DEX_PID);\n}\n\ntype Bbo = {\n  bestBid?: number;\n  bestOffer?: number;\n  mid?: number;\n};\n","import * as assert from \"assert\";\nimport React, { useContext, useState } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  Token,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Market } from \"@project-serum/serum\";\nimport { SRM_MINT, USDC_MINT, USDT_MINT } from \"../utils/pubkeys\";\nimport { useFairRoute, useRouteVerbose, useDexContext } from \"./Dex\";\nimport {\n  useTokenListContext,\n  SPL_REGISTRY_SOLLET_TAG,\n  SPL_REGISTRY_WORM_TAG,\n} from \"./TokenList\";\n\nconst DEFAULT_SLIPPAGE_PERCENT = 0.5;\n\nexport type SwapContext = {\n  // Mint being traded from. The user must own these tokens.\n  fromMint: PublicKey;\n  setFromMint: (m: PublicKey) => void;\n\n  // Mint being traded to. The user will receive these tokens after the swap.\n  toMint: PublicKey;\n  setToMint: (m: PublicKey) => void;\n\n  // Amount used for the swap.\n  fromAmount: number;\n  setFromAmount: (a: number) => void;\n\n  // *Expected* amount received from the swap.\n  toAmount: number;\n  setToAmount: (a: number) => void;\n\n  // Function to flip what we consider to be the \"to\" and \"from\" mints.\n  swapToFromMints: () => void;\n\n  // The amount (in units of percent) a swap can be off from the estimate\n  // shown to the user.\n  slippage: number;\n  setSlippage: (n: number) => void;\n\n  // Null if the user is using fairs directly from DEX prices.\n  // Otherwise, a user specified override for the price to use when calculating\n  // swap amounts.\n  fairOverride: number | null;\n  setFairOverride: (n: number | null) => void;\n\n  // The referral *owner* address. Associated token accounts must be created,\n  // first, for this to be used.\n  referral?: PublicKey;\n\n  // True if all newly created market accounts should be closed in the\n  // same user flow (ideally in the same transaction).\n  isClosingNewAccounts: boolean;\n  setIsClosingNewAccounts: (b: boolean) => void;\n};\nconst _SwapContext = React.createContext<null | SwapContext>(null);\n\nexport function SwapContextProvider(props: any) {\n  const [fromMint, setFromMint] = useState(props.fromMint ?? SRM_MINT);\n  const [toMint, setToMint] = useState(props.toMint ?? USDC_MINT);\n  const [fromAmount, _setFromAmount] = useState(props.fromAmount ?? 0);\n  const [toAmount, _setToAmount] = useState(props.toAmount ?? 0);\n  const [isClosingNewAccounts, setIsClosingNewAccounts] = useState(false);\n  const [slippage, setSlippage] = useState(DEFAULT_SLIPPAGE_PERCENT);\n  const [fairOverride, setFairOverride] = useState<number | null>(null);\n  const fair = _useSwapFair(fromMint, toMint, fairOverride);\n  const referral = props.referral;\n\n  assert.ok(slippage >= 0);\n\n  const swapToFromMints = () => {\n    const oldFrom = fromMint;\n    const oldFromAmount = fromAmount;\n    const oldTo = toMint;\n    const oldToAmount = toAmount;\n    setFromMint(oldTo);\n    setToMint(oldFrom);\n    _setFromAmount(oldToAmount);\n    _setToAmount(oldFromAmount);\n  };\n\n  const setFromAmount = (amount: number) => {\n    if (fair === undefined) {\n      throw new Error(\"Fair price not found\");\n    }\n    _setFromAmount(amount);\n    _setToAmount(amount / fair);\n  };\n\n  const setToAmount = (amount: number) => {\n    if (fair === undefined) {\n      throw new Error(\"Fair price not found\");\n    }\n    _setToAmount(amount);\n    _setFromAmount(amount * fair);\n  };\n\n  return (\n    <_SwapContext.Provider\n      value={{\n        fromMint,\n        setFromMint,\n        toMint,\n        setToMint,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        swapToFromMints,\n        slippage,\n        setSlippage,\n        fairOverride,\n        setFairOverride,\n        isClosingNewAccounts,\n        setIsClosingNewAccounts,\n        referral,\n      }}\n    >\n      {props.children}\n    </_SwapContext.Provider>\n  );\n}\n\nexport function useSwapContext(): SwapContext {\n  const ctx = useContext(_SwapContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useSwapFair(): number | undefined {\n  const { fairOverride, fromMint, toMint } = useSwapContext();\n  return _useSwapFair(fromMint, toMint, fairOverride);\n}\n\nfunction _useSwapFair(\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  fairOverride: number | null\n): number | undefined {\n  const fairRoute = useFairRoute(fromMint, toMint);\n  const fair = fairOverride === null ? fairRoute : fairOverride;\n  return fair;\n}\n\n// Returns true if the user can swap with the current context.\nexport function useCanSwap(): boolean {\n  const { fromMint, toMint, fromAmount, toAmount } = useSwapContext();\n  const { swapClient } = useDexContext();\n  const { wormholeMap, solletMap } = useTokenListContext();\n  const route = useRouteVerbose(fromMint, toMint);\n  if (route === null) {\n    return false;\n  }\n\n  return (\n    // Mints are distinct.\n    fromMint.equals(toMint) === false &&\n    // Wallet is connected.\n    swapClient.program.provider.wallet.publicKey !== null &&\n    // Trade amounts greater than zero.\n    fromAmount > 0 &&\n    toAmount > 0 &&\n    // Trade route exists.\n    route !== null &&\n    // Wormhole <-> native markets must have the wormhole token as the\n    // *from* address since they're one-sided markets.\n    (route.kind !== \"wormhole-native\" ||\n      wormholeMap\n        .get(fromMint.toString())\n        ?.tags?.includes(SPL_REGISTRY_WORM_TAG) !== undefined) &&\n    // Wormhole <-> sollet markets must have the sollet token as the\n    // *from* address since they're one sided markets.\n    (route.kind !== \"wormhole-sollet\" ||\n      solletMap\n        .get(fromMint.toString())\n        ?.tags?.includes(SPL_REGISTRY_SOLLET_TAG) !== undefined)\n  );\n}\n\nexport function useReferral(fromMarket?: Market): PublicKey | undefined {\n  const { referral } = useSwapContext();\n  const asyncReferral = useAsync(async () => {\n    if (!referral) {\n      return undefined;\n    }\n    if (!fromMarket) {\n      return undefined;\n    }\n    if (\n      !fromMarket.quoteMintAddress.equals(USDC_MINT) &&\n      !fromMarket.quoteMintAddress.equals(USDT_MINT)\n    ) {\n      return undefined;\n    }\n\n    return Token.getAssociatedTokenAddress(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      fromMarket.quoteMintAddress,\n      referral\n    );\n  }, [fromMarket]);\n\n  if (!asyncReferral.result) {\n    return undefined;\n  }\n  return asyncReferral.result;\n}\n","// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet.\n\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport {\n  TOKEN_PROGRAM_ID,\n  AccountInfo as TokenAccount,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as bs58 from \"bs58\";\n\nexport async function getOwnedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey\n) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection._rpcRequest(\"getProgramAccounts\", [\n    TOKEN_PROGRAM_ID.toBase58(),\n    {\n      commitment: connection.commitment,\n      filters,\n    },\n  ]);\n  if (resp.error) {\n    throw new Error(\n      \"failed to get token accounts owned by \" +\n        publicKey.toBase58() +\n        \": \" +\n        resp.error.message\n    );\n  }\n  return resp.result\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data: bs58.decode(data),\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .filter(({ accountInfo }: any) => {\n      // TODO: remove this check once mainnet is updated\n      return filters.every((filter) => {\n        if (filter.dataSize) {\n          return accountInfo.data.length === filter.dataSize;\n        } else if (filter.memcmp) {\n          let filterBytes = bs58.decode(filter.memcmp.bytes);\n          return accountInfo.data\n            .slice(\n              filter.memcmp.offset,\n              filter.memcmp.offset + filterBytes.length\n            )\n            .equals(filterBytes);\n        }\n        return false;\n      });\n    })\n    .map(({ publicKey, accountInfo }: any) => {\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\n    });\n}\n\nconst ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, \"mint\"),\n  BufferLayout.blob(32, \"owner\"),\n  BufferLayout.nu64(\"amount\"),\n  BufferLayout.blob(93),\n]);\n\nconst MINT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(44),\n  BufferLayout.u8(\"decimals\"),\n  BufferLayout.blob(37),\n]);\n\nexport function parseTokenAccountData(data: Buffer): TokenAccount {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  // @ts-ignore\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount),\n  };\n}\n\nexport function parseMintData(data: Buffer) {\n  // @ts-ignore\n  let { decimals } = MINT_LAYOUT.decode(data);\n  return { decimals };\n}\n\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport * as assert from \"assert\";\nimport { useAsync } from \"react-async-hook\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { PublicKey, Account } from \"@solana/web3.js\";\nimport {\n  MintInfo,\n  AccountInfo as TokenAccount,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { getOwnedTokenAccounts, parseTokenAccountData } from \"../utils/tokens\";\n\nexport type TokenContext = {\n  provider: Provider;\n};\nconst _TokenContext = React.createContext<TokenContext | null>(null);\n\nexport function TokenContextProvider(props: any) {\n  const provider = props.provider;\n  const [, setRefresh] = useState(0);\n\n  // Fetch all the owned token accounts for the wallet.\n  useEffect(() => {\n    if (!provider.wallet.publicKey) {\n      _OWNED_TOKEN_ACCOUNTS_CACHE.length = 0;\n      setRefresh((r) => r + 1);\n      return;\n    }\n    getOwnedTokenAccounts(provider.connection, provider.wallet.publicKey).then(\n      (accs) => {\n        if (accs) {\n          _OWNED_TOKEN_ACCOUNTS_CACHE.push(...accs);\n          setRefresh((r) => r + 1);\n        }\n      }\n    );\n  }, [provider.wallet.publicKey, provider.connection]);\n\n  return (\n    <_TokenContext.Provider\n      value={{\n        provider,\n      }}\n    >\n      {props.children}\n    </_TokenContext.Provider>\n  );\n}\n\nfunction useTokenContext() {\n  const ctx = useContext(_TokenContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\n// Null => none exists.\n// Undefined => loading.\nexport function useOwnedTokenAccount(\n  mint?: PublicKey\n): { publicKey: PublicKey; account: TokenAccount } | null | undefined {\n  const { provider } = useTokenContext();\n  const [, setRefresh] = useState(0);\n  const tokenAccounts = _OWNED_TOKEN_ACCOUNTS_CACHE.filter(\n    (account) => mint && account.account.mint.equals(mint)\n  );\n\n  // Take the account with the most tokens in it.\n  tokenAccounts.sort((a, b) =>\n    a.account.amount < b.account.amount\n      ? -1\n      : a.account.amount > b.account.amount\n      ? 1\n      : 0\n  );\n\n  const tokenAccount = tokenAccounts[0];\n\n  // Stream updates when the balance changes.\n  useEffect(() => {\n    let listener: number;\n    if (tokenAccount) {\n      listener = provider.connection.onAccountChange(\n        tokenAccount.publicKey,\n        (info) => {\n          const token = parseTokenAccountData(info.data);\n          if (token.amount !== tokenAccount.account.amount) {\n            const index = _OWNED_TOKEN_ACCOUNTS_CACHE.indexOf(tokenAccount);\n            assert.ok(index >= 0);\n            _OWNED_TOKEN_ACCOUNTS_CACHE[index].account = token;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        provider.connection.removeAccountChangeListener(listener);\n      }\n    };\n  }, [provider.connection, tokenAccount]);\n\n  if (mint === undefined) {\n    return undefined;\n  }\n\n  if (tokenAccounts.length === 0) {\n    return null;\n  }\n\n  return tokenAccount;\n}\n\nexport function useMint(mint?: PublicKey): MintInfo | undefined | null {\n  const { provider } = useTokenContext();\n  // Lazy load the mint account if needeed.\n  const asyncMintInfo = useAsync(async () => {\n    if (!mint) {\n      return undefined;\n    }\n    if (_MINT_CACHE.get(mint.toString())) {\n      return _MINT_CACHE.get(mint.toString());\n    }\n\n    const mintClient = new Token(\n      provider.connection,\n      mint,\n      TOKEN_PROGRAM_ID,\n      new Account()\n    );\n    const mintInfo = await mintClient.getMintInfo();\n    _MINT_CACHE.set(mint.toString(), mintInfo);\n    return mintInfo;\n  }, [provider.connection, mint]);\n\n  if (asyncMintInfo.result) {\n    return asyncMintInfo.result;\n  }\n  return undefined;\n}\n\n// Cache storing all token accounts for the connected wallet provider.\nconst _OWNED_TOKEN_ACCOUNTS_CACHE: Array<{\n  publicKey: PublicKey;\n  account: TokenAccount;\n}> = [];\n\n// Cache storing all previously fetched mint infos.\nconst _MINT_CACHE = new Map<string, MintInfo>();\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  List,\n  ListItem,\n  Typography,\n  Tabs,\n  Tab,\n} from \"@material-ui/core\";\nimport { TokenIcon } from \"./Swap\";\nimport { useSwappableTokens } from \"../context/TokenList\";\n\nconst useStyles = makeStyles(() => ({\n  dialogContent: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  textField: {\n    width: \"100%\",\n    border: \"solid 1pt #ccc\",\n    borderRadius: \"10px\",\n    marginBottom: \"8px\",\n  },\n  tab: {\n    minWidth: \"134px\",\n  },\n}));\n\nexport default function TokenDialog({\n  open,\n  onClose,\n  setMint,\n}: {\n  open: boolean;\n  onClose: () => void;\n  setMint: (mint: PublicKey) => void;\n}) {\n  const [tabSelection, setTabSelection] = useState(0);\n  const [tokenFilter, setTokenFilter] = useState(\"\");\n  const filter = tokenFilter.toLowerCase();\n  const styles = useStyles();\n  const { swappableTokens, swappableTokensSollet, swappableTokensWormhole } =\n    useSwappableTokens();\n  const selectedTokens =\n    tabSelection === 0\n      ? swappableTokens\n      : tabSelection === 1\n      ? swappableTokensWormhole\n      : swappableTokensSollet;\n  let tokens =\n    tokenFilter === \"\"\n      ? selectedTokens\n      : selectedTokens.filter(\n          (t) =>\n            t.symbol.toLowerCase().startsWith(filter) ||\n            t.name.toLowerCase().startsWith(filter) ||\n            t.address.toLowerCase().startsWith(filter)\n        );\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      scroll={\"paper\"}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n          width: \"420px\",\n        },\n      }}\n    >\n      <DialogTitle style={{ fontWeight: \"bold\" }}>\n        <Typography variant=\"h6\" style={{ paddingBottom: \"16px\" }}>\n          Select a token\n        </Typography>\n        <TextField\n          className={styles.textField}\n          placeholder={\"Search name\"}\n          value={tokenFilter}\n          onChange={(e) => setTokenFilter(e.target.value)}\n          InputProps={{\n            disableUnderline: true,\n            style: { padding: \"10px\" },\n          }}\n        />\n      </DialogTitle>\n      <DialogContent className={styles.dialogContent} dividers={true}>\n        <List disablePadding>\n          {tokens.map((tokenInfo: TokenInfo) => (\n            <TokenListItem\n              key={tokenInfo.address}\n              tokenInfo={tokenInfo}\n              onClick={(mint) => {\n                setMint(mint);\n                onClose();\n              }}\n            />\n          ))}\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Tabs value={tabSelection} onChange={(e, v) => setTabSelection(v)}>\n          <Tab value={0} className={styles.tab} label=\"Main\" />\n          <Tab value={1} className={styles.tab} label=\"Wormhole\" />\n          <Tab value={2} className={styles.tab} label=\"Sollet\" />\n        </Tabs>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction TokenListItem({\n  tokenInfo,\n  onClick,\n}: {\n  tokenInfo: TokenInfo;\n  onClick: (mint: PublicKey) => void;\n}) {\n  const mint = new PublicKey(tokenInfo.address);\n  return (\n    <ListItem button onClick={() => onClick(mint)}>\n      <TokenIcon mint={mint} style={{ width: \"30px\", borderRadius: \"15px\" }} />\n      <TokenName tokenInfo={tokenInfo} />\n    </ListItem>\n  );\n}\n\nfunction TokenName({ tokenInfo }: { tokenInfo: TokenInfo }) {\n  return (\n    <div style={{ marginLeft: \"16px\" }}>\n      <Typography style={{ fontWeight: \"bold\" }}>\n        {tokenInfo?.symbol}\n      </Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n        {tokenInfo?.name}\n      </Typography>\n    </div>\n  );\n}\n","import { useState, useMemo } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { MintInfo } from \"@solana/spl-token\";\nimport { BN } from \"@project-serum/anchor\";\nimport { OpenOrders } from \"@project-serum/serum\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogContent,\n  Paper,\n  Table,\n  TableRow,\n  TableHead,\n  TableCell,\n  TableBody,\n  TableContainer,\n  IconButton,\n  Typography,\n  Button,\n  Select,\n  MenuItem,\n  Link,\n} from \"@material-ui/core\";\nimport { Close } from \"@material-ui/icons\";\nimport { useMarket, useOpenOrders, useDexContext } from \"../context/Dex\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useMint, useOwnedTokenAccount } from \"../context/Token\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {},\n  closeAccountSwitchLabel: {\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function OpenOrdersDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog\n      maxWidth=\"lg\"\n      open={open}\n      onClose={onClose}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n        },\n      }}\n    >\n      <div>\n        <div\n          style={{\n            height: \"24px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <IconButton\n            onClick={onClose}\n            style={{\n              padding: 0,\n              position: \"absolute\",\n              right: \"8px\",\n              top: \"8px\",\n            }}\n          >\n            <Close />\n          </IconButton>\n        </div>\n        <DialogContent style={{ paddingTop: 0 }}>\n          <OpenOrdersAccounts />\n        </DialogContent>\n      </div>\n    </Dialog>\n  );\n}\n\nfunction OpenOrdersAccounts() {\n  const styles = useStyles();\n  const openOrders = useOpenOrders();\n  const openOrdersEntries: Array<[PublicKey, OpenOrders[]]> = useMemo(() => {\n    return Array.from(openOrders.entries()).map(([market, oo]) => [\n      new PublicKey(market),\n      oo,\n    ]);\n  }, [openOrders]);\n  return (\n    <TableContainer component={Paper} elevation={0}>\n      <Table className={styles.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Market</TableCell>\n            <TableCell align=\"center\">Open Orders Account</TableCell>\n            <TableCell align=\"center\">Base Used</TableCell>\n            <TableCell align=\"center\">Base Free</TableCell>\n            <TableCell align=\"center\">Quote Used</TableCell>\n            <TableCell align=\"center\">Quote Free</TableCell>\n            <TableCell align=\"center\">Settle</TableCell>\n            <TableCell align=\"center\">Close</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {openOrdersEntries.map(([market, oos]) => {\n            return (\n              <OpenOrdersRow\n                key={market.toString()}\n                market={market}\n                openOrders={oos}\n              />\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction OpenOrdersRow({\n  market,\n  openOrders,\n}: {\n  market: PublicKey;\n  openOrders: Array<OpenOrders>;\n}) {\n  const [ooAccount, setOoAccount] = useState(openOrders[0]);\n  const { swapClient } = useDexContext();\n  const marketClient = useMarket(market);\n  const tokenMap = useTokenMap();\n  const base = useMint(marketClient?.baseMintAddress);\n  const quote = useMint(marketClient?.quoteMintAddress);\n  const baseWallet = useOwnedTokenAccount(marketClient?.baseMintAddress);\n  const quoteWallet = useOwnedTokenAccount(marketClient?.quoteMintAddress);\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const marketName =\n    baseTicker && quoteTicker\n      ? `${baseTicker} / ${quoteTicker}`\n      : market.toString();\n  const settleDisabled =\n    ooAccount.baseTokenFree.toNumber() + ooAccount.quoteTokenFree.toNumber() ===\n    0;\n  const closeDisabled =\n    ooAccount.baseTokenTotal.toNumber() +\n      ooAccount.quoteTokenTotal.toNumber() !==\n    0;\n\n  const settleFunds = async () => {\n    if (!marketClient) {\n      throw new Error(\"Market client not found\");\n    }\n    if (!baseWallet || !quoteWallet) {\n      throw new Error(\"Base or quote wallet not found\");\n    }\n    const referrerWallet = undefined;\n    const { transaction, signers } =\n      await marketClient.makeSettleFundsTransaction(\n        swapClient.program.provider.connection,\n        ooAccount,\n        baseWallet.publicKey,\n        quoteWallet.publicKey,\n        referrerWallet\n      );\n    await swapClient.program.provider.send(transaction, signers);\n  };\n\n  const closeOpenOrders = async () => {\n    // TODO.\n    //\n    // Blocked by https://github.com/project-serum/serum-dex/pull/112.\n  };\n\n  return (\n    <TableRow key={market.toString()}>\n      <TableCell component=\"th\" scope=\"row\">\n        <Typography>\n          <Link\n            href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            {marketName}\n          </Link>\n        </Typography>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Select\n          value={ooAccount.address.toString()}\n          onChange={(e) =>\n            setOoAccount(\n              openOrders.filter(\n                (oo) => oo.address.toString() === e.target.value\n              )[0]\n            )\n          }\n        >\n          {openOrders.map((oo) => {\n            return (\n              <MenuItem\n                key={oo.address.toString()}\n                value={oo.address.toString()}\n              >\n                {oo.address.toString()}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenTotal.sub(ooAccount.baseTokenFree))}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(\n          quote,\n          ooAccount.quoteTokenTotal.sub(ooAccount.quoteTokenFree)\n        )}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(quote, ooAccount.quoteTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button color=\"primary\" disabled={settleDisabled} onClick={settleFunds}>\n          Settle\n        </Button>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button\n          color=\"secondary\"\n          disabled={closeDisabled}\n          onClick={closeOpenOrders}\n        >\n          Close\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n}\n\nfunction toDisplay(mintInfo: MintInfo | undefined | null, value: BN): string {\n  if (!mintInfo) {\n    return value.toNumber().toString();\n  }\n  return (value.toNumber() / 10 ** mintInfo.decimals).toFixed(\n    mintInfo.decimals\n  );\n}\n","import { useState } from \"react\";\nimport {\n  makeStyles,\n  Popover,\n  IconButton,\n  Typography,\n  Button,\n  TextField,\n  InputAdornment,\n  Switch,\n  FormControlLabel,\n  FormGroup,\n} from \"@material-ui/core\";\nimport { ToggleButton } from \"@material-ui/lab\";\nimport { SettingsOutlined as Settings } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport { useDexContext } from \"../context/Dex\";\nimport OpenOrdersDialog from \"./OpenOrdersDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  tab: {\n    width: \"50%\",\n  },\n  table: {},\n  settingsButton: {\n    padding: 0,\n  },\n  closeAccountSwitchLabel: {\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport function SettingsButton() {\n  const styles = useStyles();\n\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.settingsButton}\n            >\n              <Settings />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{ style: { borderRadius: \"10px\" } }}\n            >\n              <SettingsDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction SettingsDetails() {\n  const { slippage, setSlippage, fairOverride, setFairOverride } =\n    useSwapContext();\n  const [showSettingsDialog, setShowSettingsDialog] = useState(false);\n  const fair = useSwapFair();\n  const { swapClient } = useDexContext();\n\n  const setSlippageHandler = (value?: number) => {\n    setSlippage(!value || value < 0 ? 0 : value);\n  };\n\n  return (\n    <div style={{ padding: \"15px\", width: \"305px\" }}>\n      <Typography color=\"textSecondary\" style={{ fontWeight: \"bold\" }}>\n        Settings\n      </Typography>\n      <div style={{ marginTop: \"10px\" }}>\n        <div>\n          <Typography color=\"textSecondary\">Slippage tolerance</Typography>\n          <TextField\n            type=\"number\"\n            placeholder=\"Error tolerance percentage\"\n            value={slippage}\n            onChange={(e) => setSlippageHandler(parseFloat(e.target.value))}\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n          />\n        </div>\n        <div style={{ marginTop: \"5px\" }}>\n          <Typography color=\"textSecondary\">Fair price</Typography>\n          <div style={{ display: \"flex\" }}>\n            <TextField\n              type=\"number\"\n              placeholder=\"Fair price override\"\n              value={fair}\n              onChange={(e) => setFairOverride(parseFloat(e.target.value))}\n              style={{\n                marginRight: \"10px\",\n                flex: 1,\n                display: \"flex\",\n                justifyContent: \"center\",\n                flexDirection: \"column\",\n              }}\n              disabled={fairOverride === null}\n            />\n            <ToggleButton\n              value=\"bold\"\n              selected={fairOverride === null}\n              onClick={() => {\n                if (fair === undefined) {\n                  console.error(\"Fair is undefined\");\n                  return;\n                }\n                if (fairOverride === null) {\n                  setFairOverride(fair);\n                } else {\n                  setFairOverride(null);\n                }\n              }}\n              style={{\n                paddingTop: \"3px\",\n                paddingBottom: \"3px\",\n                paddingLeft: \"5px\",\n                paddingRight: \"5px\",\n                borderRadius: \"20px\",\n              }}\n            >\n              Auto\n            </ToggleButton>\n          </div>\n        </div>\n        <div style={{ marginTop: \"5px\" }}>\n          <CloseNewAccountsSwitch />\n        </div>\n        <Button\n          style={{\n            width: \"100%\",\n            marginTop: \"10px\",\n            background: \"#e0e0e0\",\n          }}\n          disabled={swapClient.program.provider.wallet.publicKey === null}\n          onClick={() => setShowSettingsDialog(true)}\n        >\n          Manage Dex Accounts\n        </Button>\n      </div>\n      <OpenOrdersDialog\n        open={showSettingsDialog}\n        onClose={() => setShowSettingsDialog(false)}\n      />\n    </div>\n  );\n}\n\nfunction CloseNewAccountsSwitch() {\n  const styles = useStyles();\n  const { isClosingNewAccounts, setIsClosingNewAccounts } = useSwapContext();\n\n  return (\n    <FormGroup row>\n      <FormControlLabel\n        classes={{ label: styles.closeAccountSwitchLabel }}\n        labelPlacement=\"start\"\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          marginLeft: 0,\n          width: \"100%\",\n        }}\n        control={\n          <Switch\n            checked={isClosingNewAccounts}\n            onChange={() => setIsClosingNewAccounts(!isClosingNewAccounts)}\n            color=\"primary\"\n          />\n        }\n        label=\"Close new accounts\"\n      />\n    </FormGroup>\n  );\n}\n","import {\n  makeStyles,\n  Typography,\n  Link,\n  Popover,\n  IconButton,\n} from \"@material-ui/core\";\nimport { Info } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport { useMint } from \"../context/Token\";\nimport { useRoute, useMarketName, useBbo } from \"../context/Dex\";\n\nconst useStyles = makeStyles((theme) => ({\n  infoLabel: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n  },\n  fairPriceLabel: {\n    marginRight: \"10px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    color: theme.palette.text.secondary,\n  },\n  infoButton: {\n    padding: 0,\n  },\n}));\n\nexport function InfoLabel() {\n  const styles = useStyles();\n\n  const { fromMint, toMint } = useSwapContext();\n  const fromMintInfo = useMint(fromMint);\n  const fair = useSwapFair();\n\n  const tokenMap = useTokenMap();\n  let fromTokenInfo = tokenMap.get(fromMint.toString());\n  let toTokenInfo = tokenMap.get(toMint.toString());\n\n  return (\n    <div className={styles.infoLabel}>\n      <Typography color=\"textSecondary\"></Typography>\n      <div style={{ display: \"flex\" }}>\n        <div className={styles.fairPriceLabel}>\n          {fair !== undefined && toTokenInfo && fromTokenInfo\n            ? `1 ${toTokenInfo.symbol} = ${fair.toFixed(\n                fromMintInfo?.decimals\n              )} ${fromTokenInfo.symbol}`\n            : `-`}\n        </div>\n        <InfoButton />\n      </div>\n    </div>\n  );\n}\n\nfunction InfoButton() {\n  const styles = useStyles();\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div style={{ display: \"flex\" }}>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.infoButton}\n            >\n              <Info />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{ style: { borderRadius: \"10px\" } }}\n              disableRestoreFocus\n            >\n              <InfoDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction InfoDetails() {\n  const { fromMint, toMint } = useSwapContext();\n  const route = useRoute(fromMint, toMint);\n  const tokenMap = useTokenMap();\n  const fromMintTicker = tokenMap.get(fromMint.toString())?.symbol;\n  const toMintTicker = tokenMap.get(toMint.toString())?.symbol;\n  const addresses = [\n    { ticker: fromMintTicker, mint: fromMint },\n    { ticker: toMintTicker, mint: toMint },\n  ];\n\n  return (\n    <div style={{ padding: \"15px\", width: \"250px\" }}>\n      <div>\n        <Typography\n          color=\"textSecondary\"\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\n        >\n          Trade Route\n        </Typography>\n        {route ? (\n          route.map((market: PublicKey) => {\n            return <MarketRoute key={market.toString()} market={market} />;\n          })\n        ) : (\n          <Typography color=\"textSecondary\">Route not found</Typography>\n        )}\n      </div>\n      <div style={{ marginTop: \"15px\" }}>\n        <Typography\n          color=\"textSecondary\"\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\n        >\n          Tokens\n        </Typography>\n        {addresses.map((address) => {\n          return (\n            <div\n              key={address.mint.toString()}\n              style={{\n                marginTop: \"5px\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Link\n                href={`https://explorer.solana.com/address/${address.mint.toString()}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                {address.ticker}\n              </Link>\n              <code style={{ width: \"128px\", overflow: \"hidden\" }}>\n                {address.mint.toString()}\n              </code>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction MarketRoute({ market }: { market: PublicKey }) {\n  const marketName = useMarketName(market);\n  const bbo = useBbo(market);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginTop: \"5px\",\n      }}\n    >\n      <Link\n        href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        {marketName}\n      </Link>\n      <code style={{ marginLeft: \"10px\" }}>\n        {bbo && bbo.mid ? bbo.mid.toFixed(6) : \"-\"}\n      </code>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { BN } from \"@project-serum/anchor\";\nimport {\n  makeStyles,\n  Card,\n  Button,\n  Paper,\n  Typography,\n  TextField,\n} from \"@material-ui/core\";\nimport { ExpandMore } from \"@material-ui/icons\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport {\n  useDexContext,\n  useOpenOrders,\n  useRouteVerbose,\n  useMarket,\n  BASE_TAKER_FEE_BPS,\n} from \"../context/Dex\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useMint, useOwnedTokenAccount } from \"../context/Token\";\nimport { useCanSwap, useReferral } from \"../context/Swap\";\nimport TokenDialog from \"./TokenDialog\";\nimport { SettingsButton } from \"./Settings\";\nimport { InfoLabel } from \"./Info\";\n\nconst useStyles = makeStyles(() => ({\n  card: {\n    width: \"450px\",\n    borderRadius: \"10px\",\n    border: \"solid 1pt #e0e0e0\",\n  },\n  cardContent: {\n    marginLeft: \"6px\",\n    marginRight: \"6px\",\n    marginBottom: \"6px\",\n  },\n  tab: {\n    width: \"50%\",\n  },\n  settingsButton: {\n    padding: 0,\n  },\n  swapButton: {\n    width: \"100%\",\n    borderRadius: \"15px\",\n  },\n  swapToFromButton: {\n    display: \"block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n}));\n\nexport default function SwapCard({ style }: { style?: any }) {\n  const styles = useStyles();\n  return (\n    <div style={style}>\n      <Card className={styles.card}>\n        <SwapHeader />\n        <div className={styles.cardContent}>\n          <SwapFromForm />\n          <ArrowButton />\n          <SwapToForm />\n          <InfoLabel />\n          <SwapButton />\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nfunction SwapHeader() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        margin: \"8px\",\n      }}\n    >\n      <Typography\n        style={{\n          fontWeight: \"bold\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        Swap\n      </Typography>\n      <SettingsButton />\n    </div>\n  );\n}\n\nexport function ArrowButton() {\n  const styles = useStyles();\n  const { swapToFromMints } = useSwapContext();\n  return (\n    <Button className={styles.swapToFromButton} onClick={swapToFromMints}>\n      ⇅\n    </Button>\n  );\n}\n\nfunction SwapFromForm() {\n  const { fromMint, setFromMint, fromAmount, setFromAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      mint={fromMint}\n      setMint={setFromMint}\n      amount={fromAmount}\n      setAmount={setFromAmount}\n    />\n  );\n}\n\nfunction SwapToForm() {\n  const { toMint, setToMint, toAmount, setToAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      mint={toMint}\n      setMint={setToMint}\n      amount={toAmount}\n      setAmount={setToAmount}\n    />\n  );\n}\n\nfunction SwapTokenForm({\n  mint,\n  setMint,\n  amount,\n  setAmount,\n}: {\n  mint: PublicKey;\n  setMint: (m: PublicKey) => void;\n  amount: number;\n  setAmount: (a: number) => void;\n}) {\n  const [showTokenDialog, setShowTokenDialog] = useState(false);\n  const tokenAccount = useOwnedTokenAccount(mint);\n  const mintAccount = useMint(mint);\n\n  return (\n    <Paper elevation={0} variant=\"outlined\" style={{ borderRadius: \"10px\" }}>\n      <div\n        style={{\n          height: \"50px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <TokenButton mint={mint} onClick={() => setShowTokenDialog(true)} />\n        <TextField\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(parseFloat(e.target.value))}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        />\n      </div>\n      <div style={{ marginLeft: \"10px\", height: \"30px\" }}>\n        <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n          {tokenAccount && mintAccount\n            ? `Balance: ${(\n                tokenAccount.account.amount.toNumber() /\n                10 ** mintAccount.decimals\n              ).toFixed(mintAccount.decimals)}`\n            : `-`}\n        </Typography>\n      </div>\n      <TokenDialog\n        setMint={setMint}\n        open={showTokenDialog}\n        onClose={() => setShowTokenDialog(false)}\n      />\n    </Paper>\n  );\n}\n\nfunction TokenButton({\n  mint,\n  onClick,\n}: {\n  mint: PublicKey;\n  onClick: () => void;\n}) {\n  return (\n    <Button onClick={onClick} style={{ minWidth: \"116px\" }}>\n      <TokenIcon mint={mint} style={{ width: \"25px\", borderRadius: \"13px\" }} />\n      <TokenName mint={mint} />\n      <ExpandMore />\n    </Button>\n  );\n}\n\nexport function TokenIcon({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenMap = useTokenMap();\n  let tokenInfo = tokenMap.get(mint.toString());\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {tokenInfo?.logoURI ? (\n        <img alt=\"Logo\" style={style} src={tokenInfo?.logoURI} />\n      ) : (\n        <div style={style}></div>\n      )}\n    </div>\n  );\n}\n\nfunction TokenName({ mint }: { mint: PublicKey }) {\n  const tokenMap = useTokenMap();\n  let tokenInfo = tokenMap.get(mint.toString());\n  return (\n    <Typography style={{ marginLeft: \"5px\" }}>{tokenInfo?.symbol}</Typography>\n  );\n}\n\nfunction SwapButton() {\n  const styles = useStyles();\n  const { fromMint, toMint, fromAmount, slippage, isClosingNewAccounts } =\n    useSwapContext();\n  const { swapClient } = useDexContext();\n  const fromMintInfo = useMint(fromMint);\n  const toMintInfo = useMint(toMint);\n  const openOrders = useOpenOrders();\n  const route = useRouteVerbose(fromMint, toMint);\n  const fromMarket = useMarket(\n    route && route.markets ? route.markets[0] : undefined\n  );\n  const toMarket = useMarket(\n    route && route.markets ? route.markets[1] : undefined\n  );\n  const canSwap = useCanSwap();\n  const referral = useReferral(fromMarket);\n  const fair = useSwapFair();\n\n  // Click handler.\n  const sendSwapTransaction = async () => {\n    if (!fromMintInfo || !toMintInfo) {\n      throw new Error(\"Unable to calculate mint decimals\");\n    }\n    if (!fair) {\n      throw new Error(\"Invalid fair\");\n    }\n    const amount = new BN(fromAmount).mul(\n      new BN(10).pow(new BN(fromMintInfo.decimals))\n    );\n    const minExchangeRate = {\n      rate: new BN(10 ** toMintInfo.decimals * (1 - BASE_TAKER_FEE_BPS))\n        .divn(fair)\n        .muln(100 - slippage)\n        .divn(100),\n      decimals: fromMintInfo.decimals,\n    };\n    const fromOpenOrders = fromMarket\n      ? openOrders.get(fromMarket?.address.toString())\n      : undefined;\n    const toOpenOrders = toMarket\n      ? openOrders.get(toMarket?.address.toString())\n      : undefined;\n    await swapClient.swap({\n      fromMint,\n      toMint,\n      amount,\n      minExchangeRate,\n      referral,\n      // Pass in the below parameters so that the client doesn't perform\n      // wasteful network requests when we already have the data.\n      fromMarket,\n      toMarket,\n      fromOpenOrders: fromOpenOrders ? fromOpenOrders[0].address : undefined,\n      toOpenOrders: toOpenOrders ? toOpenOrders[0].address : undefined,\n      // Auto close newly created open orders accounts.\n      close: isClosingNewAccounts,\n    });\n  };\n  return (\n    <Button\n      variant=\"contained\"\n      className={styles.swapButton}\n      onClick={sendSwapTransaction}\n      disabled={!canSwap}\n    >\n      Swap\n    </Button>\n  );\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { TokenListContainer } from \"@solana/spl-token-registry\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport { SwapContextProvider } from \"./context/Swap\";\nimport { DexContextProvider } from \"./context/Dex\";\nimport { TokenListContextProvider } from \"./context/TokenList\";\nimport { TokenContextProvider } from \"./context/Token\";\nimport SwapCard from \"./components/Swap\";\n\n// The swap module exports a single `Swap` component that can be embedded into\n// applications.\nexport default function Swap({\n  style,\n  provider,\n  tokenList,\n  fromMint,\n  toMint,\n  fromAmount,\n  toAmount,\n  referral,\n}: {\n  provider: Provider;\n  tokenList: TokenListContainer;\n  fromMint?: PublicKey;\n  toMint?: PublicKey;\n  fromAmount?: number;\n  toAmount?: number;\n  referral?: PublicKey;\n  style?: any;\n}) {\n  const swapClient = new SwapClient(provider, tokenList);\n  return (\n    <TokenListContextProvider tokenList={tokenList}>\n      <TokenContextProvider provider={provider}>\n        <DexContextProvider swapClient={swapClient}>\n          <SwapContextProvider\n            fromMint={fromMint}\n            toMint={toMint}\n            fromAmount={fromAmount}\n            toAmount={toAmount}\n            referral={referral}\n          >\n            <SwapCard style={style} />\n          </SwapContextProvider>\n        </DexContextProvider>\n      </TokenContextProvider>\n    </TokenListContextProvider>\n  );\n}\n","import { useState, useEffect, useMemo } from \"react\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport { Button } from \"@material-ui/core\";\nimport { Provider } from \"@project-serum/anchor\";\n// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {\n  Account,\n  ConfirmOptions,\n  Connection,\n  Transaction,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport {\n  TokenListContainer,\n  TokenListProvider,\n} from \"@solana/spl-token-registry\";\nimport Swap from \"./swap\";\nimport \"./App.css\";\n\n// App illustrating the use of the Swap component.\n//\n// One needs to just provide an Anchor `Provider` and a `TokenListContainer`\n// to the `Swap` component, and then everything else is taken care of.\nfunction App() {\n  return (\n    <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n      <AppInner />\n    </SnackbarProvider>\n  );\n}\n\nfunction AppInner() {\n  const { enqueueSnackbar } = useSnackbar();\n  const [isConnected, setIsConnected] = useState(false);\n  const [tokenList, setTokenList] = useState<TokenListContainer | null>(null);\n\n  const [provider, wallet] = useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    const network = \"https://solana-api.projectserum.com\";\n    const wallet = new Wallet(\"https://www.sollet.io\", network);\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new NotifyingProvider(\n      connection,\n      wallet,\n      opts,\n      (tx, err) => {\n        if (err) {\n          enqueueSnackbar(`Error: ${err.toString()}`, {\n            variant: \"error\",\n          });\n        } else {\n          enqueueSnackbar(\"Transaction sent\", {\n            variant: \"success\",\n            action: (\n              <Button\n                color=\"inherit\"\n                component=\"a\"\n                target=\"_blank\"\n                rel=\"noopener\"\n                href={`https://explorer.solana.com/tx/${tx}`}\n              >\n                View on Solana Explorer\n              </Button>\n            ),\n          });\n        }\n      }\n    );\n    return [provider, wallet];\n  }, [enqueueSnackbar]);\n\n  useEffect(() => {\n    new TokenListProvider().resolve().then(setTokenList);\n  }, [setTokenList]);\n\n  // Connect to the wallet.\n  useEffect(() => {\n    wallet.on(\"connect\", () => {\n      enqueueSnackbar(\"Wallet connected\", { variant: \"success\" });\n      setIsConnected(true);\n    });\n    wallet.on(\"disconnect\", () => {\n      enqueueSnackbar(\"Wallet disconnected\", { variant: \"info\" });\n      setIsConnected(false);\n    });\n  }, [wallet, enqueueSnackbar]);\n\n  return (\n    <div\n      style={{\n        width: \"450px\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        position: \"absolute\",\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Button\n        variant=\"outlined\"\n        onClick={() => (!isConnected ? wallet.connect() : wallet.disconnect())}\n        style={{ position: \"fixed\", right: 24, top: 24 }}\n      >\n        {!isConnected ? \"Connect\" : \"Disconnect\"}\n      </Button>\n      {tokenList && <Swap provider={provider} tokenList={tokenList} />}\n    </div>\n  );\n}\n\n// Custom provider to display notifications whenever a transaction is sent.\n//\n// Note that this is an Anchor wallet/network provider--not a React provider,\n// so all transactions will be flowing through here, which allows us to\n// hook in to display all transactions sent from the `Swap` component\n// as notifications in the parent app.\nclass NotifyingProvider extends Provider {\n  // Function to call whenever the provider sends a transaction;\n  private onTransaction: (\n    tx: TransactionSignature | undefined,\n    err?: Error\n  ) => void;\n\n  constructor(\n    connection: Connection,\n    wallet: Wallet,\n    opts: ConfirmOptions,\n    onTransaction: (tx: TransactionSignature | undefined, err?: Error) => void\n  ) {\n    super(connection, wallet, opts);\n    this.onTransaction = onTransaction;\n  }\n\n  async send(\n    tx: Transaction,\n    signers?: Array<Account | undefined>,\n    opts?: ConfirmOptions\n  ): Promise<TransactionSignature> {\n    try {\n      const txSig = await super.send(tx, signers, opts);\n      this.onTransaction(txSig);\n      return txSig;\n    } catch (err) {\n      this.onTransaction(undefined, err);\n      return \"\";\n    }\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}