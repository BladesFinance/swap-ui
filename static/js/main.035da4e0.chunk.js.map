{"version":3,"sources":["swap/utils/pubkeys.ts","swap/components/context/TokenList.tsx","swap/components/context/Dex.tsx","swap/components/context/Swap.tsx","swap/components/context/Mint.tsx","swap/utils/tokens.ts","swap/components/context/Token.tsx","swap/components/TokenDialog.tsx","swap/components/Settings.tsx","swap/components/Info.tsx","swap/components/Swap.tsx","swap/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SRM_MINT","PublicKey","USDC_MINT","USDT_MINT","DEX_PID","_TokenListContext","React","createContext","TokenListContextProvider","props","tokenList","useMemo","filterByClusterSlug","getList","tokenMap","Map","forEach","t","set","address","swappableTokens","tokens","filter","isUsdxQuoted","extensions","serumV3Usdt","serumV3Usdc","isSol","concat","get","toString","sort","a","b","symbol","swappableTokensSollet","tags","includes","swappableTokensWormhole","Provider","value","children","useTokenListContext","ctx","useContext","Error","useTokenMap","_DexContext","DexContextProvider","useState","ooAccounts","setOoAccounts","marketCache","setMarketCache","orderbookCache","setOrderbookCache","swapClient","useEffect","program","provider","wallet","publicKey","OpenOrders","findForOwner","connection","then","openOrders","newOoAccounts","markets","Set","oo","add","market","push","size","anchor","getMultipleAccounts","map","m","marketAccounts","programAccount","account","Market","getLayout","decode","data","opts","newMarketCache","useDexContext","useOpenOrders","useMarket","asyncMarket","useAsync","undefined","load","marketClient","cache","result","useFair","orderbook","asyncOrderbook","Promise","all","loadBids","loadAsks","bids","asks","useOrderbook","bestBid","items","next","bestOffer","price","useRoute","fromMint","toMint","route","_SwapContext","SwapContextProvider","setFromMint","setToMint","fromAmount","_setFromAmount","toAmount","_setToAmount","isClosingNewAccounts","setIsClosingNewAccounts","slippage","setSlippage","fairOverride","setFairOverride","fair","_useSwapFair","assert","setFromAmount","amount","setToAmount","swapToFromMints","oldFrom","oldFromAmount","oldToAmount","useSwapContext","useSwapFair","fairRoute","fromFair","fromMarket","toFair","length","baseMintAddress","equals","useFairRoute","_MintContext","MintContextProvider","mintCache","setMintCache","useMint","mint","asyncMintInfo","mintClient","Token","TOKEN_PROGRAM_ID","Account","getMintInfo","mintInfo","filters","getOwnedAccountsFilters","_rpcRequest","toBase58","commitment","resp","error","message","pubkey","executable","owner","lamports","accountInfo","bs58","every","dataSize","memcmp","filterBytes","bytes","slice","offset","parseTokenAccountData","ACCOUNT_LAYOUT","BufferLayout","BN","offsetOf","span","_TokenContext","TokenContextProvider","ownedTokenAccounts","setOwnedTokenAccounts","getOwnedTokenAccounts","useOwnedTokenAccount","tokenAccounts","useStyles","makeStyles","dialogContent","paddingTop","textField","width","border","borderRadius","marginBottom","tab","minWidth","TokenDialog","open","onClose","setMint","tabSelection","setTabSelection","tokenFilter","setTokenFilter","toLowerCase","styles","useSwappableTokens","selectedTokens","startsWith","name","Dialog","scroll","PaperProps","style","DialogTitle","fontWeight","Typography","variant","paddingBottom","TextField","className","placeholder","onChange","e","target","InputProps","disableUnderline","padding","DialogContent","dividers","List","disablePadding","tokenInfo","TokenListItem","onClick","DialogActions","Tabs","v","Tab","label","ListItem","button","TokenIcon","TokenName","marginLeft","color","fontSize","theme","table","settingsButton","closeAccountSwitchLabel","palette","text","secondary","SettingsButton","popupState","IconButton","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","SettingsDetails","showSettingsDialog","setShowSettingsDialog","marginTop","type","parseFloat","display","justifyContent","flexDirection","endAdornment","InputAdornment","position","marginRight","flex","disabled","ToggleButton","selected","console","paddingLeft","paddingRight","CloseNewAccountsSwitch","Button","background","SettingsDialog","FormGroup","row","FormControlLabel","classes","labelPlacement","control","Switch","checked","maxWidth","height","right","top","Close","OpenOrdersAccounts","TableContainer","component","Paper","elevation","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","Array","from","entries","oos","OpenOrdersRow","ooAccount","setOoAccount","base","quote","quoteMintAddress","baseWallet","quoteWallet","baseTicker","quoteTicker","marketName","settleDisabled","baseTokenFree","toNumber","quoteTokenFree","closeDisabled","baseTokenTotal","quoteTokenTotal","settleFunds","makeSettleFundsTransaction","transaction","signers","send","closeOpenOrders","scope","Link","href","rel","Select","MenuItem","toDisplay","sub","decimals","toFixed","infoLabel","fairPriceLabel","infoButton","InfoLabel","fromMintInfo","fromTokenInfo","toTokenInfo","InfoButton","Info","disableRestoreFocus","InfoDetails","addresses","ticker","MarketRoute","overflow","useMarketName","card","cardContent","swapButton","swapToFromButton","SwapCard","Card","SwapHeader","SwapFromForm","ArrowButton","SwapToForm","SwapButton","margin","SwapTokenForm","setAmount","showTokenDialog","setShowTokenDialog","tokenAccount","mintAccount","TokenButton","ExpandMore","logoURI","alt","src","toMintInfo","toMarket","sendSwapTransaction","muln","minExpectedSwapAmount","divn","fromOpenOrders","toOpenOrders","swap","close","Swap","SwapClient","AppInner","enqueueSnackbar","useSnackbar","isConnected","setIsConnected","setTokenList","preflightCommitment","network","Wallet","Connection","NotifyingProvider","tx","err","action","TokenListProvider","resolve","on","left","bottom","disconnect","connect","onTransaction","txSig","this","App","maxSnack","autoHideDuration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.035da4e0.chunk.js","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\n\nexport const SRM_MINT = new PublicKey(\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"\n);\n\nexport const USDC_MINT = new PublicKey(\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n);\n\nexport const USDT_MINT = new PublicKey(\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"\n);\n\nexport const DEX_PID = new PublicKey(\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\"\n);\n","import React, { useContext, useMemo } from \"react\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { USDC_MINT, USDT_MINT } from \"../../utils/pubkeys\";\n\ntype TokenListContext = {\n  tokenMap: Map<string, TokenInfo>;\n  swappableTokens: TokenInfo[];\n  swappableTokensSollet: TokenInfo[];\n  swappableTokensWormhole: TokenInfo[];\n};\nconst _TokenListContext = React.createContext<null | TokenListContext>(null);\n\nexport function TokenListContextProvider(props: any) {\n  const tokenList = useMemo(\n    () => props.tokenList.filterByClusterSlug(\"mainnet-beta\").getList(),\n    [props.tokenList]\n  );\n  const tokenMap = useMemo(() => {\n    const tokenMap = new Map();\n    tokenList.forEach((t: TokenInfo) => {\n      tokenMap.set(t.address, t);\n    });\n    return tokenMap;\n  }, [tokenList]);\n  const swappableTokens = useMemo(() => {\n    const tokens = tokenList\n      .filter((t: TokenInfo) => {\n        const isUsdxQuoted =\n          t.extensions?.serumV3Usdt || t.extensions?.serumV3Usdc;\n        const isSol =\n          t.address === \"So11111111111111111111111111111111111111112\";\n        return isUsdxQuoted && !isSol;\n      })\n      .concat([\n        tokenMap.get(USDC_MINT.toString()),\n        tokenMap.get(USDT_MINT.toString()),\n      ]);\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return tokens;\n  }, [tokenList, tokenMap]);\n  const swappableTokensSollet = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(\"wrapped-sollet\");\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return tokens;\n  }, [tokenList]);\n  const swappableTokensWormhole = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(\"wormhole\");\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return tokens;\n  }, [tokenList]);\n\n  return (\n    <_TokenListContext.Provider\n      value={{\n        tokenMap,\n        swappableTokens,\n        swappableTokensWormhole,\n        swappableTokensSollet,\n      }}\n    >\n      {props.children}\n    </_TokenListContext.Provider>\n  );\n}\n\nfunction useTokenListContext(): TokenListContext {\n  const ctx = useContext(_TokenListContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useTokenMap(): Map<string, TokenInfo> {\n  const { tokenMap } = useTokenListContext();\n  return tokenMap;\n}\n\nexport function useSwappableTokens() {\n  const { swappableTokens, swappableTokensWormhole, swappableTokensSollet } =\n    useTokenListContext();\n  return { swappableTokens, swappableTokensWormhole, swappableTokensSollet };\n}\n","import React, { useContext, useState, useEffect, useMemo } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  Market,\n  OpenOrders,\n  Orderbook as OrderbookSide,\n} from \"@project-serum/serum\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { DEX_PID } from \"../../utils/pubkeys\";\nimport { useTokenMap } from \"./TokenList\";\n\ntype DexContext = {\n  // Maps market address to open orders accounts.\n  openOrders: Map<string, Array<OpenOrders>>;\n  marketCache: Map<string, Market>;\n  setMarketCache: (c: Map<string, Market>) => void;\n  orderbookCache: Map<string, Orderbook>;\n  setOrderbookCache: (c: Map<string, Orderbook>) => void;\n  swapClient: SwapClient;\n};\nconst _DexContext = React.createContext<DexContext | null>(null);\n\nexport function DexContextProvider(props: any) {\n  const [ooAccounts, setOoAccounts] = useState<Map<string, Array<OpenOrders>>>(\n    new Map()\n  );\n  const [marketCache, setMarketCache] = useState<Map<string, Market>>(\n    new Map()\n  );\n  const [orderbookCache, setOrderbookCache] = useState<Map<string, Orderbook>>(\n    new Map()\n  );\n  const swapClient = props.swapClient;\n\n  // Two operations:\n  //\n  // 1. Fetch all open orders accounts for the connected wallet.\n  // 2. Batch fetch all market accounts for those open orders.\n  //\n  useEffect(() => {\n    if (!swapClient.program.provider.wallet.publicKey) {\n      setOoAccounts(new Map());\n      return;\n    }\n    OpenOrders.findForOwner(\n      swapClient.program.provider.connection,\n      swapClient.program.provider.wallet.publicKey,\n      DEX_PID\n    ).then(async (openOrders) => {\n      const newOoAccounts = new Map();\n      let markets = new Set<string>();\n      openOrders.forEach((oo) => {\n        markets.add(oo.market.toString());\n        if (newOoAccounts.get(oo.market.toString())) {\n          newOoAccounts.get(oo.market.toString()).push(oo);\n        } else {\n          newOoAccounts.set(oo.market.toString(), [oo]);\n        }\n      });\n      if (markets.size > 100) {\n        // Punt request chunking until there's user demand.\n        throw new Error(\n          \"Too many markets. Please file an issue to update this\"\n        );\n      }\n      const marketAccounts = (\n        await anchor.utils.getMultipleAccounts(\n          swapClient.program.provider.connection,\n          // @ts-ignore\n          [...markets].map((m) => new PublicKey(m))\n        )\n      ).map((programAccount) => {\n        return {\n          publicKey: programAccount?.publicKey,\n          account: new Market(\n            Market.getLayout(DEX_PID).decode(programAccount?.account.data),\n            -1, // Not used so don't bother fetching.\n            -1, // Not used so don't bother fetching.\n            swapClient.program.provider.opts,\n            DEX_PID\n          ),\n        };\n      });\n      setMarketCache((marketCache) => {\n        const newMarketCache = new Map(marketCache);\n        marketAccounts.forEach((m) => {\n          newMarketCache.set(m.publicKey!.toString(), m.account);\n        });\n        return newMarketCache;\n      });\n      setOoAccounts(newOoAccounts);\n    });\n  }, [\n    swapClient.program.provider.connection,\n    swapClient.program.provider.wallet.publicKey,\n    swapClient.program.provider.opts,\n  ]);\n  return (\n    <_DexContext.Provider\n      value={{\n        openOrders: ooAccounts,\n        marketCache,\n        setMarketCache,\n        orderbookCache,\n        setOrderbookCache,\n        swapClient,\n      }}\n    >\n      {props.children}\n    </_DexContext.Provider>\n  );\n}\n\nexport function useDexContext(): DexContext {\n  const ctx = useContext(_DexContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useOpenOrders(): Map<string, Array<OpenOrders>> {\n  const ctx = useDexContext();\n  return ctx.openOrders;\n}\n\n// Lazy load a given market.\nexport function useMarket(market?: PublicKey): Market | undefined {\n  const ctx = useDexContext();\n\n  const asyncMarket = useAsync(async () => {\n    if (!market) {\n      return undefined;\n    }\n    if (ctx.marketCache.get(market.toString())) {\n      return ctx.marketCache.get(market.toString());\n    }\n    const marketClient = await Market.load(\n      ctx.swapClient.program.provider.connection,\n      market,\n      undefined,\n      DEX_PID\n    );\n\n    let cache = new Map(ctx.marketCache);\n    cache.set(market.toString(), marketClient);\n    ctx.setMarketCache(cache);\n\n    return marketClient;\n  }, [ctx.swapClient.program.provider.connection, market]);\n\n  if (asyncMarket.result) {\n    return asyncMarket.result;\n  }\n\n  return undefined;\n}\n\n// Lazy load the orderbook for a given market.\nexport function useOrderbook(market?: PublicKey): Orderbook | undefined {\n  const { swapClient, orderbookCache, setOrderbookCache } = useDexContext();\n  const marketClient = useMarket(market);\n\n  const asyncOrderbook = useAsync(async () => {\n    if (!market || !marketClient) {\n      return undefined;\n    }\n    if (orderbookCache.get(market.toString())) {\n      return orderbookCache.get(market.toString());\n    }\n\n    const [bids, asks] = await Promise.all([\n      marketClient.loadBids(swapClient.program.provider.connection),\n      marketClient.loadAsks(swapClient.program.provider.connection),\n    ]);\n\n    const orderbook = {\n      bids,\n      asks,\n    };\n\n    const cache = new Map(orderbookCache);\n    cache.set(market.toString(), orderbook);\n    setOrderbookCache(cache);\n\n    return orderbook;\n  }, [swapClient.program.provider.connection, market, marketClient]);\n\n  if (asyncOrderbook.result) {\n    return asyncOrderbook.result;\n  }\n\n  return undefined;\n}\n\nexport function useMarketName(market: PublicKey): string {\n  const tokenMap = useTokenMap();\n  const marketClient = useMarket(market);\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const name = `${baseTicker} / ${quoteTicker}`;\n  return name;\n}\n\n// Fair price for a given market, as defined by the mid.\nexport function useFair(market?: PublicKey): number | undefined {\n  const orderbook = useOrderbook(market);\n  if (orderbook === undefined) {\n    return undefined;\n  }\n  const bestBid = orderbook.bids.items(true).next().value;\n  const bestOffer = orderbook.asks.items(false).next().value;\n  const mid = (bestBid.price + bestOffer.price) / 2.0;\n  return mid;\n}\n\n// Fair price for a theoretical toMint/fromMint market. I.e., the number\n// of `fromMint` tokens to purchase a single `toMint` token. Aggregates\n// across a trade route, if needed.\nexport function useFairRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): number | undefined {\n  const route = useRoute(fromMint, toMint);\n  const fromFair = useFair(route ? route[0] : undefined);\n  const fromMarket = useMarket(route ? route[0] : undefined);\n  const toFair = useFair(route ? route[1] : undefined);\n\n  if (route === null) {\n    return undefined;\n  }\n\n  if (route.length === 1 && fromFair !== undefined) {\n    if (fromMarket === undefined) {\n      return undefined;\n    }\n    if (fromMarket?.baseMintAddress.equals(fromMint)) {\n      return 1.0 / fromFair;\n    } else {\n      return fromFair;\n    }\n  }\n  if (fromFair === undefined || toFair === undefined) {\n    return undefined;\n  }\n  return toFair / fromFair;\n}\n\nexport function useRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): Array<PublicKey> | null {\n  const { swapClient } = useDexContext();\n  return useMemo(\n    () => swapClient.route(fromMint, toMint),\n    [swapClient, fromMint, toMint]\n  );\n}\n\ntype Orderbook = {\n  bids: OrderbookSide;\n  asks: OrderbookSide;\n};\n","import React, { useContext, useState } from \"react\";\nimport * as assert from \"assert\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { SRM_MINT, USDC_MINT } from \"../../utils/pubkeys\";\nimport { useFairRoute } from \"./Dex\";\n\nconst DEFAULT_SLIPPAGE_PERCENT = 0.5;\n\nexport type SwapContext = {\n  // Mint being traded from. The user must own these tokens.\n  fromMint: PublicKey;\n  setFromMint: (m: PublicKey) => void;\n\n  // Mint being traded to. The user will receive these tokens after the swap.\n  toMint: PublicKey;\n  setToMint: (m: PublicKey) => void;\n\n  // Amount used for the swap.\n  fromAmount: number;\n  setFromAmount: (a: number) => void;\n\n  // *Expected* amount received from the swap.\n  toAmount: number;\n  setToAmount: (a: number) => void;\n\n  // Function to flip what we consider to be the \"to\" and \"from\" mints.\n  swapToFromMints: () => void;\n\n  // The amount (in units of percent) a swap can be off from the estimate\n  // shown to the user.\n  slippage: number;\n  setSlippage: (n: number) => void;\n\n  // Null if the user is using fairs directly from DEX prices.\n  // Otherwise, a user specified override for the price to use when calculating\n  // swap amounts.\n  fairOverride: number | null;\n  setFairOverride: (n: number | null) => void;\n\n  // True if all newly created market accounts should be closed in the\n  // same user flow (ideally in the same transaction).\n  isClosingNewAccounts: boolean;\n  setIsClosingNewAccounts: (b: boolean) => void;\n};\nconst _SwapContext = React.createContext<null | SwapContext>(null);\n\nexport function SwapContextProvider(props: any) {\n  const [fromMint, setFromMint] = useState(SRM_MINT);\n  const [toMint, setToMint] = useState(USDC_MINT);\n  const [fromAmount, _setFromAmount] = useState(0);\n  const [toAmount, _setToAmount] = useState(0);\n  const [isClosingNewAccounts, setIsClosingNewAccounts] = useState(false);\n  // Percent units.\n  const [slippage, setSlippage] = useState(DEFAULT_SLIPPAGE_PERCENT);\n  const [fairOverride, setFairOverride] = useState<number | null>(null);\n  const fair = _useSwapFair(fromMint, toMint, fairOverride);\n\n  assert.ok(slippage >= 0);\n\n  const swapToFromMints = () => {\n    const oldFrom = fromMint;\n    const oldFromAmount = fromAmount;\n    const oldTo = toMint;\n    const oldToAmount = toAmount;\n    setFromMint(oldTo);\n    setToMint(oldFrom);\n    _setFromAmount(oldToAmount);\n    _setToAmount(oldFromAmount);\n  };\n\n  const setFromAmount = (amount: number) => {\n    if (fair === undefined) {\n      throw new Error(\"Fair price not found\");\n    }\n    _setFromAmount(amount);\n    _setToAmount(amount / fair);\n  };\n\n  const setToAmount = (amount: number) => {\n    if (fair === undefined) {\n      throw new Error(\"Fair price not found\");\n    }\n    _setToAmount(amount);\n    _setFromAmount(amount * fair);\n  };\n\n  return (\n    <_SwapContext.Provider\n      value={{\n        fromMint,\n        setFromMint,\n        toMint,\n        setToMint,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        swapToFromMints,\n        slippage,\n        setSlippage,\n        fairOverride,\n        setFairOverride,\n        isClosingNewAccounts,\n        setIsClosingNewAccounts,\n      }}\n    >\n      {props.children}\n    </_SwapContext.Provider>\n  );\n}\n\nexport function useSwapContext(): SwapContext {\n  const ctx = useContext(_SwapContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useSwapFair(): number | undefined {\n  const { fairOverride, fromMint, toMint } = useSwapContext();\n  return _useSwapFair(fromMint, toMint, fairOverride);\n}\n\nfunction _useSwapFair(\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  fairOverride: number | null\n): number | undefined {\n  const fairRoute = useFairRoute(fromMint, toMint);\n  const fair = fairOverride === null ? fairRoute : fairOverride;\n  return fair;\n}\n","import React, { useContext, useState } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { PublicKey, Account } from \"@solana/web3.js\";\nimport { MintInfo, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nconst _MintContext = React.createContext<null | MintContext>(null);\ntype MintContext = {\n  mintCache: Map<string, MintInfo>;\n  setMintCache: (m: Map<string, MintInfo>) => void;\n  provider: Provider;\n};\n\nexport function MintContextProvider(props: any) {\n  const provider = props.provider;\n  const [mintCache, setMintCache] = useState(new Map<string, MintInfo>());\n\n  return (\n    <_MintContext.Provider\n      value={{\n        mintCache,\n        setMintCache,\n        provider,\n      }}\n    >\n      {props.children}\n    </_MintContext.Provider>\n  );\n}\n\nexport function useMint(mint?: PublicKey): MintInfo | undefined | null {\n  const ctx = useContext(_MintContext);\n  if (ctx === null) {\n    throw new Error(\"Mint context not found\");\n  }\n\n  // Lazy load the mint account if needeed.\n  const asyncMintInfo = useAsync(async () => {\n    if (!mint) {\n      return undefined;\n    }\n    if (ctx.mintCache.get(mint.toString())) {\n      return ctx.mintCache.get(mint.toString());\n    }\n    const mintClient = new Token(\n      ctx.provider.connection,\n      mint,\n      TOKEN_PROGRAM_ID,\n      new Account()\n    );\n    const mintInfo = await mintClient.getMintInfo();\n\n    let cache = new Map(ctx.mintCache);\n    cache.set(mint.toString(), mintInfo);\n    ctx.setMintCache(cache);\n\n    return mintInfo;\n  }, [ctx.provider.connection, mint]);\n\n  if (asyncMintInfo.result) {\n    return asyncMintInfo.result;\n  }\n  return undefined;\n}\n","// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet.\n\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as bs58 from \"bs58\";\n\nexport async function getOwnedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey\n) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection._rpcRequest(\"getProgramAccounts\", [\n    TOKEN_PROGRAM_ID.toBase58(),\n    {\n      commitment: connection.commitment,\n      filters,\n    },\n  ]);\n  if (resp.error) {\n    throw new Error(\n      \"failed to get token accounts owned by \" +\n        publicKey.toBase58() +\n        \": \" +\n        resp.error.message\n    );\n  }\n  return resp.result\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data: bs58.decode(data),\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .filter(({ accountInfo }: any) => {\n      // TODO: remove this check once mainnet is updated\n      return filters.every((filter) => {\n        if (filter.dataSize) {\n          return accountInfo.data.length === filter.dataSize;\n        } else if (filter.memcmp) {\n          let filterBytes = bs58.decode(filter.memcmp.bytes);\n          return accountInfo.data\n            .slice(\n              filter.memcmp.offset,\n              filter.memcmp.offset + filterBytes.length\n            )\n            .equals(filterBytes);\n        }\n        return false;\n      });\n    })\n    .map(({ publicKey, accountInfo }: any) => {\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\n    });\n}\n\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, \"mint\"),\n  BufferLayout.blob(32, \"owner\"),\n  BufferLayout.nu64(\"amount\"),\n  BufferLayout.blob(93),\n]);\n\nexport const MINT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(44),\n  BufferLayout.u8(\"decimals\"),\n  BufferLayout.blob(37),\n]);\n\nexport function parseTokenAccountData(data: Buffer) {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount),\n  };\n}\n\nexport function parseMintData(data: Buffer) {\n  // @ts-ignore\n  let { decimals } = MINT_LAYOUT.decode(data);\n  return { decimals };\n}\n\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { AccountInfo as TokenAccount } from \"@solana/spl-token\";\nimport { getOwnedTokenAccounts } from \"../../utils/tokens\";\n\nconst _TokenContext = React.createContext<TokenContext | null>(null);\n\nexport function TokenContextProvider(props: any) {\n  const provider = props.provider;\n  const [ownedTokenAccounts, setOwnedTokenAccounts] = useState(undefined);\n\n  // Fetch all the owned token accounts for the wallet.\n  useEffect(() => {\n    if (!provider.wallet.publicKey) {\n      setOwnedTokenAccounts(undefined);\n      return;\n    }\n    getOwnedTokenAccounts(provider.connection, provider.wallet.publicKey).then(\n      setOwnedTokenAccounts\n    );\n  }, [provider.wallet.publicKey, provider.connection]);\n\n  return (\n    <_TokenContext.Provider\n      value={{\n        ownedTokenAccounts,\n      }}\n    >\n      {props.children}\n    </_TokenContext.Provider>\n  );\n}\n\nexport type TokenContext = {\n  ownedTokenAccounts:\n    | { publicKey: PublicKey; account: TokenAccount }[]\n    | undefined;\n};\n\n// Null => none exists.\n// Undefined => loading.\nexport function useOwnedTokenAccount(\n  mint?: PublicKey\n): { publicKey: PublicKey; account: TokenAccount } | null | undefined {\n  const ctx = useContext(_TokenContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  if (mint === undefined) {\n    return mint;\n  }\n  if (ctx.ownedTokenAccounts === undefined) {\n    return undefined;\n  }\n  const tokenAccounts = ctx.ownedTokenAccounts.filter((account) =>\n    account.account.mint.equals(mint)\n  );\n\n  if (tokenAccounts.length === 0) {\n    return null;\n  }\n\n  // Take the account with the most tokens in it.\n  tokenAccounts.sort((a, b) =>\n    a.account.amount < b.account.amount\n      ? -1\n      : a.account.amount > b.account.amount\n      ? 1\n      : 0\n  );\n  return tokenAccounts[0];\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  List,\n  ListItem,\n  Typography,\n  Tabs,\n  Tab,\n} from \"@material-ui/core\";\nimport { TokenIcon } from \"./Swap\";\nimport { useSwappableTokens } from \"./context/TokenList\";\n\nconst useStyles = makeStyles(() => ({\n  dialogContent: {\n    paddingTop: 0,\n  },\n  textField: {\n    width: \"100%\",\n    border: \"solid 1pt #ccc\",\n    borderRadius: \"10px\",\n    marginBottom: \"8px\",\n  },\n  tab: {\n    minWidth: \"134px\",\n  },\n}));\n\nexport default function TokenDialog({\n  open,\n  onClose,\n  setMint,\n}: {\n  open: boolean;\n  onClose: () => void;\n  setMint: (mint: PublicKey) => void;\n}) {\n  const [tabSelection, setTabSelection] = useState(0);\n  const [tokenFilter, setTokenFilter] = useState(\"\");\n  const filter = tokenFilter.toLowerCase();\n  const styles = useStyles();\n  const { swappableTokens, swappableTokensSollet, swappableTokensWormhole } =\n    useSwappableTokens();\n  const selectedTokens =\n    tabSelection === 0\n      ? swappableTokens\n      : tabSelection === 1\n      ? swappableTokensWormhole\n      : swappableTokensSollet;\n  let tokens =\n    tokenFilter === \"\"\n      ? selectedTokens\n      : selectedTokens.filter(\n          (t) =>\n            t.symbol.toLowerCase().startsWith(filter) ||\n            t.name.toLowerCase().startsWith(filter) ||\n            t.address.toLowerCase().startsWith(filter)\n        );\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      scroll={\"paper\"}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n          width: \"420px\",\n        },\n      }}\n    >\n      <DialogTitle style={{ fontWeight: \"bold\" }}>\n        <Typography variant=\"h6\" style={{ paddingBottom: \"16px\" }}>\n          Select a token\n        </Typography>\n        <TextField\n          className={styles.textField}\n          placeholder={\"Search name\"}\n          value={tokenFilter}\n          onChange={(e) => setTokenFilter(e.target.value)}\n          InputProps={{\n            disableUnderline: true,\n            style: { padding: \"10px\" },\n          }}\n        />\n      </DialogTitle>\n      <DialogContent className={styles.dialogContent} dividers={true}>\n        <List disablePadding>\n          {tokens.map((tokenInfo: TokenInfo) => (\n            <TokenListItem\n              key={tokenInfo.address}\n              tokenInfo={tokenInfo}\n              onClick={(mint) => {\n                setMint(mint);\n                onClose();\n                setTokenFilter(\"\");\n              }}\n            />\n          ))}\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Tabs value={tabSelection} onChange={(e, v) => setTabSelection(v)}>\n          <Tab value={0} className={styles.tab} label=\"Main\" />\n          <Tab value={1} className={styles.tab} label=\"Wormhole\" />\n          <Tab value={2} className={styles.tab} label=\"Sollet\" />\n        </Tabs>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction TokenListItem({\n  tokenInfo,\n  onClick,\n}: {\n  tokenInfo: TokenInfo;\n  onClick: (mint: PublicKey) => void;\n}) {\n  const mint = new PublicKey(tokenInfo.address);\n  return (\n    <ListItem button onClick={() => onClick(mint)}>\n      <TokenIcon mint={mint} style={{ width: \"30px\", borderRadius: \"15px\" }} />\n      <TokenName tokenInfo={tokenInfo} />\n    </ListItem>\n  );\n}\n\nfunction TokenName({ tokenInfo }: { tokenInfo: TokenInfo }) {\n  return (\n    <div style={{ marginLeft: \"16px\" }}>\n      <Typography style={{ fontWeight: \"bold\" }}>\n        {tokenInfo?.symbol}\n      </Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n        {tokenInfo?.name}\n      </Typography>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { MintInfo } from \"@solana/spl-token\";\nimport { BN } from \"@project-serum/anchor\";\nimport { OpenOrders } from \"@project-serum/serum\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogContent,\n  Paper,\n  Table,\n  TableRow,\n  TableHead,\n  TableCell,\n  TableBody,\n  TableContainer,\n  Popover,\n  IconButton,\n  Typography,\n  Button,\n  Select,\n  MenuItem,\n  TextField,\n  InputAdornment,\n  Link,\n  Switch,\n  FormControlLabel,\n  FormGroup,\n} from \"@material-ui/core\";\nimport { ToggleButton } from \"@material-ui/lab\";\nimport { SettingsOutlined as Settings, Close } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { useSwapContext, useSwapFair } from \"./context/Swap\";\nimport { useMarket, useOpenOrders, useDexContext } from \"./context/Dex\";\nimport { useTokenMap } from \"./context/TokenList\";\nimport { useMint } from \"./context/Mint\";\nimport { useOwnedTokenAccount } from \"./context/Token\";\n\nconst useStyles = makeStyles((theme) => ({\n  tab: {\n    width: \"50%\",\n  },\n  table: {},\n  settingsButton: {\n    padding: 0,\n  },\n  closeAccountSwitchLabel: {\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport function SettingsButton() {\n  const styles = useStyles();\n\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.settingsButton}\n            >\n              <Settings />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{ style: { borderRadius: \"10px\" } }}\n            >\n              <SettingsDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction SettingsDetails() {\n  const { slippage, setSlippage, fairOverride, setFairOverride } =\n    useSwapContext();\n  const [showSettingsDialog, setShowSettingsDialog] = useState(false);\n  const fair = useSwapFair();\n  const { swapClient } = useDexContext();\n  return (\n    <div style={{ padding: \"15px\", width: \"305px\" }}>\n      <Typography color=\"textSecondary\" style={{ fontWeight: \"bold\" }}>\n        Settings\n      </Typography>\n      <div style={{ marginTop: \"10px\" }}>\n        <div>\n          <Typography color=\"textSecondary\">Slippage tolerance</Typography>\n          <TextField\n            type=\"number\"\n            placeholder=\"Error tolerance percentage\"\n            value={slippage}\n            onChange={(e) => setSlippage(parseFloat(e.target.value))}\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n          />\n        </div>\n        <div style={{ marginTop: \"5px\" }}>\n          <Typography color=\"textSecondary\">Fair price</Typography>\n          <div style={{ display: \"flex\" }}>\n            <TextField\n              type=\"number\"\n              placeholder=\"Fair price override\"\n              value={fair}\n              onChange={(e) => setFairOverride(parseFloat(e.target.value))}\n              style={{\n                marginRight: \"10px\",\n                flex: 1,\n                display: \"flex\",\n                justifyContent: \"center\",\n                flexDirection: \"column\",\n              }}\n              disabled={fairOverride === null}\n            />\n            <ToggleButton\n              value=\"bold\"\n              selected={fairOverride === null}\n              onClick={() => {\n                if (fair === undefined) {\n                  console.error(\"Fair is undefined\");\n                  return;\n                }\n                if (fairOverride === null) {\n                  setFairOverride(fair);\n                } else {\n                  setFairOverride(null);\n                }\n              }}\n              style={{\n                paddingTop: \"3px\",\n                paddingBottom: \"3px\",\n                paddingLeft: \"5px\",\n                paddingRight: \"5px\",\n                borderRadius: \"20px\",\n              }}\n            >\n              Auto\n            </ToggleButton>\n          </div>\n        </div>\n        <div style={{ marginTop: \"5px\" }}>\n          <CloseNewAccountsSwitch />\n        </div>\n        <Button\n          style={{\n            width: \"100%\",\n            marginTop: \"10px\",\n            background: \"#e0e0e0\",\n          }}\n          disabled={swapClient.program.provider.wallet.publicKey === null}\n          onClick={() => setShowSettingsDialog(true)}\n        >\n          Manage Dex Accounts\n        </Button>\n      </div>\n      <SettingsDialog\n        open={showSettingsDialog}\n        onClose={() => setShowSettingsDialog(false)}\n      />\n    </div>\n  );\n}\n\nfunction CloseNewAccountsSwitch() {\n  const styles = useStyles();\n  const { isClosingNewAccounts, setIsClosingNewAccounts } = useSwapContext();\n\n  return (\n    <FormGroup row>\n      <FormControlLabel\n        classes={{ label: styles.closeAccountSwitchLabel }}\n        labelPlacement=\"start\"\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          marginLeft: 0,\n          width: \"100%\",\n        }}\n        control={\n          <Switch\n            checked={isClosingNewAccounts}\n            onChange={() => setIsClosingNewAccounts(!isClosingNewAccounts)}\n            color=\"primary\"\n          />\n        }\n        label=\"Close new accounts\"\n      />\n    </FormGroup>\n  );\n}\n\nexport function SettingsDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog\n      maxWidth=\"lg\"\n      open={open}\n      onClose={onClose}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n        },\n      }}\n    >\n      <div>\n        <div\n          style={{\n            height: \"24px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <IconButton\n            onClick={onClose}\n            style={{\n              padding: 0,\n              position: \"absolute\",\n              right: \"8px\",\n              top: \"8px\",\n            }}\n          >\n            <Close />\n          </IconButton>\n        </div>\n        <DialogContent style={{ paddingTop: 0 }}>\n          <OpenOrdersAccounts />\n        </DialogContent>\n      </div>\n    </Dialog>\n  );\n}\n\nfunction OpenOrdersAccounts() {\n  const styles = useStyles();\n  const openOrders = useOpenOrders();\n  return (\n    <TableContainer component={Paper} elevation={0}>\n      <Table className={styles.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Market</TableCell>\n            <TableCell align=\"center\">Open Orders Account</TableCell>\n            <TableCell align=\"center\">Base Used</TableCell>\n            <TableCell align=\"center\">Base Free</TableCell>\n            <TableCell align=\"center\">Quote Used</TableCell>\n            <TableCell align=\"center\">Quote Free</TableCell>\n            <TableCell align=\"center\">Settle</TableCell>\n            <TableCell align=\"center\">Close</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {Array.from(openOrders.entries()).map(([market, oos]) => {\n            return (\n              <OpenOrdersRow\n                key={market}\n                market={new PublicKey(market)}\n                openOrders={oos}\n              />\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction OpenOrdersRow({\n  market,\n  openOrders,\n}: {\n  market: PublicKey;\n  openOrders: Array<OpenOrders>;\n}) {\n  const [ooAccount, setOoAccount] = useState(openOrders[0]);\n  const { swapClient } = useDexContext();\n  const marketClient = useMarket(market);\n  const tokenMap = useTokenMap();\n  const base = useMint(marketClient?.baseMintAddress);\n  const quote = useMint(marketClient?.quoteMintAddress);\n  const baseWallet = useOwnedTokenAccount(marketClient?.baseMintAddress);\n  const quoteWallet = useOwnedTokenAccount(marketClient?.quoteMintAddress);\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const marketName =\n    baseTicker && quoteTicker\n      ? `${baseTicker} / ${quoteTicker}`\n      : market.toString();\n  const settleDisabled =\n    ooAccount.baseTokenFree.toNumber() + ooAccount.quoteTokenFree.toNumber() ===\n    0;\n  const closeDisabled =\n    ooAccount.baseTokenTotal.toNumber() +\n      ooAccount.quoteTokenTotal.toNumber() !==\n    0;\n\n  const settleFunds = async () => {\n    if (!marketClient) {\n      throw new Error(\"Market client not found\");\n    }\n    if (!baseWallet || !quoteWallet) {\n      throw new Error(\"Base or quote wallet not found\");\n    }\n    const referrerWallet = undefined;\n    const { transaction, signers } =\n      await marketClient.makeSettleFundsTransaction(\n        swapClient.program.provider.connection,\n        ooAccount,\n        baseWallet.publicKey,\n        quoteWallet.publicKey,\n        referrerWallet\n      );\n    await swapClient.program.provider.send(transaction, signers);\n  };\n\n  const closeOpenOrders = async () => {\n    // TODO.\n    //\n    // Blocked by https://github.com/project-serum/serum-dex/pull/112.\n  };\n\n  return (\n    <TableRow key={market.toString()}>\n      <TableCell component=\"th\" scope=\"row\">\n        <Typography>\n          <Link\n            href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            {marketName}\n          </Link>\n        </Typography>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Select\n          value={ooAccount.address.toString()}\n          onChange={(e) =>\n            setOoAccount(\n              openOrders.filter(\n                (oo) => oo.address.toString() === e.target.value\n              )[0]\n            )\n          }\n        >\n          {openOrders.map((oo) => {\n            return (\n              <MenuItem\n                key={oo.address.toString()}\n                value={oo.address.toString()}\n              >\n                {oo.address.toString()}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenTotal.sub(ooAccount.baseTokenFree))}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(\n          quote,\n          ooAccount.quoteTokenTotal.sub(ooAccount.quoteTokenFree)\n        )}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(quote, ooAccount.quoteTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button color=\"primary\" disabled={settleDisabled} onClick={settleFunds}>\n          Settle\n        </Button>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button\n          color=\"secondary\"\n          disabled={closeDisabled}\n          onClick={closeOpenOrders}\n        >\n          Close\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n}\n\nfunction toDisplay(mintInfo: MintInfo | undefined | null, value: BN): string {\n  if (!mintInfo) {\n    return value.toNumber().toString();\n  }\n  return (value.toNumber() / 10 ** mintInfo.decimals).toFixed(\n    mintInfo.decimals\n  );\n}\n","import {\n  makeStyles,\n  Typography,\n  Link,\n  Popover,\n  IconButton,\n} from \"@material-ui/core\";\nimport { Info } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useTokenMap } from \"./context/TokenList\";\nimport { useSwapContext, useSwapFair } from \"./context/Swap\";\nimport { useMint } from \"./context/Mint\";\nimport { useDexContext, useMarketName, useFair } from \"./context/Dex\";\n\nconst useStyles = makeStyles((theme) => ({\n  infoLabel: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n  },\n  fairPriceLabel: {\n    marginRight: \"10px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    color: theme.palette.text.secondary,\n  },\n  infoButton: {\n    padding: 0,\n  },\n}));\n\nexport function InfoLabel() {\n  const styles = useStyles();\n\n  const { fromMint, toMint } = useSwapContext();\n  const fromMintInfo = useMint(fromMint);\n  const fair = useSwapFair();\n\n  const tokenMap = useTokenMap();\n  let fromTokenInfo = tokenMap.get(fromMint.toString());\n  let toTokenInfo = tokenMap.get(toMint.toString());\n\n  return (\n    <div className={styles.infoLabel}>\n      <Typography color=\"textSecondary\"></Typography>\n      <div style={{ display: \"flex\" }}>\n        <div className={styles.fairPriceLabel}>\n          {fair !== undefined && toTokenInfo && fromTokenInfo\n            ? `1 ${toTokenInfo.symbol} = ${fair.toFixed(\n                fromMintInfo?.decimals\n              )} ${fromTokenInfo.symbol}`\n            : `-`}\n        </div>\n        <InfoButton />\n      </div>\n    </div>\n  );\n}\n\nfunction InfoButton() {\n  const styles = useStyles();\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div style={{ display: \"flex\" }}>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.infoButton}\n            >\n              <Info />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{ style: { borderRadius: \"10px\" } }}\n              disableRestoreFocus\n            >\n              <InfoDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction InfoDetails() {\n  const { fromMint, toMint } = useSwapContext();\n  const { swapClient } = useDexContext();\n  const tokenMap = useTokenMap();\n  const fromMintTicker = tokenMap.get(fromMint.toString())?.symbol;\n  const toMintTicker = tokenMap.get(toMint.toString())?.symbol;\n  const addresses = [\n    { ticker: fromMintTicker, mint: fromMint },\n    { ticker: toMintTicker, mint: toMint },\n  ];\n  const route = swapClient.route(fromMint, toMint);\n  return (\n    <div style={{ padding: \"15px\", width: \"250px\" }}>\n      <div>\n        <Typography\n          color=\"textSecondary\"\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\n        >\n          Trade Route\n        </Typography>\n        {route ? (\n          route.map((market: PublicKey) => {\n            return <MarketRoute key={market.toString()} market={market} />;\n          })\n        ) : (\n          <Typography color=\"textSecondary\">Route not found</Typography>\n        )}\n      </div>\n      <div style={{ marginTop: \"15px\" }}>\n        <Typography\n          color=\"textSecondary\"\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\n        >\n          Tokens\n        </Typography>\n        {addresses.map((address) => {\n          return (\n            <div\n              key={address.mint.toString()}\n              style={{\n                marginTop: \"5px\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Link\n                href={`https://explorer.solana.com/address/${address.mint.toString()}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                {address.ticker}\n              </Link>\n              <code style={{ width: \"128px\", overflow: \"hidden\" }}>\n                {address.mint.toString()}\n              </code>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction MarketRoute({ market }: { market: PublicKey }) {\n  const marketName = useMarketName(market);\n  const fair = useFair(market);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginTop: \"5px\",\n      }}\n    >\n      <Link\n        href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        {marketName}\n      </Link>\n      <code style={{ marginLeft: \"10px\" }}>{fair ? fair.toFixed(6) : \"-\"}</code>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenListContainer } from \"@solana/spl-token-registry\";\nimport { BN, Provider } from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  makeStyles,\n  Card,\n  Button,\n  Paper,\n  Typography,\n  TextField,\n} from \"@material-ui/core\";\nimport { ExpandMore } from \"@material-ui/icons\";\nimport { SwapContextProvider, useSwapContext } from \"./context/Swap\";\nimport {\n  DexContextProvider,\n  useDexContext,\n  useOpenOrders,\n  useRoute,\n  useMarket,\n} from \"./context/Dex\";\nimport { MintContextProvider, useMint } from \"./context/Mint\";\nimport { TokenListContextProvider, useTokenMap } from \"./context/TokenList\";\nimport { TokenContextProvider, useOwnedTokenAccount } from \"./context/Token\";\nimport TokenDialog from \"./TokenDialog\";\nimport { SettingsButton } from \"./Settings\";\nimport { InfoLabel } from \"./Info\";\n\nconst useStyles = makeStyles(() => ({\n  card: {\n    width: \"450px\",\n    borderRadius: \"10px\",\n    border: \"solid 1pt #e0e0e0\",\n  },\n  cardContent: {\n    marginLeft: \"6px\",\n    marginRight: \"6px\",\n    marginBottom: \"6px\",\n  },\n  tab: {\n    width: \"50%\",\n  },\n  settingsButton: {\n    padding: 0,\n  },\n  swapButton: {\n    width: \"100%\",\n    borderRadius: \"15px\",\n  },\n  swapToFromButton: {\n    display: \"block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n}));\n\nexport default function Swap({\n  style,\n  provider,\n  tokenList,\n}: {\n  style?: any;\n  provider: Provider;\n  tokenList: TokenListContainer;\n}) {\n  const swapClient = new SwapClient(provider, tokenList);\n  return (\n    <TokenListContextProvider tokenList={tokenList}>\n      <MintContextProvider provider={provider}>\n        <TokenContextProvider provider={provider}>\n          <DexContextProvider swapClient={swapClient}>\n            <SwapContextProvider>\n              <SwapCard style={style} />\n            </SwapContextProvider>\n          </DexContextProvider>\n        </TokenContextProvider>\n      </MintContextProvider>\n    </TokenListContextProvider>\n  );\n}\n\nfunction SwapCard({ style }: { style?: any }) {\n  const styles = useStyles();\n  return (\n    <div style={style}>\n      <Card className={styles.card}>\n        <SwapHeader />\n        <div className={styles.cardContent}>\n          <SwapFromForm />\n          <ArrowButton />\n          <SwapToForm />\n          <InfoLabel />\n          <SwapButton />\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nfunction SwapHeader() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        margin: \"8px\",\n      }}\n    >\n      <Typography\n        style={{\n          fontWeight: \"bold\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        Swap\n      </Typography>\n      <SettingsButton />\n    </div>\n  );\n}\n\nexport function ArrowButton() {\n  const styles = useStyles();\n  const { swapToFromMints } = useSwapContext();\n  return (\n    <Button className={styles.swapToFromButton} onClick={swapToFromMints}>\n      ⇅\n    </Button>\n  );\n}\n\nfunction SwapFromForm() {\n  const { fromMint, setFromMint, fromAmount, setFromAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      mint={fromMint}\n      setMint={setFromMint}\n      amount={fromAmount}\n      setAmount={setFromAmount}\n    />\n  );\n}\n\nfunction SwapToForm() {\n  const { toMint, setToMint, toAmount, setToAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      mint={toMint}\n      setMint={setToMint}\n      amount={toAmount}\n      setAmount={setToAmount}\n    />\n  );\n}\n\nfunction SwapTokenForm({\n  mint,\n  setMint,\n  amount,\n  setAmount,\n}: {\n  mint: PublicKey;\n  setMint: (m: PublicKey) => void;\n  amount: number;\n  setAmount: (a: number) => void;\n}) {\n  const [showTokenDialog, setShowTokenDialog] = useState(false);\n  const tokenAccount = useOwnedTokenAccount(mint);\n  const mintAccount = useMint(mint);\n\n  return (\n    <Paper elevation={0} variant=\"outlined\" style={{ borderRadius: \"10px\" }}>\n      <div\n        style={{\n          height: \"50px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <TokenButton mint={mint} onClick={() => setShowTokenDialog(true)} />\n        <TextField\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(parseFloat(e.target.value))}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        />\n      </div>\n      <div style={{ marginLeft: \"10px\", height: \"30px\" }}>\n        <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n          {tokenAccount && mintAccount\n            ? `Balance: ${(\n                tokenAccount.account.amount.toNumber() /\n                10 ** mintAccount.decimals\n              ).toFixed(mintAccount.decimals)}`\n            : `-`}\n        </Typography>\n      </div>\n      <TokenDialog\n        setMint={setMint}\n        open={showTokenDialog}\n        onClose={() => setShowTokenDialog(false)}\n      />\n    </Paper>\n  );\n}\n\nfunction TokenButton({\n  mint,\n  onClick,\n}: {\n  mint: PublicKey;\n  onClick: () => void;\n}) {\n  return (\n    <Button onClick={onClick} style={{ minWidth: \"116px\" }}>\n      <TokenIcon mint={mint} style={{ width: \"25px\", borderRadius: \"13px\" }} />\n      <TokenName mint={mint} />\n      <ExpandMore />\n    </Button>\n  );\n}\n\nexport function TokenIcon({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenMap = useTokenMap();\n  let tokenInfo = tokenMap.get(mint.toString());\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {tokenInfo?.logoURI ? (\n        <img alt=\"Logo\" style={style} src={tokenInfo?.logoURI} />\n      ) : (\n        <div style={style}></div>\n      )}\n    </div>\n  );\n}\n\nfunction TokenName({ mint }: { mint: PublicKey }) {\n  const tokenMap = useTokenMap();\n  let tokenInfo = tokenMap.get(mint.toString());\n  return (\n    <Typography style={{ marginLeft: \"5px\" }}>{tokenInfo?.symbol}</Typography>\n  );\n}\n\nfunction SwapButton() {\n  const styles = useStyles();\n  const {\n    fromMint,\n    toMint,\n    fromAmount,\n    toAmount,\n    slippage,\n    isClosingNewAccounts,\n  } = useSwapContext();\n  const { swapClient } = useDexContext();\n  const fromMintInfo = useMint(fromMint);\n  const toMintInfo = useMint(toMint);\n  const openOrders = useOpenOrders();\n  const route = useRoute(fromMint, toMint);\n  const fromMarket = useMarket(route ? route[0] : undefined);\n  const toMarket = useMarket(route ? route[1] : undefined);\n\n  const sendSwapTransaction = async () => {\n    if (!fromMintInfo || !toMintInfo) {\n      throw new Error(\"Unable to calculate mint decimals\");\n    }\n    const amount = new BN(fromAmount).muln(10 ** fromMintInfo.decimals);\n    const minExpectedSwapAmount = new BN(toAmount * 10 ** toMintInfo.decimals)\n      .muln(100 - slippage)\n      .divn(100);\n    const fromOpenOrders = fromMarket\n      ? openOrders.get(fromMarket?.address.toString())\n      : undefined;\n    const toOpenOrders = toMarket\n      ? openOrders.get(toMarket?.address.toString())\n      : undefined;\n    await swapClient.swap({\n      fromMint,\n      toMint,\n      amount,\n      minExpectedSwapAmount,\n      // Pass in the below parameters so that the client doesn't perform\n      // wasteful network requests when we already have the data.\n      fromMarket,\n      toMarket,\n      fromOpenOrders: fromOpenOrders ? fromOpenOrders[0].address : undefined,\n      toOpenOrders: toOpenOrders ? toOpenOrders[0].address : undefined,\n      // Auto close newly created open orders accounts.\n      close: isClosingNewAccounts,\n    });\n  };\n  return (\n    <Button\n      variant=\"contained\"\n      className={styles.swapButton}\n      onClick={sendSwapTransaction}\n      disabled={\n        swapClient.program.provider.wallet.publicKey === null || route === null\n      }\n    >\n      Swap\n    </Button>\n  );\n}\n","// The swap module exports a single `Swap` component that can be embedded into\n// applications.\n\nimport Swap from \"./components/Swap\";\nexport default Swap;\n","import { useState, useEffect, useMemo } from \"react\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport { Button } from \"@material-ui/core\";\nimport { Provider } from \"@project-serum/anchor\";\n// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {\n  Account,\n  ConfirmOptions,\n  Connection,\n  Transaction,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport {\n  TokenListContainer,\n  TokenListProvider,\n} from \"@solana/spl-token-registry\";\nimport Swap from \"./swap\";\nimport \"./App.css\";\n\n// App illustrating the use of the Swap component.\n//\n// One needs to just provide an Anchor `Provider` and a `TokenListContainer`\n// to the `Swap` component, and then everything else is taken care of.\nfunction App() {\n  return (\n    <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n      <AppInner />\n    </SnackbarProvider>\n  );\n}\n\nfunction AppInner() {\n  const { enqueueSnackbar } = useSnackbar();\n  const [isConnected, setIsConnected] = useState(false);\n  const [tokenList, setTokenList] = useState<TokenListContainer | null>(null);\n\n  const [provider, wallet] = useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    const network = \"https://solana-api.projectserum.com\";\n    const wallet = new Wallet(\"https://www.sollet.io\", network);\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new NotifyingProvider(\n      connection,\n      wallet,\n      opts,\n      (tx, err) => {\n        if (err) {\n          enqueueSnackbar(`Error: ${err.toString()}`, {\n            variant: \"error\",\n          });\n        } else {\n          enqueueSnackbar(\"Transaction sent\", {\n            variant: \"success\",\n            action: (\n              <Button\n                color=\"inherit\"\n                component=\"a\"\n                target=\"_blank\"\n                rel=\"noopener\"\n                href={`https://explorer.solana.com/tx/${tx}`}\n              >\n                View on Solana Explorer\n              </Button>\n            ),\n          });\n        }\n      }\n    );\n    return [provider, wallet];\n  }, [enqueueSnackbar]);\n\n  useEffect(() => {\n    new TokenListProvider().resolve().then(setTokenList);\n  }, [setTokenList]);\n\n  // Connect to the wallet.\n  useEffect(() => {\n    wallet.on(\"connect\", () => {\n      enqueueSnackbar(\"Wallet connected\", { variant: \"success\" });\n      setIsConnected(true);\n    });\n    wallet.on(\"disconnect\", () => {\n      enqueueSnackbar(\"Wallet disconnected\", { variant: \"info\" });\n      setIsConnected(false);\n    });\n  }, [wallet, enqueueSnackbar]);\n\n  return (\n    <div\n      style={{\n        width: \"450px\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        position: \"absolute\",\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Button\n        variant=\"outlined\"\n        onClick={() => (!isConnected ? wallet.connect() : wallet.disconnect())}\n        style={{ position: \"fixed\", right: 24, top: 24 }}\n      >\n        {!isConnected ? \"Connect\" : \"Disconnect\"}\n      </Button>\n      {tokenList && <Swap provider={provider} tokenList={tokenList} />}\n    </div>\n  );\n}\n\n// Custom provider to display notifications whenever a transaction is sent.\n//\n// Note that this is an Anchor wallet/network provider--not a React provider,\n// so all transactions will be flowing through here, which allows us to\n// hook in to display all transactions sent from the `Swap` component\n// as notifications in the parent app.\nclass NotifyingProvider extends Provider {\n  // Function to call whenever the provider sends a transaction;\n  private onTransaction: (\n    tx: TransactionSignature | undefined,\n    err?: Error\n  ) => void;\n\n  constructor(\n    connection: Connection,\n    wallet: Wallet,\n    opts: ConfirmOptions,\n    onTransaction: (tx: TransactionSignature | undefined, err?: Error) => void\n  ) {\n    super(connection, wallet, opts);\n    this.onTransaction = onTransaction;\n  }\n\n  async send(\n    tx: Transaction,\n    signers?: Array<Account | undefined>,\n    opts?: ConfirmOptions\n  ): Promise<TransactionSignature> {\n    try {\n      // A production implementation should handle error notifications as well.\n      const txSig = await super.send(tx, signers, opts);\n      this.onTransaction(txSig);\n      return txSig;\n    } catch (err) {\n      this.onTransaction(undefined, err);\n      throw err;\n    }\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}