{"version":3,"sources":["utils/tokens.ts","components/Context.tsx","components/TokenDialog.tsx","components/Swap.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["connection","publicKey","a","filters","getOwnedAccountsFilters","_rpcRequest","TOKEN_PROGRAM_ID","toBase58","commitment","resp","error","Error","message","result","map","pubkey","account","data","executable","owner","lamports","PublicKey","accountInfo","bs58","filter","every","dataSize","length","memcmp","filterBytes","bytes","slice","offset","equals","parseTokenAccountData","ACCOUNT_LAYOUT","BufferLayout","decode","mint","amount","BN","offsetOf","span","SRM_MINT","USDC_MINT","USDT_MINT","SwapContext","React","createContext","SwapContextProvider","props","swapClient","useState","fromMint","setFromMint","toMint","setToMint","fromAmount","setFromAmount","toAmount","setToAmount","undefined","fromBalance","toBalance","minExpectedAmount","ownedTokenAccounts","setOwnedTokenAccounts","Map","mintCache","setMintCache","useEffect","getOwnedTokenAccounts","program","provider","wallet","then","fromMintClient","Token","Account","toMintClient","promises","get","toString","push","getMintInfo","Promise","all","fromMintInfo","toMintInfo","cache","set","Provider","value","swapToFromMints","oldFrom","oldFromAmount","oldToAmount","children","useSwapContext","ctx","useContext","TokenListContext","TokenListContextProvider","tokenList","useTokenList","getList","useStyles","makeStyles","theme","dialogContent","paddingTop","textField","width","border","borderRadius","marginBottom","TokenDialog","open","onClose","setMint","tokenFilter","setTokenFilter","styles","Dialog","PaperProps","style","DialogTitle","fontWeight","DialogContent","className","TextField","placeholder","onChange","e","target","InputProps","disableUnderline","padding","List","disablePadding","tokens","concat","TokenListItem","onClick","ListItem","button","TokenIcon","TokenName","tokenInfo","t","address","marginLeft","Typography","symbol","color","fontSize","name","card","cardContent","marginRight","tab","settings","display","flexDirection","settingsButton","swapButton","swapToFromButton","auxilliaryLabel","marginTop","justifyContent","Swap","SwapClient","SwapInner","Card","SwapHeader","SwapFromForm","SwapToFromButton","SwapToForm","AuxilliaryLabel","SwapButton","margin","SettingsButton","toPrice","toFixed","fromTokenInfo","toTokenInfo","Info","Button","IconButton","Settings","SwapTokenForm","isEstimate","setAmount","showTokenDialog","setShowTokenDialog","tokenAccount","tokenAccounts","sort","b","useOwnedTokenAccount","mintAccount","useMintAccount","Paper","elevation","variant","height","TokenButton","type","parseFloat","toNumber","decimals","ExpandMore","logoURI","alt","src","sendSwapTransaction","console","log","App","params","setParams","isConnected","setIsConnected","opts","preflightCommitment","network","Wallet","Connection","TokenListProvider","resolve","connect","on","position","left","right","top","bottom","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qsBASO,WACLA,EACAC,GAFK,iBAAAC,EAAA,6DAIDC,EAAUC,EAAwBH,GAJjC,SAMYD,EAAWK,YAAY,qBAAsB,CAC5DC,mBAAiBC,WACjB,CACEC,WAAYR,EAAWQ,WACvBL,aAVC,YAMDM,EANC,QAaIC,MAbJ,sBAcG,IAAIC,MACR,yCACEV,EAAUM,WACV,KACAE,EAAKC,MAAME,SAlBZ,gCAqBEH,EAAKI,OACTC,KAAI,gBAAGC,EAAH,EAAGA,OAAH,IAAWC,QAAWC,EAAtB,EAAsBA,KAAMC,EAA5B,EAA4BA,WAAYC,EAAxC,EAAwCA,MAAOC,EAA/C,EAA+CA,SAA/C,MAAsE,CACzEnB,UAAW,IAAIoB,YAAUN,GACzBO,YAAa,CACXL,KAAMM,SAAYN,GAClBC,aACAC,MAAO,IAAIE,YAAUF,GACrBC,gBAGHI,QAAO,YAA2B,IAAxBF,EAAuB,EAAvBA,YAET,OAAOnB,EAAQsB,OAAM,SAACD,GACpB,GAAIA,EAAOE,SACT,OAAOJ,EAAYL,KAAKU,SAAWH,EAAOE,SACrC,GAAIF,EAAOI,OAAQ,CACxB,IAAIC,EAAcN,SAAYC,EAAOI,OAAOE,OAC5C,OAAOR,EAAYL,KAChBc,MACCP,EAAOI,OAAOI,OACdR,EAAOI,OAAOI,OAASH,EAAYF,QAEpCM,OAAOJ,GAEZ,OAAO,QAGVf,KAAI,YACH,MAAO,CAAEb,UAD+B,EAAlCA,UACce,QAASkB,EADW,EAAvBZ,YAC8CL,WAjD9D,4C,sBAqDA,IAAMkB,EAAiBC,SAAoB,CAChDA,OAAkB,GAAI,QACtBA,OAAkB,GAAI,SACtBA,OAAkB,UAClBA,OAAkB,MAGOA,SAAoB,CAC7CA,OAAkB,IAClBA,KAAgB,YAChBA,OAAkB,MAGb,SAASF,EAAsBjB,GAAc,MAEpBkB,EAAeE,OAAOpB,GAA9CqB,EAF4C,EAE5CA,KAAMnB,EAFsC,EAEtCA,MAAOoB,EAF+B,EAE/BA,OACnB,MAAO,CACLD,KAAM,IAAIjB,YAAUiB,GACpBnB,MAAO,IAAIE,YAAUF,GACrBoB,OAAQ,IAAIC,KAAGD,IAUnB,SAASnC,EAAwBH,GAC/B,MAAO,CACL,CACE2B,OAAQ,CAENI,OAAQG,EAAeM,SAAS,SAChCX,MAAO7B,EAAUM,aAGrB,CACEmB,SAAUS,EAAeO,O,YCzFzBC,EAAW,IAAItB,YAAU,+CAClBuB,EAAY,IAAIvB,YAC3B,gDAEWwB,EAAY,IAAIxB,YAC3B,gDAGIyB,EAAcC,IAAMC,cAAkC,MAErD,SAASC,EAAoBC,GAClC,IAAMC,EAAaD,EAAMC,WADqB,EAEdC,mBAAST,GAFK,mBAEvCU,EAFuC,KAE7BC,EAF6B,OAGlBF,mBAASR,GAHS,mBAGvCW,EAHuC,KAG/BC,EAH+B,OAIVJ,mBAAS,GAJC,mBAIvCK,EAJuC,KAI3BC,EAJ2B,OAKdN,mBAAS,GALK,mBAKvCO,EALuC,KAK7BC,EAL6B,OAMRR,wBAASS,GAND,mBAMvCC,EANuC,aAOZV,wBAASS,IAPG,mBAOvCE,EAPuC,aAQIX,mBAAS,IARb,mBAQvCY,EARuC,aASMZ,wBAASS,IATf,mBASvCI,EATuC,KASnBC,EATmB,OAUZd,mBAAS,IAAIe,KAVD,mBAUvCC,EAVuC,KAU5BC,EAV4B,KAa9CC,qBAAU,YD1BL,SAAP,qCC2BIC,CACEpB,EAAWqB,QAAQC,SAASzE,WAC5BmD,EAAWqB,QAAQC,SAASC,OAAOzE,WACnC0E,KAAKT,KACN,CACDf,EAAWqB,QAAQC,SAASC,OAAOzE,UACnCkD,EAAWqB,QAAQC,SAASzE,aAI9BsE,qBAAU,WACR,IAAMM,EAAiB,IAAIC,QACzB1B,EAAWqB,QAAQC,SAASzE,WAC5BqD,EACA/C,mBACA,IAAIwE,WAEAC,EAAe,IAAIF,QACvB1B,EAAWqB,QAAQC,SAASzE,WAC5BuD,EACAjD,mBACA,IAAIwE,WAGFE,EAAW,GACXZ,EAAUa,IAAI5B,EAAS6B,YACzBF,EAASG,KACP,sBAAC,sBAAAjF,EAAA,+EACQkE,EAAUa,IAAI5B,EAAS6B,aAD/B,0CAAD,IAKFF,EAASG,KAAKP,EAAeQ,eAE3BhB,EAAUa,IAAI1B,EAAO2B,YACvBF,EAASG,KACP,sBAAC,sBAAAjF,EAAA,+EACQkE,EAAUa,IAAI1B,EAAO2B,aAD7B,0CAAD,IAKFF,EAASG,KAAKJ,EAAaK,eAG7BC,QAAQC,IAAIN,GAAoDL,MAC9D,YAAuD,IAAD,mBAApDY,EAAoD,KAAtCC,EAAsC,KAChDC,EAAQ,IAAItB,IAAIC,GACpBqB,EAAMC,IAAIrC,EAAS6B,WAAYK,GAC/BE,EAAMC,IAAInC,EAAO2B,WAAYM,GAC7BnB,EAAaoB,QAGhB,CAACpC,EAAUE,IAad,OACE,cAACT,EAAY6C,SAAb,CACEC,MAAO,CACLzC,aACAE,WACAC,cACAC,SACAC,YACAC,aACAC,gBACAC,WACAC,cACAI,oBACA6B,gBAxBkB,WACtB,IAAMC,EAAUzC,EACV0C,EAAgBtC,EAEhBuC,EAAcrC,EACpBL,EAFcC,GAGdC,EAAUsC,GACVpC,EAAcsC,GACdpC,EAAYmC,IAiBRjC,cACAC,YACAE,qBACAG,aAhBJ,SAmBGlB,EAAM+C,WAKN,SAASC,IACd,IAAMC,EAAMC,qBAAWtD,GACvB,GAAY,OAARqD,EACF,MAAM,IAAIxF,MAAM,yBAElB,OAAOwF,EAyBT,IAAME,EAAmBtD,IAAMC,cAAuC,MAE/D,SAASsD,EAAyBpD,GACvC,OACE,cAACmD,EAAiBV,SAAlB,CAA2BC,MAAO,CAAEW,UAAWrD,EAAMqD,WAArD,SACGrD,EAAM+C,WASN,SAASO,IACd,IAAML,EAAMC,qBAAWC,GACvB,GAAY,OAARF,EACF,MAAM,IAAIxF,MAAM,yBAElB,OAAOwF,EAAII,UAAUE,U,iDChKjBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,cAAe,CACbC,WAAY,GAEdC,UAAW,CACTC,MAAO,OACPC,OAAQ,iBACRC,aAAc,OACdC,aAAc,WAIH,SAASC,EAAT,GAQX,IAPFC,EAOC,EAPDA,KACAC,EAMC,EANDA,QACAC,EAKC,EALDA,QAKC,EACqCnE,mBAAS,IAD9C,mBACMoE,EADN,KACmBC,EADnB,KAEKC,EAAShB,IACPvD,EAAe+C,IAAf/C,WACR,OACE,cAACwE,EAAA,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTM,WAAY,CACVC,MAAO,CACLX,aAAc,SALpB,SASE,sBAAKW,MAAO,CAAEb,MAAO,SAArB,UACE,cAACc,EAAA,EAAD,CAAaD,MAAO,CAAEE,WAAY,QAAlC,4BACA,eAACC,EAAA,EAAD,CAAeC,UAAWP,EAAOb,cAAjC,UACE,cAACqB,EAAA,EAAD,CACED,UAAWP,EAAOX,UAClBoB,YAAa,cACbvC,MAAO4B,EACPY,SAAU,SAACC,GAAD,OAAOZ,EAAeY,EAAEC,OAAO1C,QACzC2C,WAAY,CACVC,kBAAkB,EAClBX,MAAO,CAAEY,QAAS,WAGtB,8BACE,cAACC,EAAA,EAAD,CAAMC,gBAAc,EAApB,SACGxF,EACEyF,SACAC,OAAO,CAACjG,EAAWC,IACnB/B,KAAI,SAACwB,GAAD,OACH,cAACwG,EAAD,CACExG,KAAMA,EACNyG,QAAS,SAACzG,GACRiF,EAAQjF,GACRgF,sBAYtB,SAASwB,EAAT,GAMI,IALFxG,EAKC,EALDA,KACAyG,EAIC,EAJDA,QAKA,OACE,eAACC,EAAA,EAAD,CAAUC,QAAM,EAACF,QAAS,kBAAMA,EAAQzG,IAAxC,UACE,cAAC4G,GAAD,CAAW5G,KAAMA,EAAMuF,MAAO,CAAEb,MAAO,OAAQE,aAAc,UAC7D,cAACiC,EAAD,CAAW7G,KAAMA,OAKvB,SAAS6G,EAAT,GAAmD,IAA9B7G,EAA6B,EAA7BA,KAEf8G,EADc5C,IACQhF,QAAO,SAAC6H,GAAD,OAAOA,EAAEC,UAAYhH,EAAK4C,cAAY,GACvE,OACE,sBAAK2C,MAAO,CAAE0B,WAAY,QAA1B,UACE,cAACC,EAAA,EAAD,CAAY3B,MAAO,CAAEE,WAAY,QAAjC,SAA4CqB,EAAUK,SACtD,cAACD,EAAA,EAAD,CAAYE,MAAM,gBAAgB7B,MAAO,CAAE8B,SAAU,QAArD,SACGP,EAAUQ,UC/EnB,IAAMlD,EAAYC,aAAW,iBAAO,CAClCkD,KAAM,CACJ7C,MAAO,QACPE,aAAc,OACdD,OAAQ,qBAEV6C,YAAa,CACXP,WAAY,MACZQ,YAAa,MACb5C,aAAc,OAEhB6C,IAAK,CACHhD,MAAO,OAETiD,SAAU,CACRC,QAAS,OACTC,cAAe,eAEjBC,eAAgB,CACd3B,QAAS,GAEX4B,WAAY,CACVrD,MAAO,OACPE,aAAc,QAEhBoD,iBAAkB,CAChBJ,QAAS,QACTX,WAAY,OACZQ,YAAa,QAEfQ,gBAAiB,CACfC,UAAW,OACXrD,aAAc,OACd+C,QAAS,OACTO,eAAgB,gBAChBlB,WAAY,MACZQ,YAAa,WAIF,SAASW,EAAT,GAQX,IAPF7C,EAOC,EAPDA,MACApD,EAMC,EANDA,SACA8B,EAKC,EALDA,UAMMpD,EAAa,IAAIwH,OAAWlG,EAAU8B,GAC5C,OACE,cAACtD,EAAD,CAAqBE,WAAYA,EAAjC,SACE,cAACmD,EAAD,CAA0BC,UAAWA,EAArC,SACE,cAACqE,GAAD,CAAW/C,MAAOA,QAM1B,SAAS+C,GAAT,GAAgD,IAA3B/C,EAA0B,EAA1BA,MACbH,EAAShB,IACf,OACE,qBAAKmB,MAAOA,EAAZ,SACE,eAACgD,EAAA,EAAD,CAAM5C,UAAWP,EAAOmC,KAAxB,UACE,cAACiB,GAAD,IACA,sBAAK7C,UAAWP,EAAOoC,YAAvB,UACE,cAACiB,GAAD,IACA,cAACC,GAAD,IACA,cAACC,GAAD,IACA,cAACC,GAAD,IACA,cAACC,GAAD,YAOV,SAASL,KACP,OACE,sBACEjD,MAAO,CACLqC,QAAS,OACTO,eAAgB,gBAChBW,OAAQ,OAJZ,UAOE,cAAC5B,EAAA,EAAD,CACE3B,MAAO,CACLE,WAAY,OACZmC,QAAS,OACTO,eAAgB,SAChBN,cAAe,UALnB,kBAUA,cAACkB,GAAD,OAKN,SAASH,KACP,IAAMxD,EAAShB,IADU,EAG0BR,IAA3C7C,EAHiB,EAGjBA,SAAUE,EAHO,EAGPA,OAAQE,EAHD,EAGCA,WAAYE,EAHb,EAGaA,SAChC2H,GAAW7H,EAAaE,GAAU4H,QAAQ,GAE1ChF,EAAYC,IACdgF,EAAgBjF,EAAU/E,QAC5B,SAAC6H,GAAD,OAAOA,EAAEC,UAAYjG,EAAS6B,cAC9B,GACEuG,EAAclF,EAAU/E,QAAO,SAAC6H,GAAD,OAAOA,EAAEC,UAAY/F,EAAO2B,cAAY,GAE3E,OACE,sBAAK+C,UAAWP,EAAO6C,gBAAvB,UACE,cAACf,EAAA,EAAD,CAAYE,MAAM,gBAAlB,mBACA,sBAAK7B,MAAO,CAAEqC,QAAS,QAAvB,UACE,qBACErC,MAAO,CACLkC,YAAa,OACbG,QAAS,OACTO,eAAgB,SAChBN,cAAe,UALnB,SAQkB,IAAf1G,GAAiC,IAAbE,EAApB,YACQ8H,EAAYhC,OADpB,cACgC6B,EADhC,YAC2CE,EAAc/B,QADzD,MAIH,cAACiC,EAAA,EAAD,UAgBD,SAASV,KACd,IAAMtD,EAAShB,IACPb,EAAoBK,IAApBL,gBACR,OACE,cAAC8F,EAAA,EAAD,CAAQ1D,UAAWP,EAAO4C,iBAAkBvB,QAASlD,EAArD,oBAMJ,SAASwF,KACP,IAAM3D,EAAShB,IACf,OACE,qBAAKuB,UAAWP,EAAOuC,SAAvB,SACE,cAAC2B,EAAA,EAAD,CAAY3D,UAAWP,EAAO0C,eAA9B,SACE,cAACyB,EAAA,EAAD,QAMR,SAASd,KAAgB,IAAD,EACuC7E,IAArD7C,EADc,EACdA,SAAUC,EADI,EACJA,YAAaG,EADT,EACSA,WAAYC,EADrB,EACqBA,cAC3C,OACE,cAACoI,GAAD,CACEC,YAAY,EACZzJ,KAAMe,EACNkE,QAASjE,EACTf,OAAQkB,EACRuI,UAAWtI,IAKjB,SAASuH,KAAc,IAAD,EACiC/E,IAA7C3C,EADY,EACZA,OAAQC,EADI,EACJA,UAAWG,EADP,EACOA,SAAUC,EADjB,EACiBA,YACrC,OACE,cAACkI,GAAD,CACEC,YAAY,EACZzJ,KAAMiB,EACNgE,QAAS/D,EACTjB,OAAQoB,EACRqI,UAAWpI,IAKjB,SAASkI,GAAT,GAYG,EAXDC,WAWE,IAVFzJ,EAUC,EAVDA,KACAiF,EASC,EATDA,QACAhF,EAQC,EARDA,OACAyJ,EAOC,EAPDA,UAOC,EAC6C5I,oBAAS,GADtD,mBACM6I,EADN,KACuBC,EADvB,KAEKC,EFrDD,SACL7J,GAEA,IAAM6D,EAAMC,qBAAWtD,GACvB,GAAY,OAARqD,EACF,MAAM,IAAIxF,MAAM,yBAElB,QAA+BkD,IAA3BsC,EAAIlC,mBAAR,CAGA,IAAMmI,EAAgBjG,EAAIlC,mBAAmBzC,QAAO,SAACR,GAAD,OAClDA,EAAQA,QAAQsB,KAAKL,OAAOK,MAG9B,OAA6B,IAAzB8J,EAAczK,OACT,MAITyK,EAAcC,MAAK,SAACnM,EAAGoM,GAAJ,OACjBpM,EAAEc,QAAQuB,OAASrC,EAAEc,QAAQuB,QACxB,EACDrC,EAAEc,QAAQuB,OAAS+J,EAAEtL,QAAQuB,OAC7B,EACA,KAEC6J,EAAc,KE2BAG,CAAqBjK,GACpCkK,EFzBD,SAAwBlK,GAC7B,IAAM6D,EAAMC,qBAAWtD,GACvB,GAAY,OAARqD,EACF,MAAM,IAAIxF,MAAM,yBAElB,OAAOwF,EAAI/B,UAAUa,IAAI3C,EAAK4C,YEoBVuH,CAAenK,GAEnC,OACE,eAACoK,EAAA,EAAD,CAAOC,UAAW,EAAGC,QAAQ,WAA7B,UACE,sBACE/E,MAAO,CACLgF,OAAQ,OACR3C,QAAS,OACTO,eAAgB,iBAJpB,UAOE,cAACqC,GAAD,CAAaxK,KAAMA,EAAMyG,QAAS,kBAAMmD,GAAmB,MAC3D,cAAChE,EAAA,EAAD,CACE6E,KAAK,SACLnH,MAAOrD,EACP6F,SAAU,SAACC,GAAD,OAAO2D,EAAUgB,WAAW3E,EAAEC,OAAO1C,SAC/CiC,MAAO,CACLqC,QAAS,OACTO,eAAgB,SAChBN,cAAe,eAIrB,qBAAKtC,MAAO,CAAE0B,WAAY,OAAQsD,OAAQ,QAA1C,SACE,cAACrD,EAAA,EAAD,CAAYE,MAAM,gBAAgB7B,MAAO,CAAE8B,SAAU,QAArD,SACGwC,GAAgBK,EAAhB,oBAEKL,EAAanL,QAAQuB,OAAO0K,WAA5B,SACA,GAAMT,EAAYU,WAClB3B,QAAQiB,EAAYU,WAJzB,QAQL,cAAC9F,EAAD,CACEG,QAASA,EACTF,KAAM4E,EACN3E,QAAS,kBAAM4E,GAAmB,SAM1C,SAASY,GAAT,GAMI,IALFxK,EAKC,EALDA,KACAyG,EAIC,EAJDA,QAKA,OACE,eAAC4C,EAAA,EAAD,CAAQ5C,QAASA,EAASlB,MAAO,CAAEb,MAAO,SAA1C,UACE,cAACkC,GAAD,CAAW5G,KAAMA,EAAMuF,MAAO,CAAEb,MAAO,UACvC,cAAC,GAAD,CAAW1E,KAAMA,IACjB,cAAC6K,EAAA,EAAD,OAKC,SAASjE,GAAT,GAAsE,IAAjD5G,EAAgD,EAAhDA,KAAMuF,EAA0C,EAA1CA,MAE5BuB,EADc5C,IACQhF,QAAO,SAAC6H,GAAD,OAAOA,EAAEC,UAAYhH,EAAK4C,cAAY,GACvE,OACE,qBACE2C,MAAO,CACLqC,QAAS,OACTO,eAAgB,SAChBN,cAAe,UAJnB,SAOGf,EAAUgE,QACT,qBAAKC,IAAI,aAAaxF,MAAOA,EAAOyF,IAAKlE,EAAUgE,UAEnD,qBAAKvF,MAAOA,MAMpB,SAASsB,GAAT,GAAmD,IAA9B7G,EAA6B,EAA7BA,KAEf8G,EADc5C,IACQhF,QAAO,SAAC6H,GAAD,OAAOA,EAAEC,UAAYhH,EAAK4C,cAAY,GACvE,OACE,cAACsE,EAAA,EAAD,CAAY3B,MAAO,CAAE0B,WAAY,OAAjC,SAA2CH,EAAUK,SAIzD,SAAS0B,KACP,IAAMzD,EAAShB,IADK,EAEwCR,IAEtDqH,GAJc,EAEZlK,SAFY,EAEFE,OAFE,EAEME,WAFN,EAEkBO,kBAEb,uCAAG,sBAAA9D,EAAA,sDAC1BsN,QAAQC,IAAI,gBADc,2CAAH,sDAGzB,OACE,cAAC9B,EAAA,EAAD,CACEiB,QAAQ,YACR3E,UAAWP,EAAO2C,WAClBtB,QAASwE,EAHX,kB,OCpQWG,OA1Df,WAAgB,IAAD,EACetK,mBAAc,MAD7B,mBACNuK,EADM,KACEC,EADF,OAEyBxK,oBAAS,GAFlC,mBAENyK,EAFM,KAEOC,EAFP,KAiCb,OA5BAxJ,qBAAU,WACR,IAAMyJ,EAAuB,CAC3BC,oBAAqB,SACrBxN,WAAY,UAERyN,EAAU,sCACVvJ,EAAS,IAAIwJ,IAAO,wBAAyBD,GAC7CjO,EAAa,IAAImO,aAAWF,EAASF,EAAKC,qBAC1CvJ,EAAW,IAAIkB,WAAS3F,EAAY0E,EAAQqJ,IAClD,IAAIK,KAAoBC,UAAU1J,MAAK,SAAC4B,GACtCqH,EAAU,CACRnJ,WACA8B,cAEF7B,EAAO4J,eAER,CAACV,IAGJtJ,qBAAU,WACO,OAAXqJ,IACFA,EAAOlJ,SAASC,OAAO6J,GAAG,WAAW,WACnCT,GAAe,MAEjBH,EAAOlJ,SAASC,OAAO4J,aAExB,CAACX,IAGF,qBACE9F,MAAO,CACLb,MAAO,QACPuC,WAAY,OACZQ,YAAa,OACbyE,SAAU,WACVC,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,OAAQ,EACR1E,QAAS,OACTO,eAAgB,SAChBN,cAAe,UAZnB,SAeG0D,EACC,cAACnD,EAAD,CAAMjG,SAAUkJ,EAAOlJ,SAAU8B,UAAWoH,EAAOpH,YAEnD,cAACiD,EAAA,EAAD,CAAY3B,MAAO,CAAEgH,UAAW,UAAhC,6BChDOC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBrK,MAAK,YAAkD,IAA/CsK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.5ec47d16.chunk.js","sourcesContent":["// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet..\n\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as bs58 from \"bs58\";\n\nexport async function getOwnedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey\n) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection._rpcRequest(\"getProgramAccounts\", [\n    TOKEN_PROGRAM_ID.toBase58(),\n    {\n      commitment: connection.commitment,\n      filters,\n    },\n  ]);\n  if (resp.error) {\n    throw new Error(\n      \"failed to get token accounts owned by \" +\n        publicKey.toBase58() +\n        \": \" +\n        resp.error.message\n    );\n  }\n  return resp.result\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data: bs58.decode(data),\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .filter(({ accountInfo }: any) => {\n      // TODO: remove this check once mainnet is updated\n      return filters.every((filter) => {\n        if (filter.dataSize) {\n          return accountInfo.data.length === filter.dataSize;\n        } else if (filter.memcmp) {\n          let filterBytes = bs58.decode(filter.memcmp.bytes);\n          return accountInfo.data\n            .slice(\n              filter.memcmp.offset,\n              filter.memcmp.offset + filterBytes.length\n            )\n            .equals(filterBytes);\n        }\n        return false;\n      });\n    })\n    .map(({ publicKey, accountInfo }: any) => {\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\n    });\n}\n\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, \"mint\"),\n  BufferLayout.blob(32, \"owner\"),\n  BufferLayout.nu64(\"amount\"),\n  BufferLayout.blob(93),\n]);\n\nexport const MINT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(44),\n  BufferLayout.u8(\"decimals\"),\n  BufferLayout.blob(37),\n]);\n\nexport function parseTokenAccountData(data: Buffer) {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount),\n  };\n}\n\nexport function parseMintData(data: Buffer) {\n  // @ts-ignore\n  let { decimals } = MINT_LAYOUT.decode(data);\n  return { decimals };\n}\n\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport { PublicKey, Account } from \"@solana/web3.js\";\nimport {\n  AccountInfo as TokenAccount,\n  MintInfo,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { TokenListContainer, TokenInfo } from \"@solana/spl-token-registry\";\nimport { getOwnedTokenAccounts } from \"../utils/tokens\";\n\nconst SRM_MINT = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\nexport const USDC_MINT = new PublicKey(\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n);\nexport const USDT_MINT = new PublicKey(\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"\n);\n\nconst SwapContext = React.createContext<null | SwapContext>(null);\n\nexport function SwapContextProvider(props: any) {\n  const swapClient = props.swapClient;\n  const [fromMint, setFromMint] = useState(SRM_MINT);\n  const [toMint, setToMint] = useState(USDC_MINT);\n  const [fromAmount, setFromAmount] = useState(0);\n  const [toAmount, setToAmount] = useState(0);\n  const [fromBalance, setFromBalance] = useState(undefined);\n  const [toBalance, setToBalance] = useState(undefined);\n  const [minExpectedAmount, setMinExpectedAmount] = useState(0);\n  const [ownedTokenAccounts, setOwnedTokenAccounts] = useState(undefined);\n  const [mintCache, setMintCache] = useState(new Map<string, MintInfo>());\n\n  // Fetch all the owned token accounts for the wallet.\n  useEffect(() => {\n    getOwnedTokenAccounts(\n      swapClient.program.provider.connection,\n      swapClient.program.provider.wallet.publicKey\n    ).then(setOwnedTokenAccounts);\n  }, [\n    swapClient.program.provider.wallet.publicKey,\n    swapClient.program.provider.connection,\n  ]);\n\n  // Fetch the mint account infos not already in the cache.\n  useEffect(() => {\n    const fromMintClient = new Token(\n      swapClient.program.provider.connection,\n      fromMint,\n      TOKEN_PROGRAM_ID,\n      new Account()\n    );\n    const toMintClient = new Token(\n      swapClient.program.provider.connection,\n      toMint,\n      TOKEN_PROGRAM_ID,\n      new Account()\n    );\n\n    let promises = [];\n    if (mintCache.get(fromMint.toString())) {\n      promises.push(\n        (async (): Promise<MintInfo> => {\n          return mintCache.get(fromMint.toString()) as MintInfo;\n        })()\n      );\n    } else {\n      promises.push(fromMintClient.getMintInfo());\n    }\n    if (mintCache.get(toMint.toString())) {\n      promises.push(\n        (async (): Promise<MintInfo> => {\n          return mintCache.get(toMint.toString()) as MintInfo;\n        })()\n      );\n    } else {\n      promises.push(toMintClient.getMintInfo());\n    }\n\n    Promise.all(promises as [Promise<MintInfo>, Promise<MintInfo>]).then(\n      ([fromMintInfo, toMintInfo]: [MintInfo, MintInfo]) => {\n        let cache = new Map(mintCache);\n        cache.set(fromMint.toString(), fromMintInfo);\n        cache.set(toMint.toString(), toMintInfo);\n        setMintCache(cache);\n      }\n    );\n  }, [fromMint, toMint]);\n\n  const swapToFromMints = () => {\n    const oldFrom = fromMint;\n    const oldFromAmount = fromAmount;\n    const oldTo = toMint;\n    const oldToAmount = toAmount;\n    setFromMint(oldTo);\n    setToMint(oldFrom);\n    setFromAmount(oldToAmount);\n    setToAmount(oldFromAmount);\n  };\n\n  return (\n    <SwapContext.Provider\n      value={{\n        swapClient,\n        fromMint,\n        setFromMint,\n        toMint,\n        setToMint,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        minExpectedAmount,\n        swapToFromMints,\n        fromBalance,\n        toBalance,\n        ownedTokenAccounts,\n        mintCache,\n      }}\n    >\n      {props.children}\n    </SwapContext.Provider>\n  );\n}\n\nexport function useSwapContext(): SwapContext {\n  const ctx = useContext(SwapContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport type SwapContext = {\n  swapClient: SwapClient;\n  fromMint: PublicKey;\n  setFromMint: (m: PublicKey) => void;\n  toMint: PublicKey;\n  setToMint: (m: PublicKey) => void;\n  fromAmount: number;\n  setFromAmount: (a: number) => void;\n  toAmount: number;\n  setToAmount: (a: number) => void;\n  minExpectedAmount: number;\n  swapToFromMints: () => void;\n  fromBalance?: number;\n  toBalance?: number;\n  fromMintAccount?: MintInfo;\n  toMintAccount?: MintInfo;\n  ownedTokenAccounts:\n    | { publicKey: PublicKey; account: TokenAccount }[]\n    | undefined;\n  mintCache: Map<string, MintInfo>;\n};\n\nconst TokenListContext = React.createContext<null | TokenListContext>(null);\n\nexport function TokenListContextProvider(props: any) {\n  return (\n    <TokenListContext.Provider value={{ tokenList: props.tokenList }}>\n      {props.children}\n    </TokenListContext.Provider>\n  );\n}\n\ntype TokenListContext = {\n  tokenList: TokenListContainer;\n};\n\nexport function useTokenList(): TokenInfo[] {\n  const ctx = useContext(TokenListContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx.tokenList.getList();\n}\n\n// Null => none exists.\n// Undefined => loading.\nexport function useOwnedTokenAccount(\n  mint: PublicKey\n): { publicKey: PublicKey; account: TokenAccount } | null | undefined {\n  const ctx = useContext(SwapContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  if (ctx.ownedTokenAccounts === undefined) {\n    return undefined;\n  }\n  const tokenAccounts = ctx.ownedTokenAccounts.filter((account) =>\n    account.account.mint.equals(mint)\n  );\n\n  if (tokenAccounts.length === 0) {\n    return null;\n  }\n\n  // Take the account with the most tokens in it.\n  tokenAccounts.sort((a, b) =>\n    a.account.amount < a.account.amount\n      ? -1\n      : a.account.amount > b.account.amount\n      ? 1\n      : 0\n  );\n  return tokenAccounts[0];\n}\n\nexport function useMintAccount(mint: PublicKey): MintInfo | undefined {\n  const ctx = useContext(SwapContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx.mintCache.get(mint.toString());\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  List,\n  ListItem,\n  Typography,\n} from \"@material-ui/core\";\nimport { useSwapContext, useTokenList, USDC_MINT, USDT_MINT } from \"./Context\";\nimport { TokenIcon } from \"./Swap\";\n\nconst useStyles = makeStyles((theme) => ({\n  dialogContent: {\n    paddingTop: 0,\n  },\n  textField: {\n    width: \"100%\",\n    border: \"solid 1pt #ccc\",\n    borderRadius: \"10px\",\n    marginBottom: \"8px\",\n  },\n}));\n\nexport default function TokenDialog({\n  open,\n  onClose,\n  setMint,\n}: {\n  open: boolean;\n  onClose: () => void;\n  setMint: (mint: PublicKey) => void;\n}) {\n  const [tokenFilter, setTokenFilter] = useState(\"\");\n  const styles = useStyles();\n  const { swapClient } = useSwapContext();\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n        },\n      }}\n    >\n      <div style={{ width: \"420px\" }}>\n        <DialogTitle style={{ fontWeight: \"bold\" }}>Select a token</DialogTitle>\n        <DialogContent className={styles.dialogContent}>\n          <TextField\n            className={styles.textField}\n            placeholder={\"Search name\"}\n            value={tokenFilter}\n            onChange={(e) => setTokenFilter(e.target.value)}\n            InputProps={{\n              disableUnderline: true,\n              style: { padding: \"10px\" },\n            }}\n          />\n          <div>\n            <List disablePadding>\n              {swapClient\n                .tokens()\n                .concat([USDC_MINT, USDT_MINT])\n                .map((mint) => (\n                  <TokenListItem\n                    mint={mint}\n                    onClick={(mint) => {\n                      setMint(mint);\n                      onClose();\n                    }}\n                  />\n                ))}\n            </List>\n          </div>\n        </DialogContent>\n      </div>\n    </Dialog>\n  );\n}\n\nfunction TokenListItem({\n  mint,\n  onClick,\n}: {\n  mint: PublicKey;\n  onClick: (mint: PublicKey) => void;\n}) {\n  return (\n    <ListItem button onClick={() => onClick(mint)}>\n      <TokenIcon mint={mint} style={{ width: \"30px\", borderRadius: \"15px\" }} />\n      <TokenName mint={mint} />\n    </ListItem>\n  );\n}\n\nfunction TokenName({ mint }: { mint: PublicKey }) {\n  const tokenList = useTokenList();\n  let tokenInfo = tokenList.filter((t) => t.address === mint.toString())[0];\n  return (\n    <div style={{ marginLeft: \"16px\" }}>\n      <Typography style={{ fontWeight: \"bold\" }}>{tokenInfo.symbol}</Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n        {tokenInfo.name}\n      </Typography>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenListContainer } from \"@solana/spl-token-registry\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  makeStyles,\n  Card,\n  Button,\n  Tabs,\n  Tab,\n  IconButton,\n  Paper,\n  Typography,\n  TextField,\n} from \"@material-ui/core\";\nimport { Settings, Info, ExpandMore } from \"@material-ui/icons\";\nimport {\n  SwapContextProvider,\n  TokenListContextProvider,\n  useSwapContext,\n  useTokenList,\n  useOwnedTokenAccount,\n  useMintAccount,\n} from \"./Context\";\nimport TokenDialog from \"./TokenDialog\";\n\nconst useStyles = makeStyles(() => ({\n  card: {\n    width: \"450px\",\n    borderRadius: \"10px\",\n    border: \"solid 1pt #e0e0e0\",\n  },\n  cardContent: {\n    marginLeft: \"6px\",\n    marginRight: \"6px\",\n    marginBottom: \"6px\",\n  },\n  tab: {\n    width: \"50%\",\n  },\n  settings: {\n    display: \"flex\",\n    flexDirection: \"row-reverse\",\n  },\n  settingsButton: {\n    padding: 0,\n  },\n  swapButton: {\n    width: \"100%\",\n    borderRadius: \"15px\",\n  },\n  swapToFromButton: {\n    display: \"block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n  auxilliaryLabel: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n  },\n}));\n\nexport default function Swap({\n  style,\n  provider,\n  tokenList,\n}: {\n  style?: any;\n  provider: Provider;\n  tokenList: TokenListContainer;\n}) {\n  const swapClient = new SwapClient(provider, tokenList);\n  return (\n    <SwapContextProvider swapClient={swapClient}>\n      <TokenListContextProvider tokenList={tokenList}>\n        <SwapInner style={style} />\n      </TokenListContextProvider>\n    </SwapContextProvider>\n  );\n}\n\nfunction SwapInner({ style }: { style?: any }) {\n  const styles = useStyles();\n  return (\n    <div style={style}>\n      <Card className={styles.card}>\n        <SwapHeader />\n        <div className={styles.cardContent}>\n          <SwapFromForm />\n          <SwapToFromButton />\n          <SwapToForm />\n          <AuxilliaryLabel />\n          <SwapButton />\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nfunction SwapHeader() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        margin: \"8px\",\n      }}\n    >\n      <Typography\n        style={{\n          fontWeight: \"bold\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        Swap\n      </Typography>\n      <SettingsButton />\n    </div>\n  );\n}\n\nfunction AuxilliaryLabel() {\n  const styles = useStyles();\n\n  const { fromMint, toMint, fromAmount, toAmount } = useSwapContext();\n  const toPrice = (fromAmount / toAmount).toFixed(6); // TODO: decimals per mint type.\n\n  const tokenList = useTokenList();\n  let fromTokenInfo = tokenList.filter(\n    (t) => t.address === fromMint.toString()\n  )[0];\n  let toTokenInfo = tokenList.filter((t) => t.address === toMint.toString())[0];\n\n  return (\n    <div className={styles.auxilliaryLabel}>\n      <Typography color=\"textSecondary\">Serum</Typography>\n      <div style={{ display: \"flex\" }}>\n        <div\n          style={{\n            marginRight: \"10px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          {fromAmount !== 0 && toAmount !== 0\n            ? `1 ${toTokenInfo.symbol} = ${toPrice} ${fromTokenInfo.symbol}`\n            : `-`}\n        </div>\n        <Info />\n      </div>\n    </div>\n  );\n}\n\nfunction TabSelector() {\n  const styles = useStyles();\n  return (\n    <Tabs>\n      <Tab label=\"Trade\" className={styles.tab} />\n      <Tab label=\"Accounts\" className={styles.tab} />\n    </Tabs>\n  );\n}\n\nexport function SwapToFromButton() {\n  const styles = useStyles();\n  const { swapToFromMints } = useSwapContext();\n  return (\n    <Button className={styles.swapToFromButton} onClick={swapToFromMints}>\n      ⇅\n    </Button>\n  );\n}\n\nfunction SettingsButton() {\n  const styles = useStyles();\n  return (\n    <div className={styles.settings}>\n      <IconButton className={styles.settingsButton}>\n        <Settings />\n      </IconButton>\n    </div>\n  );\n}\n\nfunction SwapFromForm() {\n  const { fromMint, setFromMint, fromAmount, setFromAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      isEstimate={false}\n      mint={fromMint}\n      setMint={setFromMint}\n      amount={fromAmount}\n      setAmount={setFromAmount}\n    />\n  );\n}\n\nfunction SwapToForm() {\n  const { toMint, setToMint, toAmount, setToAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      isEstimate={true}\n      mint={toMint}\n      setMint={setToMint}\n      amount={toAmount}\n      setAmount={setToAmount}\n    />\n  );\n}\n\nfunction SwapTokenForm({\n  isEstimate,\n  mint,\n  setMint,\n  amount,\n  setAmount,\n}: {\n  isEstimate: boolean;\n  mint: PublicKey;\n  setMint: (m: PublicKey) => void;\n  amount: number;\n  setAmount: (a: number) => void;\n}) {\n  const [showTokenDialog, setShowTokenDialog] = useState(false);\n  const tokenAccount = useOwnedTokenAccount(mint);\n  const mintAccount = useMintAccount(mint);\n\n  return (\n    <Paper elevation={0} variant=\"outlined\">\n      <div\n        style={{\n          height: \"50px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <TokenButton mint={mint} onClick={() => setShowTokenDialog(true)} />\n        <TextField\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(parseFloat(e.target.value))}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        />\n      </div>\n      <div style={{ marginLeft: \"10px\", height: \"30px\" }}>\n        <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n          {tokenAccount && mintAccount\n            ? `Balance: ${(\n                tokenAccount.account.amount.toNumber() /\n                10 ** mintAccount.decimals\n              ).toFixed(mintAccount.decimals)}`\n            : `-`}\n        </Typography>\n      </div>\n      <TokenDialog\n        setMint={setMint}\n        open={showTokenDialog}\n        onClose={() => setShowTokenDialog(false)}\n      />\n    </Paper>\n  );\n}\n\nfunction TokenButton({\n  mint,\n  onClick,\n}: {\n  mint: PublicKey;\n  onClick: () => void;\n}) {\n  return (\n    <Button onClick={onClick} style={{ width: \"116px\" }}>\n      <TokenIcon mint={mint} style={{ width: \"25px\" }} />\n      <TokenName mint={mint} />\n      <ExpandMore />\n    </Button>\n  );\n}\n\nexport function TokenIcon({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenList = useTokenList();\n  let tokenInfo = tokenList.filter((t) => t.address === mint.toString())[0];\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {tokenInfo.logoURI ? (\n        <img alt=\"token logo\" style={style} src={tokenInfo.logoURI} />\n      ) : (\n        <div style={style}></div>\n      )}\n    </div>\n  );\n}\n\nfunction TokenName({ mint }: { mint: PublicKey }) {\n  const tokenList = useTokenList();\n  let tokenInfo = tokenList.filter((t) => t.address === mint.toString())[0];\n  return (\n    <Typography style={{ marginLeft: \"5px\" }}>{tokenInfo.symbol}</Typography>\n  );\n}\n\nfunction SwapButton() {\n  const styles = useStyles();\n  const { fromMint, toMint, fromAmount, minExpectedAmount } = useSwapContext();\n\n  const sendSwapTransaction = async () => {\n    console.log(\"sending swap\");\n  };\n  return (\n    <Button\n      variant=\"contained\"\n      className={styles.swapButton}\n      onClick={sendSwapTransaction}\n    >\n      Swap\n    </Button>\n  );\n}\n\nfunction TokenSelector() {\n  return <div></div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { Provider } from \"@project-serum/anchor\";\n// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { ConfirmOptions, Connection } from \"@solana/web3.js\";\nimport { TokenListProvider } from \"@solana/spl-token-registry\";\nimport Swap from \"./components/Swap\";\nimport \"./App.css\";\n\nfunction App() {\n  const [params, setParams] = useState<any>(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Create the provider and token list.\n  useEffect(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    const network = \"https://api.mainnet-beta.solana.com\";\n    const wallet = new Wallet(\"https://www.sollet.io\", network);\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, wallet, opts);\n    new TokenListProvider().resolve().then((tokenList) => {\n      setParams({\n        provider,\n        tokenList,\n      });\n      wallet.connect();\n    });\n  }, [setParams]);\n\n  // Connect to the wallet.\n  useEffect(() => {\n    if (params !== null) {\n      params.provider.wallet.on(\"connect\", () => {\n        setIsConnected(true);\n      });\n      params.provider.wallet.connect();\n    }\n  }, [params]);\n\n  return (\n    <div\n      style={{\n        width: \"450px\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        position: \"absolute\",\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {isConnected ? (\n        <Swap provider={params.provider} tokenList={params.tokenList} />\n      ) : (\n        <Typography style={{ textAlign: \"center\" }}>Disconnected</Typography>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}